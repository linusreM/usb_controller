
/home/linus/programming/stm32/hidcontroller/Debug/hidcontroller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f8c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08003098  08003098  00013098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003164  08003164  00013164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003168  08003168  00013168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000130  20000000  0800316c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000950  20000130  0800329c  00020130  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000a80  0800329c  00020a80  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
  9 .debug_info   000184d0  00000000  00000000  00020159  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000384e  00000000  00000000  00038629  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005026  00000000  00000000  0003be77  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000948  00000000  00000000  00040ea0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000c60  00000000  00000000  000417e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00005bc0  00000000  00000000  00042448  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000032a4  00000000  00000000  00048008  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004b2ac  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000016ac  00000000  00000000  0004b328  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000130 	.word	0x20000130
 8000128:	00000000 	.word	0x00000000
 800012c:	08003080 	.word	0x08003080

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000134 	.word	0x20000134
 8000148:	08003080 	.word	0x08003080

0800014c <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 800014c:	4b08      	ldr	r3, [pc, #32]	; (8000170 <HAL_InitTick+0x24>)
{
 800014e:	b510      	push	{r4, lr}
 8000150:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000152:	6818      	ldr	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb0 f0f3 	udiv	r0, r0, r3
 800015c:	f000 fb08 	bl	8000770 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000160:	2200      	movs	r2, #0
 8000162:	4621      	mov	r1, r4
 8000164:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000168:	f000 fac2 	bl	80006f0 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 800016c:	2000      	movs	r0, #0
 800016e:	bd10      	pop	{r4, pc}
 8000170:	20000080 	.word	0x20000080

08000174 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000174:	4a07      	ldr	r2, [pc, #28]	; (8000194 <HAL_Init+0x20>)
{
 8000176:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000178:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800017a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800017c:	f043 0310 	orr.w	r3, r3, #16
 8000180:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000182:	f000 faa3 	bl	80006cc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000186:	2000      	movs	r0, #0
 8000188:	f7ff ffe0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 800018c:	f002 fcf0 	bl	8002b70 <HAL_MspInit>
}
 8000190:	2000      	movs	r0, #0
 8000192:	bd08      	pop	{r3, pc}
 8000194:	40022000 	.word	0x40022000

08000198 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000198:	4a02      	ldr	r2, [pc, #8]	; (80001a4 <HAL_IncTick+0xc>)
 800019a:	6813      	ldr	r3, [r2, #0]
 800019c:	3301      	adds	r3, #1
 800019e:	6013      	str	r3, [r2, #0]
 80001a0:	4770      	bx	lr
 80001a2:	bf00      	nop
 80001a4:	200001c8 	.word	0x200001c8

080001a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001a8:	4b01      	ldr	r3, [pc, #4]	; (80001b0 <HAL_GetTick+0x8>)
 80001aa:	6818      	ldr	r0, [r3, #0]
}
 80001ac:	4770      	bx	lr
 80001ae:	bf00      	nop
 80001b0:	200001c8 	.word	0x200001c8

080001b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80001b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80001b6:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 80001b8:	f7ff fff6 	bl	80001a8 <HAL_GetTick>
 80001bc:	4605      	mov	r5, r0
  uint32_t wait = Delay;
 80001be:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001c0:	1c63      	adds	r3, r4, #1
  {
     wait++;
 80001c2:	bf18      	it	ne
 80001c4:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80001c6:	f7ff ffef 	bl	80001a8 <HAL_GetTick>
 80001ca:	1b40      	subs	r0, r0, r5
 80001cc:	42a0      	cmp	r0, r4
 80001ce:	d3fa      	bcc.n	80001c6 <HAL_Delay+0x12>
  {
  }
}
 80001d0:	b003      	add	sp, #12
 80001d2:	bd30      	pop	{r4, r5, pc}

080001d4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80001d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80001d6:	2600      	movs	r6, #0
{
 80001d8:	4604      	mov	r4, r0
 80001da:	460d      	mov	r5, r1
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80001dc:	9601      	str	r6, [sp, #4]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80001de:	f7ff ffe3 	bl	80001a8 <HAL_GetTick>
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80001e2:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80001e4:	4607      	mov	r7, r0
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80001e6:	689a      	ldr	r2, [r3, #8]
 80001e8:	05d2      	lsls	r2, r2, #23
 80001ea:	d508      	bpl.n	80001fe <HAL_ADC_PollForConversion+0x2a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
    
    return HAL_ERROR;
 80001ec:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80001ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 80001f0:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80001f4:	f043 0320 	orr.w	r3, r3, #32
 80001f8:	62a3      	str	r3, [r4, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
}
 80001fa:	b003      	add	sp, #12
 80001fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80001fe:	685a      	ldr	r2, [r3, #4]
 8000200:	05d6      	lsls	r6, r2, #23
 8000202:	d403      	bmi.n	800020c <HAL_ADC_PollForConversion+0x38>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000206:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 800020a:	d03b      	beq.n	8000284 <HAL_ADC_PollForConversion+0xb0>
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800020c:	4b3a      	ldr	r3, [pc, #232]	; (80002f8 <HAL_ADC_PollForConversion+0x124>)
 800020e:	2002      	movs	r0, #2
 8000210:	681e      	ldr	r6, [r3, #0]
 8000212:	f001 fa99 	bl	8001748 <HAL_RCCEx_GetPeriphCLKFreq>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000216:	6823      	ldr	r3, [r4, #0]
 8000218:	4a38      	ldr	r2, [pc, #224]	; (80002fc <HAL_ADC_PollForConversion+0x128>)
 800021a:	6919      	ldr	r1, [r3, #16]
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800021c:	fbb6 f0f0 	udiv	r0, r6, r0
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000220:	4211      	tst	r1, r2
 8000222:	4a37      	ldr	r2, [pc, #220]	; (8000300 <HAL_ADC_PollForConversion+0x12c>)
 8000224:	d14f      	bne.n	80002c6 <HAL_ADC_PollForConversion+0xf2>
 8000226:	68de      	ldr	r6, [r3, #12]
 8000228:	4936      	ldr	r1, [pc, #216]	; (8000304 <HAL_ADC_PollForConversion+0x130>)
 800022a:	420e      	tst	r6, r1
 800022c:	d14b      	bne.n	80002c6 <HAL_ADC_PollForConversion+0xf2>
 800022e:	6919      	ldr	r1, [r3, #16]
 8000230:	4211      	tst	r1, r2
 8000232:	d159      	bne.n	80002e8 <HAL_ADC_PollForConversion+0x114>
 8000234:	68da      	ldr	r2, [r3, #12]
 8000236:	4b34      	ldr	r3, [pc, #208]	; (8000308 <HAL_ADC_PollForConversion+0x134>)
 8000238:	421a      	tst	r2, r3
 800023a:	bf14      	ite	ne
 800023c:	2329      	movne	r3, #41	; 0x29
 800023e:	2314      	moveq	r3, #20
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000240:	fb00 f603 	mul.w	r6, r0, r3
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000244:	9b01      	ldr	r3, [sp, #4]
 8000246:	429e      	cmp	r6, r3
 8000248:	d920      	bls.n	800028c <HAL_ADC_PollForConversion+0xb8>
      if(Timeout != HAL_MAX_DELAY)
 800024a:	1c6b      	adds	r3, r5, #1
 800024c:	d005      	beq.n	800025a <HAL_ADC_PollForConversion+0x86>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800024e:	b15d      	cbz	r5, 8000268 <HAL_ADC_PollForConversion+0x94>
 8000250:	f7ff ffaa 	bl	80001a8 <HAL_GetTick>
 8000254:	1bc0      	subs	r0, r0, r7
 8000256:	4285      	cmp	r5, r0
 8000258:	d306      	bcc.n	8000268 <HAL_ADC_PollForConversion+0x94>
      Conversion_Timeout_CPU_cycles ++;
 800025a:	9b01      	ldr	r3, [sp, #4]
 800025c:	3301      	adds	r3, #1
 800025e:	9301      	str	r3, [sp, #4]
 8000260:	e7f0      	b.n	8000244 <HAL_ADC_PollForConversion+0x70>
      if(Timeout != HAL_MAX_DELAY)
 8000262:	1c68      	adds	r0, r5, #1
 8000264:	d00f      	beq.n	8000286 <HAL_ADC_PollForConversion+0xb2>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000266:	b945      	cbnz	r5, 800027a <HAL_ADC_PollForConversion+0xa6>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000268:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          return HAL_TIMEOUT;
 800026a:	2003      	movs	r0, #3
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800026c:	f043 0304 	orr.w	r3, r3, #4
 8000270:	62a3      	str	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 8000272:	2300      	movs	r3, #0
 8000274:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          return HAL_TIMEOUT;
 8000278:	e7bf      	b.n	80001fa <HAL_ADC_PollForConversion+0x26>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800027a:	f7ff ff95 	bl	80001a8 <HAL_GetTick>
 800027e:	1bc0      	subs	r0, r0, r7
 8000280:	4285      	cmp	r5, r0
 8000282:	d3f1      	bcc.n	8000268 <HAL_ADC_PollForConversion+0x94>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000284:	6822      	ldr	r2, [r4, #0]
 8000286:	6813      	ldr	r3, [r2, #0]
 8000288:	0799      	lsls	r1, r3, #30
 800028a:	d5ea      	bpl.n	8000262 <HAL_ADC_PollForConversion+0x8e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800028c:	f06f 0312 	mvn.w	r3, #18
 8000290:	6822      	ldr	r2, [r4, #0]
 8000292:	6013      	str	r3, [r2, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000294:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000296:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800029a:	62a3      	str	r3, [r4, #40]	; 0x28
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800029c:	6893      	ldr	r3, [r2, #8]
 800029e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80002a2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80002a6:	d125      	bne.n	80002f4 <HAL_ADC_PollForConversion+0x120>
 80002a8:	68e3      	ldr	r3, [r4, #12]
 80002aa:	bb1b      	cbnz	r3, 80002f4 <HAL_ADC_PollForConversion+0x120>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80002ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80002ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80002b2:	62a3      	str	r3, [r4, #40]	; 0x28
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80002b4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80002b6:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 80002ba:	d11b      	bne.n	80002f4 <HAL_ADC_PollForConversion+0x120>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80002bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80002be:	f043 0301 	orr.w	r3, r3, #1
 80002c2:	62a3      	str	r3, [r4, #40]	; 0x28
 80002c4:	e799      	b.n	80001fa <HAL_ADC_PollForConversion+0x26>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80002c6:	6919      	ldr	r1, [r3, #16]
 80002c8:	4211      	tst	r1, r2
 80002ca:	d103      	bne.n	80002d4 <HAL_ADC_PollForConversion+0x100>
 80002cc:	68d9      	ldr	r1, [r3, #12]
 80002ce:	4a0e      	ldr	r2, [pc, #56]	; (8000308 <HAL_ADC_PollForConversion+0x134>)
 80002d0:	4211      	tst	r1, r2
 80002d2:	d00b      	beq.n	80002ec <HAL_ADC_PollForConversion+0x118>
 80002d4:	6919      	ldr	r1, [r3, #16]
 80002d6:	4a0d      	ldr	r2, [pc, #52]	; (800030c <HAL_ADC_PollForConversion+0x138>)
 80002d8:	4211      	tst	r1, r2
 80002da:	d109      	bne.n	80002f0 <HAL_ADC_PollForConversion+0x11c>
 80002dc:	68db      	ldr	r3, [r3, #12]
 80002de:	4213      	tst	r3, r2
 80002e0:	bf14      	ite	ne
 80002e2:	23fc      	movne	r3, #252	; 0xfc
 80002e4:	2354      	moveq	r3, #84	; 0x54
 80002e6:	e7ab      	b.n	8000240 <HAL_ADC_PollForConversion+0x6c>
 80002e8:	2329      	movs	r3, #41	; 0x29
 80002ea:	e7a9      	b.n	8000240 <HAL_ADC_PollForConversion+0x6c>
 80002ec:	2354      	movs	r3, #84	; 0x54
 80002ee:	e7a7      	b.n	8000240 <HAL_ADC_PollForConversion+0x6c>
 80002f0:	23fc      	movs	r3, #252	; 0xfc
 80002f2:	e7a5      	b.n	8000240 <HAL_ADC_PollForConversion+0x6c>
  return HAL_OK;
 80002f4:	2000      	movs	r0, #0
 80002f6:	e780      	b.n	80001fa <HAL_ADC_PollForConversion+0x26>
 80002f8:	20000080 	.word	0x20000080
 80002fc:	24924924 	.word	0x24924924
 8000300:	12492492 	.word	0x12492492
 8000304:	00924924 	.word	0x00924924
 8000308:	00492492 	.word	0x00492492
 800030c:	00249249 	.word	0x00249249

08000310 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000310:	6803      	ldr	r3, [r0, #0]
 8000312:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8000314:	4770      	bx	lr
	...

08000318 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8000318:	2300      	movs	r3, #0
{ 
 800031a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 800031c:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800031e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000322:	2b01      	cmp	r3, #1
 8000324:	d074      	beq.n	8000410 <HAL_ADC_ConfigChannel+0xf8>
 8000326:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000328:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 800032a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 800032e:	2d06      	cmp	r5, #6
 8000330:	6802      	ldr	r2, [r0, #0]
 8000332:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8000336:	680c      	ldr	r4, [r1, #0]
 8000338:	d825      	bhi.n	8000386 <HAL_ADC_ConfigChannel+0x6e>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800033a:	442b      	add	r3, r5
 800033c:	251f      	movs	r5, #31
 800033e:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8000340:	3b05      	subs	r3, #5
 8000342:	409d      	lsls	r5, r3
 8000344:	ea26 0505 	bic.w	r5, r6, r5
 8000348:	fa04 f303 	lsl.w	r3, r4, r3
 800034c:	432b      	orrs	r3, r5
 800034e:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000350:	2c09      	cmp	r4, #9
 8000352:	ea4f 0344 	mov.w	r3, r4, lsl #1
 8000356:	688d      	ldr	r5, [r1, #8]
 8000358:	d92f      	bls.n	80003ba <HAL_ADC_ConfigChannel+0xa2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800035a:	2607      	movs	r6, #7
 800035c:	4423      	add	r3, r4
 800035e:	68d1      	ldr	r1, [r2, #12]
 8000360:	3b1e      	subs	r3, #30
 8000362:	409e      	lsls	r6, r3
 8000364:	ea21 0106 	bic.w	r1, r1, r6
 8000368:	fa05 f303 	lsl.w	r3, r5, r3
 800036c:	430b      	orrs	r3, r1
 800036e:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000370:	f1a4 0310 	sub.w	r3, r4, #16
 8000374:	2b01      	cmp	r3, #1
 8000376:	d92b      	bls.n	80003d0 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000378:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800037a:	2200      	movs	r2, #0
 800037c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8000380:	4618      	mov	r0, r3
 8000382:	b002      	add	sp, #8
 8000384:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8000386:	2d0c      	cmp	r5, #12
 8000388:	d80b      	bhi.n	80003a2 <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800038a:	442b      	add	r3, r5
 800038c:	251f      	movs	r5, #31
 800038e:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8000390:	3b23      	subs	r3, #35	; 0x23
 8000392:	409d      	lsls	r5, r3
 8000394:	ea26 0505 	bic.w	r5, r6, r5
 8000398:	fa04 f303 	lsl.w	r3, r4, r3
 800039c:	432b      	orrs	r3, r5
 800039e:	6313      	str	r3, [r2, #48]	; 0x30
 80003a0:	e7d6      	b.n	8000350 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80003a2:	442b      	add	r3, r5
 80003a4:	251f      	movs	r5, #31
 80003a6:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 80003a8:	3b41      	subs	r3, #65	; 0x41
 80003aa:	409d      	lsls	r5, r3
 80003ac:	ea26 0505 	bic.w	r5, r6, r5
 80003b0:	fa04 f303 	lsl.w	r3, r4, r3
 80003b4:	432b      	orrs	r3, r5
 80003b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80003b8:	e7ca      	b.n	8000350 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80003ba:	2607      	movs	r6, #7
 80003bc:	6911      	ldr	r1, [r2, #16]
 80003be:	4423      	add	r3, r4
 80003c0:	409e      	lsls	r6, r3
 80003c2:	ea21 0106 	bic.w	r1, r1, r6
 80003c6:	fa05 f303 	lsl.w	r3, r5, r3
 80003ca:	430b      	orrs	r3, r1
 80003cc:	6113      	str	r3, [r2, #16]
 80003ce:	e7cf      	b.n	8000370 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 80003d0:	4b10      	ldr	r3, [pc, #64]	; (8000414 <HAL_ADC_ConfigChannel+0xfc>)
 80003d2:	429a      	cmp	r2, r3
 80003d4:	d116      	bne.n	8000404 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80003d6:	6893      	ldr	r3, [r2, #8]
 80003d8:	021b      	lsls	r3, r3, #8
 80003da:	d4cd      	bmi.n	8000378 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80003dc:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80003de:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80003e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80003e4:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80003e6:	d1c7      	bne.n	8000378 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80003e8:	4b0b      	ldr	r3, [pc, #44]	; (8000418 <HAL_ADC_ConfigChannel+0x100>)
 80003ea:	4a0c      	ldr	r2, [pc, #48]	; (800041c <HAL_ADC_ConfigChannel+0x104>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	fbb3 f2f2 	udiv	r2, r3, r2
 80003f2:	230a      	movs	r3, #10
 80003f4:	4353      	muls	r3, r2
            wait_loop_index--;
 80003f6:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80003f8:	9b01      	ldr	r3, [sp, #4]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d0bc      	beq.n	8000378 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 80003fe:	9b01      	ldr	r3, [sp, #4]
 8000400:	3b01      	subs	r3, #1
 8000402:	e7f8      	b.n	80003f6 <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000404:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000406:	f043 0320 	orr.w	r3, r3, #32
 800040a:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 800040c:	2301      	movs	r3, #1
 800040e:	e7b4      	b.n	800037a <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8000410:	2302      	movs	r3, #2
 8000412:	e7b5      	b.n	8000380 <HAL_ADC_ConfigChannel+0x68>
 8000414:	40012400 	.word	0x40012400
 8000418:	20000080 	.word	0x20000080
 800041c:	000f4240 	.word	0x000f4240

08000420 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8000420:	2300      	movs	r3, #0
{
 8000422:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000424:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000426:	6803      	ldr	r3, [r0, #0]
{
 8000428:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800042a:	689a      	ldr	r2, [r3, #8]
 800042c:	07d2      	lsls	r2, r2, #31
 800042e:	d502      	bpl.n	8000436 <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000430:	2000      	movs	r0, #0
}
 8000432:	b002      	add	sp, #8
 8000434:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 8000436:	689a      	ldr	r2, [r3, #8]
 8000438:	f042 0201 	orr.w	r2, r2, #1
 800043c:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800043e:	4b12      	ldr	r3, [pc, #72]	; (8000488 <ADC_Enable+0x68>)
 8000440:	4a12      	ldr	r2, [pc, #72]	; (800048c <ADC_Enable+0x6c>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8000448:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800044a:	9b01      	ldr	r3, [sp, #4]
 800044c:	b9c3      	cbnz	r3, 8000480 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 800044e:	f7ff feab 	bl	80001a8 <HAL_GetTick>
 8000452:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000454:	6823      	ldr	r3, [r4, #0]
 8000456:	689d      	ldr	r5, [r3, #8]
 8000458:	f015 0501 	ands.w	r5, r5, #1
 800045c:	d1e8      	bne.n	8000430 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800045e:	f7ff fea3 	bl	80001a8 <HAL_GetTick>
 8000462:	1b80      	subs	r0, r0, r6
 8000464:	2802      	cmp	r0, #2
 8000466:	d9f5      	bls.n	8000454 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000468:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 800046a:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800046e:	f043 0310 	orr.w	r3, r3, #16
 8000472:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000474:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 8000476:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000478:	f043 0301 	orr.w	r3, r3, #1
 800047c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800047e:	e7d8      	b.n	8000432 <ADC_Enable+0x12>
      wait_loop_index--;
 8000480:	9b01      	ldr	r3, [sp, #4]
 8000482:	3b01      	subs	r3, #1
 8000484:	e7e0      	b.n	8000448 <ADC_Enable+0x28>
 8000486:	bf00      	nop
 8000488:	20000080 	.word	0x20000080
 800048c:	000f4240 	.word	0x000f4240

08000490 <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 8000490:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8000494:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8000496:	2b01      	cmp	r3, #1
{
 8000498:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800049a:	d054      	beq.n	8000546 <HAL_ADC_Start+0xb6>
 800049c:	2301      	movs	r3, #1
 800049e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 80004a2:	f7ff ffbd 	bl	8000420 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d149      	bne.n	800053e <HAL_ADC_Start+0xae>
    ADC_STATE_CLR_SET(hadc->State,
 80004aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80004ac:	4a27      	ldr	r2, [pc, #156]	; (800054c <HAL_ADC_Start+0xbc>)
    ADC_STATE_CLR_SET(hadc->State,
 80004ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80004b2:	f023 0301 	bic.w	r3, r3, #1
 80004b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ba:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80004bc:	6823      	ldr	r3, [r4, #0]
 80004be:	4293      	cmp	r3, r2
 80004c0:	d104      	bne.n	80004cc <HAL_ADC_Start+0x3c>
 80004c2:	4923      	ldr	r1, [pc, #140]	; (8000550 <HAL_ADC_Start+0xc0>)
 80004c4:	684a      	ldr	r2, [r1, #4]
 80004c6:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 80004ca:	d12e      	bne.n	800052a <HAL_ADC_Start+0x9a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80004cc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80004ce:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80004d2:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80004d4:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80004d6:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80004d8:	bf41      	itttt	mi
 80004da:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 80004dc:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 80004e0:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 80004e4:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80004e6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80004e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80004ec:	bf1c      	itt	ne
 80004ee:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 80004f0:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80004f4:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 80004f6:	2200      	movs	r2, #0
 80004f8:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80004fc:	f06f 0202 	mvn.w	r2, #2
 8000500:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000502:	689a      	ldr	r2, [r3, #8]
 8000504:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000508:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 800050c:	d113      	bne.n	8000536 <HAL_ADC_Start+0xa6>
 800050e:	4a0f      	ldr	r2, [pc, #60]	; (800054c <HAL_ADC_Start+0xbc>)
 8000510:	4293      	cmp	r3, r2
 8000512:	d105      	bne.n	8000520 <HAL_ADC_Start+0x90>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000514:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8000518:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800051a:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 800051e:	d10a      	bne.n	8000536 <HAL_ADC_Start+0xa6>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000520:	689a      	ldr	r2, [r3, #8]
 8000522:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800052a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800052c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000530:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000532:	684a      	ldr	r2, [r1, #4]
 8000534:	e7cf      	b.n	80004d6 <HAL_ADC_Start+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000536:	689a      	ldr	r2, [r3, #8]
 8000538:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800053c:	e7f3      	b.n	8000526 <HAL_ADC_Start+0x96>
    __HAL_UNLOCK(hadc);
 800053e:	2300      	movs	r3, #0
 8000540:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8000544:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8000546:	2002      	movs	r0, #2
}
 8000548:	bd10      	pop	{r4, pc}
 800054a:	bf00      	nop
 800054c:	40012800 	.word	0x40012800
 8000550:	40012400 	.word	0x40012400

08000554 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000554:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000556:	6803      	ldr	r3, [r0, #0]
{
 8000558:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800055a:	689a      	ldr	r2, [r3, #8]
 800055c:	07d2      	lsls	r2, r2, #31
 800055e:	d401      	bmi.n	8000564 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000560:	2000      	movs	r0, #0
 8000562:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8000564:	689a      	ldr	r2, [r3, #8]
 8000566:	f022 0201 	bic.w	r2, r2, #1
 800056a:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800056c:	f7ff fe1c 	bl	80001a8 <HAL_GetTick>
 8000570:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000572:	6823      	ldr	r3, [r4, #0]
 8000574:	689b      	ldr	r3, [r3, #8]
 8000576:	07db      	lsls	r3, r3, #31
 8000578:	d5f2      	bpl.n	8000560 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800057a:	f7ff fe15 	bl	80001a8 <HAL_GetTick>
 800057e:	1b40      	subs	r0, r0, r5
 8000580:	2802      	cmp	r0, #2
 8000582:	d9f6      	bls.n	8000572 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000584:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000586:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000588:	f043 0310 	orr.w	r3, r3, #16
 800058c:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800058e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000590:	f043 0301 	orr.w	r3, r3, #1
 8000594:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000596:	bd38      	pop	{r3, r4, r5, pc}

08000598 <HAL_ADC_Init>:
{
 8000598:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 800059a:	4604      	mov	r4, r0
 800059c:	2800      	cmp	r0, #0
 800059e:	d071      	beq.n	8000684 <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80005a0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80005a2:	b923      	cbnz	r3, 80005ae <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 80005a4:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 80005a6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 80005aa:	f002 fb29 	bl	8002c00 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80005ae:	4620      	mov	r0, r4
 80005b0:	f7ff ffd0 	bl	8000554 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80005b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80005b6:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 80005ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80005bc:	d164      	bne.n	8000688 <HAL_ADC_Init+0xf0>
 80005be:	2800      	cmp	r0, #0
 80005c0:	d162      	bne.n	8000688 <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80005c2:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 80005c4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80005c8:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 80005ca:	f023 0302 	bic.w	r3, r3, #2
 80005ce:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80005d2:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80005d4:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 80005d6:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 80005d8:	68e3      	ldr	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80005da:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80005de:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80005e2:	d038      	beq.n	8000656 <HAL_ADC_Init+0xbe>
 80005e4:	2901      	cmp	r1, #1
 80005e6:	bf14      	ite	ne
 80005e8:	4606      	movne	r6, r0
 80005ea:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80005ee:	6965      	ldr	r5, [r4, #20]
 80005f0:	2d01      	cmp	r5, #1
 80005f2:	d107      	bne.n	8000604 <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d130      	bne.n	800065a <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80005f8:	69a3      	ldr	r3, [r4, #24]
 80005fa:	3b01      	subs	r3, #1
 80005fc:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 8000600:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8000604:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000606:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 800060a:	685d      	ldr	r5, [r3, #4]
 800060c:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8000610:	ea45 0506 	orr.w	r5, r5, r6
 8000614:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000616:	689e      	ldr	r6, [r3, #8]
 8000618:	4d1d      	ldr	r5, [pc, #116]	; (8000690 <HAL_ADC_Init+0xf8>)
 800061a:	ea05 0506 	and.w	r5, r5, r6
 800061e:	ea45 0502 	orr.w	r5, r5, r2
 8000622:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000624:	d001      	beq.n	800062a <HAL_ADC_Init+0x92>
 8000626:	2901      	cmp	r1, #1
 8000628:	d120      	bne.n	800066c <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800062a:	6921      	ldr	r1, [r4, #16]
 800062c:	3901      	subs	r1, #1
 800062e:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8000630:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8000632:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8000636:	4329      	orrs	r1, r5
 8000638:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800063a:	6899      	ldr	r1, [r3, #8]
 800063c:	4b15      	ldr	r3, [pc, #84]	; (8000694 <HAL_ADC_Init+0xfc>)
 800063e:	400b      	ands	r3, r1
 8000640:	429a      	cmp	r2, r3
 8000642:	d115      	bne.n	8000670 <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 8000644:	2300      	movs	r3, #0
 8000646:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8000648:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800064a:	f023 0303 	bic.w	r3, r3, #3
 800064e:	f043 0301 	orr.w	r3, r3, #1
 8000652:	62a3      	str	r3, [r4, #40]	; 0x28
 8000654:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000656:	460e      	mov	r6, r1
 8000658:	e7c9      	b.n	80005ee <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800065a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800065c:	f043 0320 	orr.w	r3, r3, #32
 8000660:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000662:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	62e3      	str	r3, [r4, #44]	; 0x2c
 800066a:	e7cb      	b.n	8000604 <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 800066c:	2100      	movs	r1, #0
 800066e:	e7df      	b.n	8000630 <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 8000670:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000672:	f023 0312 	bic.w	r3, r3, #18
 8000676:	f043 0310 	orr.w	r3, r3, #16
 800067a:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800067c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800067e:	f043 0301 	orr.w	r3, r3, #1
 8000682:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8000684:	2001      	movs	r0, #1
}
 8000686:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000688:	f043 0310 	orr.w	r3, r3, #16
 800068c:	62a3      	str	r3, [r4, #40]	; 0x28
 800068e:	e7f9      	b.n	8000684 <HAL_ADC_Init+0xec>
 8000690:	ffe1f7fd 	.word	0xffe1f7fd
 8000694:	ff1f0efe 	.word	0xff1f0efe

08000698 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8000698:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 800069c:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 800069e:	2b01      	cmp	r3, #1
{
 80006a0:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80006a2:	d011      	beq.n	80006c8 <HAL_ADC_Stop+0x30>
 80006a4:	2301      	movs	r3, #1
 80006a6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80006aa:	f7ff ff53 	bl	8000554 <ADC_ConversionStop_Disable>
  if (tmp_hal_status == HAL_OK)
 80006ae:	b938      	cbnz	r0, 80006c0 <HAL_ADC_Stop+0x28>
    ADC_STATE_CLR_SET(hadc->State,
 80006b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80006b2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80006b6:	f023 0301 	bic.w	r3, r3, #1
 80006ba:	f043 0301 	orr.w	r3, r3, #1
 80006be:	62a3      	str	r3, [r4, #40]	; 0x28
  __HAL_UNLOCK(hadc);
 80006c0:	2300      	movs	r3, #0
 80006c2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  return tmp_hal_status;
 80006c6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 80006c8:	2002      	movs	r0, #2
}
 80006ca:	bd10      	pop	{r4, pc}

080006cc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006cc:	4a07      	ldr	r2, [pc, #28]	; (80006ec <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80006ce:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006d0:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80006d2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80006da:	041b      	lsls	r3, r3, #16
 80006dc:	0c1b      	lsrs	r3, r3, #16
 80006de:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80006e6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80006e8:	60d3      	str	r3, [r2, #12]
 80006ea:	4770      	bx	lr
 80006ec:	e000ed00 	.word	0xe000ed00

080006f0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006f0:	4b17      	ldr	r3, [pc, #92]	; (8000750 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006f2:	b530      	push	{r4, r5, lr}
 80006f4:	68dc      	ldr	r4, [r3, #12]
 80006f6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006fa:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006fe:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000700:	2b04      	cmp	r3, #4
 8000702:	bf28      	it	cs
 8000704:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000706:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000708:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800070c:	bf98      	it	ls
 800070e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000710:	fa05 f303 	lsl.w	r3, r5, r3
 8000714:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000718:	bf88      	it	hi
 800071a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800071c:	4019      	ands	r1, r3
 800071e:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000720:	fa05 f404 	lsl.w	r4, r5, r4
 8000724:	3c01      	subs	r4, #1
 8000726:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000728:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800072a:	ea42 0201 	orr.w	r2, r2, r1
 800072e:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000732:	bfaf      	iteee	ge
 8000734:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000738:	4b06      	ldrlt	r3, [pc, #24]	; (8000754 <HAL_NVIC_SetPriority+0x64>)
 800073a:	f000 000f 	andlt.w	r0, r0, #15
 800073e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000740:	bfa5      	ittet	ge
 8000742:	b2d2      	uxtbge	r2, r2
 8000744:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000748:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800074a:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800074e:	bd30      	pop	{r4, r5, pc}
 8000750:	e000ed00 	.word	0xe000ed00
 8000754:	e000ed14 	.word	0xe000ed14

08000758 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000758:	2301      	movs	r3, #1
 800075a:	0942      	lsrs	r2, r0, #5
 800075c:	f000 001f 	and.w	r0, r0, #31
 8000760:	fa03 f000 	lsl.w	r0, r3, r0
 8000764:	4b01      	ldr	r3, [pc, #4]	; (800076c <HAL_NVIC_EnableIRQ+0x14>)
 8000766:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800076a:	4770      	bx	lr
 800076c:	e000e100 	.word	0xe000e100

08000770 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000770:	3801      	subs	r0, #1
 8000772:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000776:	d20a      	bcs.n	800078e <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000778:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800077a:	4b06      	ldr	r3, [pc, #24]	; (8000794 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800077c:	4a06      	ldr	r2, [pc, #24]	; (8000798 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800077e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000780:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000784:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000786:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000788:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800078e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	e000e010 	.word	0xe000e010
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800079c:	4b04      	ldr	r3, [pc, #16]	; (80007b0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800079e:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80007a0:	681a      	ldr	r2, [r3, #0]
 80007a2:	bf0c      	ite	eq
 80007a4:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80007a8:	f022 0204 	bicne.w	r2, r2, #4
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	4770      	bx	lr
 80007b0:	e000e010 	.word	0xe000e010

080007b4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80007b4:	4770      	bx	lr

080007b6 <HAL_SYSTICK_IRQHandler>:
{
 80007b6:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80007b8:	f7ff fffc 	bl	80007b4 <HAL_SYSTICK_Callback>
 80007bc:	bd08      	pop	{r3, pc}
	...

080007c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80007c4:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80007c6:	4616      	mov	r6, r2
 80007c8:	4b65      	ldr	r3, [pc, #404]	; (8000960 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80007ca:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000970 <HAL_GPIO_Init+0x1b0>
 80007ce:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000974 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80007d2:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007d6:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80007d8:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007dc:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80007e0:	45a0      	cmp	r8, r4
 80007e2:	d17f      	bne.n	80008e4 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 80007e4:	684d      	ldr	r5, [r1, #4]
 80007e6:	2d12      	cmp	r5, #18
 80007e8:	f000 80af 	beq.w	800094a <HAL_GPIO_Init+0x18a>
 80007ec:	f200 8088 	bhi.w	8000900 <HAL_GPIO_Init+0x140>
 80007f0:	2d02      	cmp	r5, #2
 80007f2:	f000 80a7 	beq.w	8000944 <HAL_GPIO_Init+0x184>
 80007f6:	d87c      	bhi.n	80008f2 <HAL_GPIO_Init+0x132>
 80007f8:	2d00      	cmp	r5, #0
 80007fa:	f000 808e 	beq.w	800091a <HAL_GPIO_Init+0x15a>
 80007fe:	2d01      	cmp	r5, #1
 8000800:	f000 809e 	beq.w	8000940 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8000804:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000808:	2cff      	cmp	r4, #255	; 0xff
 800080a:	bf93      	iteet	ls
 800080c:	4682      	movls	sl, r0
 800080e:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000812:	3d08      	subhi	r5, #8
 8000814:	f8d0 b000 	ldrls.w	fp, [r0]
 8000818:	bf92      	itee	ls
 800081a:	00b5      	lslls	r5, r6, #2
 800081c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000820:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8000822:	fa09 f805 	lsl.w	r8, r9, r5
 8000826:	ea2b 0808 	bic.w	r8, fp, r8
 800082a:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800082e:	bf88      	it	hi
 8000830:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8000834:	ea48 0505 	orr.w	r5, r8, r5
 8000838:	f8ca 5000 	str.w	r5, [sl]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800083c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000840:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000844:	d04e      	beq.n	80008e4 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000846:	4d47      	ldr	r5, [pc, #284]	; (8000964 <HAL_GPIO_Init+0x1a4>)
 8000848:	4f46      	ldr	r7, [pc, #280]	; (8000964 <HAL_GPIO_Init+0x1a4>)
 800084a:	69ad      	ldr	r5, [r5, #24]
 800084c:	f026 0803 	bic.w	r8, r6, #3
 8000850:	f045 0501 	orr.w	r5, r5, #1
 8000854:	61bd      	str	r5, [r7, #24]
 8000856:	69bd      	ldr	r5, [r7, #24]
 8000858:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800085c:	f005 0501 	and.w	r5, r5, #1
 8000860:	9501      	str	r5, [sp, #4]
 8000862:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000866:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800086a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800086c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000870:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000874:	fa09 f90b 	lsl.w	r9, r9, fp
 8000878:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800087c:	4d3a      	ldr	r5, [pc, #232]	; (8000968 <HAL_GPIO_Init+0x1a8>)
 800087e:	42a8      	cmp	r0, r5
 8000880:	d068      	beq.n	8000954 <HAL_GPIO_Init+0x194>
 8000882:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000886:	42a8      	cmp	r0, r5
 8000888:	d066      	beq.n	8000958 <HAL_GPIO_Init+0x198>
 800088a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800088e:	42a8      	cmp	r0, r5
 8000890:	d064      	beq.n	800095c <HAL_GPIO_Init+0x19c>
 8000892:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000896:	42a8      	cmp	r0, r5
 8000898:	bf0c      	ite	eq
 800089a:	2503      	moveq	r5, #3
 800089c:	2504      	movne	r5, #4
 800089e:	fa05 f50b 	lsl.w	r5, r5, fp
 80008a2:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80008a6:	f8c8 5008 	str.w	r5, [r8, #8]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 80008aa:	681d      	ldr	r5, [r3, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008ac:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent); 
 80008b0:	bf14      	ite	ne
 80008b2:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 80008b4:	43a5      	biceq	r5, r4
 80008b6:	601d      	str	r5, [r3, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 80008b8:	685d      	ldr	r5, [r3, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008ba:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent); 
 80008be:	bf14      	ite	ne
 80008c0:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 80008c2:	43a5      	biceq	r5, r4
 80008c4:	605d      	str	r5, [r3, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 80008c6:	689d      	ldr	r5, [r3, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008c8:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent); 
 80008cc:	bf14      	ite	ne
 80008ce:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 80008d0:	43a5      	biceq	r5, r4
 80008d2:	609d      	str	r5, [r3, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 80008d4:	68dd      	ldr	r5, [r3, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008d6:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent); 
 80008da:	bf14      	ite	ne
 80008dc:	432c      	orrne	r4, r5
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 80008de:	ea25 0404 	biceq.w	r4, r5, r4
 80008e2:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80008e4:	3601      	adds	r6, #1
 80008e6:	2e10      	cmp	r6, #16
 80008e8:	f47f af73 	bne.w	80007d2 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 80008ec:	b003      	add	sp, #12
 80008ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80008f2:	2d03      	cmp	r5, #3
 80008f4:	d022      	beq.n	800093c <HAL_GPIO_Init+0x17c>
 80008f6:	2d11      	cmp	r5, #17
 80008f8:	d184      	bne.n	8000804 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80008fa:	68ca      	ldr	r2, [r1, #12]
 80008fc:	3204      	adds	r2, #4
          break;
 80008fe:	e781      	b.n	8000804 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000900:	4f1a      	ldr	r7, [pc, #104]	; (800096c <HAL_GPIO_Init+0x1ac>)
 8000902:	42bd      	cmp	r5, r7
 8000904:	d009      	beq.n	800091a <HAL_GPIO_Init+0x15a>
 8000906:	d812      	bhi.n	800092e <HAL_GPIO_Init+0x16e>
 8000908:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000978 <HAL_GPIO_Init+0x1b8>
 800090c:	454d      	cmp	r5, r9
 800090e:	d004      	beq.n	800091a <HAL_GPIO_Init+0x15a>
 8000910:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000914:	454d      	cmp	r5, r9
 8000916:	f47f af75 	bne.w	8000804 <HAL_GPIO_Init+0x44>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 800091a:	688a      	ldr	r2, [r1, #8]
 800091c:	b1c2      	cbz	r2, 8000950 <HAL_GPIO_Init+0x190>
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 800091e:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000920:	bf0c      	ite	eq
 8000922:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000926:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800092a:	2208      	movs	r2, #8
 800092c:	e76a      	b.n	8000804 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800092e:	4575      	cmp	r5, lr
 8000930:	d0f3      	beq.n	800091a <HAL_GPIO_Init+0x15a>
 8000932:	4565      	cmp	r5, ip
 8000934:	d0f1      	beq.n	800091a <HAL_GPIO_Init+0x15a>
 8000936:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800097c <HAL_GPIO_Init+0x1bc>
 800093a:	e7eb      	b.n	8000914 <HAL_GPIO_Init+0x154>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800093c:	2200      	movs	r2, #0
 800093e:	e761      	b.n	8000804 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000940:	68ca      	ldr	r2, [r1, #12]
          break;
 8000942:	e75f      	b.n	8000804 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000944:	68ca      	ldr	r2, [r1, #12]
 8000946:	3208      	adds	r2, #8
          break;
 8000948:	e75c      	b.n	8000804 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800094a:	68ca      	ldr	r2, [r1, #12]
 800094c:	320c      	adds	r2, #12
          break;
 800094e:	e759      	b.n	8000804 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000950:	2204      	movs	r2, #4
 8000952:	e757      	b.n	8000804 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000954:	2500      	movs	r5, #0
 8000956:	e7a2      	b.n	800089e <HAL_GPIO_Init+0xde>
 8000958:	2501      	movs	r5, #1
 800095a:	e7a0      	b.n	800089e <HAL_GPIO_Init+0xde>
 800095c:	2502      	movs	r5, #2
 800095e:	e79e      	b.n	800089e <HAL_GPIO_Init+0xde>
 8000960:	40010400 	.word	0x40010400
 8000964:	40021000 	.word	0x40021000
 8000968:	40010800 	.word	0x40010800
 800096c:	10210000 	.word	0x10210000
 8000970:	10310000 	.word	0x10310000
 8000974:	10320000 	.word	0x10320000
 8000978:	10110000 	.word	0x10110000
 800097c:	10220000 	.word	0x10220000

08000980 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000980:	b10a      	cbz	r2, 8000986 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000982:	6101      	str	r1, [r0, #16]
 8000984:	4770      	bx	lr
 8000986:	0409      	lsls	r1, r1, #16
 8000988:	e7fb      	b.n	8000982 <HAL_GPIO_WritePin+0x2>

0800098a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800098a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t index = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 800098e:	4604      	mov	r4, r0
{
 8000990:	b086      	sub	sp, #24
  if(hpcd == NULL)
 8000992:	2800      	cmp	r0, #0
 8000994:	d060      	beq.n	8000a58 <HAL_PCD_Init+0xce>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 8000996:	f890 3429 	ldrb.w	r3, [r0, #1065]	; 0x429
 800099a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800099e:	b91b      	cbnz	r3, 80009a8 <HAL_PCD_Init+0x1e>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80009a0:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80009a4:	f002 f9ac 	bl	8002d00 <HAL_PCD_MspInit>
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80009a8:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 80009aa:	2303      	movs	r3, #3

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 80009ac:	466e      	mov	r6, sp
  __HAL_PCD_DISABLE(hpcd);
 80009ae:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 80009b2:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  __HAL_PCD_DISABLE(hpcd);
 80009b6:	f000 ff4d 	bl	8001854 <USB_DisableGlobalInt>
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 80009ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009bc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80009be:	682b      	ldr	r3, [r5, #0]
 80009c0:	f104 0804 	add.w	r8, r4, #4
 80009c4:	6033      	str	r3, [r6, #0]
 80009c6:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 80009ca:	6820      	ldr	r0, [r4, #0]
 80009cc:	f000 ff32 	bl	8001834 <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 80009d0:	2100      	movs	r1, #0
 80009d2:	6820      	ldr	r0, [r4, #0]
 80009d4:	f000 ff48 	bl	8001868 <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0U; index < 15U ; index++)
 80009d8:	2100      	movs	r1, #0
 80009da:	4623      	mov	r3, r4
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 80009dc:	4622      	mov	r2, r4
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1U;
 80009de:	2601      	movs	r6, #1
    hpcd->IN_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 80009e0:	4608      	mov	r0, r1
 80009e2:	f104 0510 	add.w	r5, r4, #16
    hpcd->IN_ep[index].num = index;
 80009e6:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
    hpcd->IN_ep[index].tx_fifo_num = index;
 80009ea:	8691      	strh	r1, [r2, #52]	; 0x34
  for (index = 0U; index < 15U ; index++)
 80009ec:	3101      	adds	r1, #1
 80009ee:	290f      	cmp	r1, #15
    hpcd->IN_ep[index].is_in = 1U;
 80009f0:	f882 6029 	strb.w	r6, [r2, #41]	; 0x29
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 80009f4:	f882 002b 	strb.w	r0, [r2, #43]	; 0x2b
    hpcd->IN_ep[index].maxpacket =  0U;
 80009f8:	6390      	str	r0, [r2, #56]	; 0x38
    hpcd->IN_ep[index].xfer_buff = 0U;
 80009fa:	63d0      	str	r0, [r2, #60]	; 0x3c
    hpcd->IN_ep[index].xfer_len = 0U;
 80009fc:	6410      	str	r0, [r2, #64]	; 0x40
 80009fe:	f102 0220 	add.w	r2, r2, #32
  for (index = 0U; index < 15U ; index++)
 8000a02:	d1f0      	bne.n	80009e6 <HAL_PCD_Init+0x5c>
 8000a04:	2200      	movs	r2, #0
  }
 
  for (index = 0U; index < 15U ; index++)
  {
    hpcd->OUT_ep[index].is_in = 0U;
 8000a06:	4617      	mov	r7, r2
    hpcd->OUT_ep[index].num = index;
 8000a08:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
    hpcd->IN_ep[index].tx_fifo_num = index;
 8000a0c:	869a      	strh	r2, [r3, #52]	; 0x34
  for (index = 0U; index < 15U ; index++)
 8000a0e:	3201      	adds	r2, #1
 8000a10:	2a0f      	cmp	r2, #15
    hpcd->OUT_ep[index].is_in = 0U;
 8000a12:	f883 7229 	strb.w	r7, [r3, #553]	; 0x229
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 8000a16:	f883 722b 	strb.w	r7, [r3, #555]	; 0x22b
    hpcd->OUT_ep[index].maxpacket = 0U;
 8000a1a:	f8c3 7238 	str.w	r7, [r3, #568]	; 0x238
    hpcd->OUT_ep[index].xfer_buff = 0U;
 8000a1e:	f8c3 723c 	str.w	r7, [r3, #572]	; 0x23c
    hpcd->OUT_ep[index].xfer_len = 0U;
 8000a22:	f8c3 7240 	str.w	r7, [r3, #576]	; 0x240
 8000a26:	f103 0320 	add.w	r3, r3, #32
  for (index = 0U; index < 15U ; index++)
 8000a2a:	d1ed      	bne.n	8000a08 <HAL_PCD_Init+0x7e>
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 8000a2c:	466e      	mov	r6, sp
 8000a2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a30:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000a32:	682b      	ldr	r3, [r5, #0]
 8000a34:	6033      	str	r3, [r6, #0]
 8000a36:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000a3a:	6820      	ldr	r0, [r4, #0]
 8000a3c:	f000 ff16 	bl	800186c <USB_DevInit>
  
  hpcd->USB_Address = 0U;
  hpcd->State= HAL_PCD_STATE_READY;
 8000a40:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8000a42:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
  
  USB_DevDisconnect (hpcd->Instance);  
 8000a46:	6820      	ldr	r0, [r4, #0]
  hpcd->State= HAL_PCD_STATE_READY;
 8000a48:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  USB_DevDisconnect (hpcd->Instance);  
 8000a4c:	f001 f9e6 	bl	8001e1c <USB_DevDisconnect>
  return HAL_OK;
 8000a50:	2000      	movs	r0, #0
}
 8000a52:	b006      	add	sp, #24
 8000a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8000a58:	2001      	movs	r0, #1
 8000a5a:	e7fa      	b.n	8000a52 <HAL_PCD_Init+0xc8>

08000a5c <HAL_PCD_Start>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8000a5c:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 8000a60:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8000a62:	2b01      	cmp	r3, #1
{
 8000a64:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000a66:	d00e      	beq.n	8000a86 <HAL_PCD_Start+0x2a>
 8000a68:	2101      	movs	r1, #1
 8000a6a:	f880 1428 	strb.w	r1, [r0, #1064]	; 0x428
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 8000a6e:	f002 fa64 	bl	8002f3a <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 8000a72:	6820      	ldr	r0, [r4, #0]
 8000a74:	f001 f9d0 	bl	8001e18 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000a78:	6820      	ldr	r0, [r4, #0]
 8000a7a:	f000 fee2 	bl	8001842 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000a7e:	2000      	movs	r0, #0
 8000a80:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 8000a84:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000a86:	2002      	movs	r0, #2
}
 8000a88:	bd10      	pop	{r4, pc}

08000a8a <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8000a8a:	f890 2428 	ldrb.w	r2, [r0, #1064]	; 0x428
{
 8000a8e:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8000a90:	2a01      	cmp	r2, #1
{
 8000a92:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000a94:	d00b      	beq.n	8000aae <HAL_PCD_SetAddress+0x24>
 8000a96:	2201      	movs	r2, #1
 8000a98:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  hpcd->USB_Address = address;
 8000a9c:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  USB_SetDevAddress(hpcd->Instance, address);
 8000aa0:	6800      	ldr	r0, [r0, #0]
 8000aa2:	f001 f9b3 	bl	8001e0c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
 8000aac:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000aae:	2002      	movs	r0, #2
  return HAL_OK;
}
 8000ab0:	bd10      	pop	{r4, pc}

08000ab2 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8000ab2:	b538      	push	{r3, r4, r5, lr}
 8000ab4:	4604      	mov	r4, r0
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8000ab6:	b248      	sxtb	r0, r1
 8000ab8:	2800      	cmp	r0, #0
 8000aba:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000abe:	bfb5      	itete	lt
 8000ac0:	eb04 1145 	addlt.w	r1, r4, r5, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000ac4:	eb04 1141 	addge.w	r1, r4, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000ac8:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000aca:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000ace:	0fc0      	lsrs	r0, r0, #31
  ep->num   = ep_addr & 0x7FU;
 8000ad0:	700d      	strb	r5, [r1, #0]
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000ad2:	7048      	strb	r0, [r1, #1]
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
 8000ad4:	70cb      	strb	r3, [r1, #3]
    
  __HAL_LOCK(hpcd);
 8000ad6:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
  ep->maxpacket = ep_mps;
 8000ada:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d009      	beq.n	8000af4 <HAL_PCD_EP_Open+0x42>
 8000ae0:	2301      	movs	r3, #1
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8000ae2:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8000ae4:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8000ae8:	f000 fedc 	bl	80018a4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000aec:	2000      	movs	r0, #0
 8000aee:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return ret;
 8000af2:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8000af4:	2002      	movs	r0, #2
}
 8000af6:	bd38      	pop	{r3, r4, r5, pc}

08000af8 <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8000af8:	b24b      	sxtb	r3, r1
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	f001 027f 	and.w	r2, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000b00:	bfb5      	itete	lt
 8000b02:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000b06:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000b0a:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000b0c:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000b10:	0fdb      	lsrs	r3, r3, #31
{  
 8000b12:	b510      	push	{r4, lr}
  ep->num   = ep_addr & 0x7FU;
 8000b14:	700a      	strb	r2, [r1, #0]
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000b16:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd);
 8000b18:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{  
 8000b1c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d009      	beq.n	8000b36 <HAL_PCD_EP_Close+0x3e>
 8000b22:	2301      	movs	r3, #1
 8000b24:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8000b28:	6800      	ldr	r0, [r0, #0]
 8000b2a:	f001 f82d 	bl	8001b88 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000b2e:	2000      	movs	r0, #0
 8000b30:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 8000b34:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000b36:	2002      	movs	r0, #2
}
 8000b38:	bd10      	pop	{r4, pc}

08000b3a <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000b3a:	b570      	push	{r4, r5, r6, lr}
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 8000b3c:	2600      	movs	r6, #0
 8000b3e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8000b42:	014d      	lsls	r5, r1, #5
  ep->xfer_buff = pBuf;  
 8000b44:	1944      	adds	r4, r0, r5
  ep->is_in = 0U;
  ep->num = ep_addr & 0x7FU;
 8000b46:	f884 1228 	strb.w	r1, [r4, #552]	; 0x228
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000b4a:	f505 710a 	add.w	r1, r5, #552	; 0x228
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8000b4e:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;  
 8000b50:	f8c4 223c 	str.w	r2, [r4, #572]	; 0x23c
  ep->xfer_len = len;
 8000b54:	f8c4 3240 	str.w	r3, [r4, #576]	; 0x240
  ep->xfer_count = 0U;
 8000b58:	f8c4 6244 	str.w	r6, [r4, #580]	; 0x244
  ep->is_in = 0U;
 8000b5c:	f884 6229 	strb.w	r6, [r4, #553]	; 0x229
    USB_EPStartXfer(hpcd->Instance , ep);
 8000b60:	6800      	ldr	r0, [r0, #0]
 8000b62:	f001 f975 	bl	8001e50 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8000b66:	4630      	mov	r0, r6
 8000b68:	bd70      	pop	{r4, r5, r6, pc}

08000b6a <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000b6a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8000b6e:	b570      	push	{r4, r5, r6, lr}
 8000b70:	014d      	lsls	r5, r1, #5
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8000b72:	1944      	adds	r4, r0, r5
  ep->xfer_len = len;
 8000b74:	6423      	str	r3, [r4, #64]	; 0x40
  ep->xfer_count = 0U;
 8000b76:	2600      	movs	r6, #0
  ep->is_in = 1U;
 8000b78:	2301      	movs	r3, #1
  ep->num = ep_addr & 0x7FU;
 8000b7a:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000b7e:	f105 0128 	add.w	r1, r5, #40	; 0x28
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8000b82:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;  
 8000b84:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 8000b86:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 8000b88:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    USB_EPStartXfer(hpcd->Instance , ep);
 8000b8c:	6800      	ldr	r0, [r0, #0]
 8000b8e:	f001 f95f 	bl	8001e50 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8000b92:	4630      	mov	r0, r6
 8000b94:	bd70      	pop	{r4, r5, r6, pc}
	...

08000b98 <HAL_PCD_IRQHandler>:
{ 
 8000b98:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8000b9c:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8000b9e:	6800      	ldr	r0, [r0, #0]
 8000ba0:	f001 f93e 	bl	8001e20 <USB_ReadInterrupts>
 8000ba4:	0400      	lsls	r0, r0, #16
 8000ba6:	f100 8098 	bmi.w	8000cda <HAL_PCD_IRQHandler+0x142>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8000baa:	6820      	ldr	r0, [r4, #0]
 8000bac:	f001 f938 	bl	8001e20 <USB_ReadInterrupts>
 8000bb0:	0541      	lsls	r1, r0, #21
 8000bb2:	d50f      	bpl.n	8000bd4 <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000bb4:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8000bb6:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000bb8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000bbc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000bc0:	041b      	lsls	r3, r3, #16
 8000bc2:	0c1b      	lsrs	r3, r3, #16
 8000bc4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8000bc8:	f002 f8d1 	bl	8002d6e <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4620      	mov	r0, r4
 8000bd0:	f7ff ff5b 	bl	8000a8a <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 8000bd4:	6820      	ldr	r0, [r4, #0]
 8000bd6:	f001 f923 	bl	8001e20 <USB_ReadInterrupts>
 8000bda:	0447      	lsls	r7, r0, #17
 8000bdc:	d508      	bpl.n	8000bf0 <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 8000bde:	6822      	ldr	r2, [r4, #0]
 8000be0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000be4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000be8:	041b      	lsls	r3, r3, #16
 8000bea:	0c1b      	lsrs	r3, r3, #16
 8000bec:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8000bf0:	6820      	ldr	r0, [r4, #0]
 8000bf2:	f001 f915 	bl	8001e20 <USB_ReadInterrupts>
 8000bf6:	0486      	lsls	r6, r0, #18
 8000bf8:	d508      	bpl.n	8000c0c <HAL_PCD_IRQHandler+0x74>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8000bfa:	6822      	ldr	r2, [r4, #0]
 8000bfc:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000c00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000c04:	041b      	lsls	r3, r3, #16
 8000c06:	0c1b      	lsrs	r3, r3, #16
 8000c08:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8000c0c:	6820      	ldr	r0, [r4, #0]
 8000c0e:	f001 f907 	bl	8001e20 <USB_ReadInterrupts>
 8000c12:	04c5      	lsls	r5, r0, #19
 8000c14:	d51c      	bpl.n	8000c50 <HAL_PCD_IRQHandler+0xb8>
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8000c16:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8000c18:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8000c1a:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000c1e:	f023 0304 	bic.w	r3, r3, #4
 8000c22:	041b      	lsls	r3, r3, #16
 8000c24:	0c1b      	lsrs	r3, r3, #16
 8000c26:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_FSUSP);
 8000c2a:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000c2e:	f023 0308 	bic.w	r3, r3, #8
 8000c32:	041b      	lsls	r3, r3, #16
 8000c34:	0c1b      	lsrs	r3, r3, #16
 8000c36:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8000c3a:	f002 f8b5 	bl	8002da8 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8000c3e:	6822      	ldr	r2, [r4, #0]
 8000c40:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000c44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000c48:	041b      	lsls	r3, r3, #16
 8000c4a:	0c1b      	lsrs	r3, r3, #16
 8000c4c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8000c50:	6820      	ldr	r0, [r4, #0]
 8000c52:	f001 f8e5 	bl	8001e20 <USB_ReadInterrupts>
 8000c56:	0500      	lsls	r0, r0, #20
 8000c58:	d51d      	bpl.n	8000c96 <HAL_PCD_IRQHandler+0xfe>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000c5a:	6820      	ldr	r0, [r4, #0]
 8000c5c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8000c60:	b29b      	uxth	r3, r3
 8000c62:	f043 0308 	orr.w	r3, r3, #8
 8000c66:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 8000c6a:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000c6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000c72:	041b      	lsls	r3, r3, #16
 8000c74:	0c1b      	lsrs	r3, r3, #16
 8000c76:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8000c7a:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8000c7e:	b29b      	uxth	r3, r3
 8000c80:	f043 0304 	orr.w	r3, r3, #4
 8000c84:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0U)
 8000c88:	f001 f8ca 	bl	8001e20 <USB_ReadInterrupts>
 8000c8c:	04c1      	lsls	r1, r0, #19
 8000c8e:	d402      	bmi.n	8000c96 <HAL_PCD_IRQHandler+0xfe>
      HAL_PCD_SuspendCallback(hpcd);
 8000c90:	4620      	mov	r0, r4
 8000c92:	f002 f879 	bl	8002d88 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8000c96:	6820      	ldr	r0, [r4, #0]
 8000c98:	f001 f8c2 	bl	8001e20 <USB_ReadInterrupts>
 8000c9c:	0582      	lsls	r2, r0, #22
 8000c9e:	d50b      	bpl.n	8000cb8 <HAL_PCD_IRQHandler+0x120>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8000ca0:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8000ca2:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8000ca4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000ca8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000cac:	041b      	lsls	r3, r3, #16
 8000cae:	0c1b      	lsrs	r3, r3, #16
 8000cb0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8000cb4:	f002 f857 	bl	8002d66 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8000cb8:	6820      	ldr	r0, [r4, #0]
 8000cba:	f001 f8b1 	bl	8001e20 <USB_ReadInterrupts>
 8000cbe:	05c3      	lsls	r3, r0, #23
 8000cc0:	d508      	bpl.n	8000cd4 <HAL_PCD_IRQHandler+0x13c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 8000cc2:	6822      	ldr	r2, [r4, #0]
 8000cc4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000cc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ccc:	041b      	lsls	r3, r3, #16
 8000cce:	0c1b      	lsrs	r3, r3, #16
 8000cd0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8000cd4:	b002      	add	sp, #8
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
  PCD_EPTypeDef *ep = NULL;
  uint16_t count = 0;
  uint8_t epindex = 0;
  __IO uint16_t wIstr = 0;  
 8000cda:	2300      	movs	r3, #0
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000cdc:	4fc8      	ldr	r7, [pc, #800]	; (8001000 <HAL_PCD_IRQHandler+0x468>)
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000cde:	f8df 8324 	ldr.w	r8, [pc, #804]	; 8001004 <HAL_PCD_IRQHandler+0x46c>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000ce2:	f8df 9324 	ldr.w	r9, [pc, #804]	; 8001008 <HAL_PCD_IRQHandler+0x470>
  __IO uint16_t wIstr = 0;  
 8000ce6:	f8ad 3004 	strh.w	r3, [sp, #4]
  __IO uint16_t wEPVal = 0;
 8000cea:	f8ad 3006 	strh.w	r3, [sp, #6]
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8000cee:	6820      	ldr	r0, [r4, #0]
 8000cf0:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	f8ad 3004 	strh.w	r3, [sp, #4]
 8000cfa:	041b      	lsls	r3, r3, #16
 8000cfc:	f57f af55 	bpl.w	8000baa <HAL_PCD_IRQHandler+0x12>
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8000d00:	f8bd 5004 	ldrh.w	r5, [sp, #4]
    if (epindex == 0)
 8000d04:	f015 050f 	ands.w	r5, r5, #15
 8000d08:	f040 80ab 	bne.w	8000e62 <HAL_PCD_IRQHandler+0x2ca>
      if ((wIstr & USB_ISTR_DIR) == 0)
 8000d0c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000d10:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0)
 8000d12:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000d16:	b29b      	uxth	r3, r3
      if ((wIstr & USB_ISTR_DIR) == 0)
 8000d18:	d126      	bne.n	8000d68 <HAL_PCD_IRQHandler+0x1d0>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000d1a:	403b      	ands	r3, r7
 8000d1c:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000d1e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000d22:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8000d26:	b29b      	uxth	r3, r3
 8000d28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000d2c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8000d30:	f8d0 3404 	ldr.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8000d34:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000d36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000d3a:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8000d3c:	4413      	add	r3, r2
 8000d3e:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000d40:	4620      	mov	r0, r4
 8000d42:	f002 f809 	bl	8002d58 <HAL_PCD_DataInStageCallback>
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 8000d46:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d0cf      	beq.n	8000cee <HAL_PCD_IRQHandler+0x156>
 8000d4e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000d50:	2a00      	cmp	r2, #0
 8000d52:	d1cc      	bne.n	8000cee <HAL_PCD_IRQHandler+0x156>
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8000d54:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000d58:	6821      	ldr	r1, [r4, #0]
 8000d5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d5e:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8000d62:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8000d66:	e7c2      	b.n	8000cee <HAL_PCD_IRQHandler+0x156>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000d68:	f8ad 3006 	strh.w	r3, [sp, #6]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000d6c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000d70:	051a      	lsls	r2, r3, #20
 8000d72:	d51f      	bpl.n	8000db4 <HAL_PCD_IRQHandler+0x21c>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000d74:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000d78:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8000d7c:	b29b      	uxth	r3, r3
 8000d7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000d82:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000d86:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8000d8a:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000d8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000d92:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8000d96:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 8000d9a:	f001 f959 	bl	8002050 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8000d9e:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000da0:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8000da2:	8813      	ldrh	r3, [r2, #0]
 8000da4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000da8:	051b      	lsls	r3, r3, #20
 8000daa:	0d1b      	lsrs	r3, r3, #20
 8000dac:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000dae:	f001 ffc5 	bl	8002d3c <HAL_PCD_SetupStageCallback>
 8000db2:	e79c      	b.n	8000cee <HAL_PCD_IRQHandler+0x156>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000db4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000db8:	041b      	lsls	r3, r3, #16
 8000dba:	d598      	bpl.n	8000cee <HAL_PCD_IRQHandler+0x156>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000dbc:	8803      	ldrh	r3, [r0, #0]
 8000dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000dc2:	051b      	lsls	r3, r3, #20
 8000dc4:	0d1b      	lsrs	r3, r3, #20
 8000dc6:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000dc8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000dcc:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8000dd0:	b29b      	uxth	r3, r3
 8000dd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000dd6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000dda:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8000dde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000de2:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          if (ep->xfer_count != 0U)
 8000de6:	b163      	cbz	r3, 8000e02 <HAL_PCD_IRQHandler+0x26a>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8000de8:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
 8000dec:	f8d4 123c 	ldr.w	r1, [r4, #572]	; 0x23c
 8000df0:	f001 f92e 	bl	8002050 <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8000df4:	f8d4 323c 	ldr.w	r3, [r4, #572]	; 0x23c
 8000df8:	f8d4 2244 	ldr.w	r2, [r4, #580]	; 0x244
 8000dfc:	4413      	add	r3, r2
 8000dfe:	f8c4 323c 	str.w	r3, [r4, #572]	; 0x23c
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000e02:	2100      	movs	r1, #0
 8000e04:	4620      	mov	r0, r4
 8000e06:	f001 ff9f 	bl	8002d48 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000e0a:	6822      	ldr	r2, [r4, #0]
 8000e0c:	f8d4 5238 	ldr.w	r5, [r4, #568]	; 0x238
 8000e10:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8000e14:	2d3e      	cmp	r5, #62	; 0x3e
 8000e16:	b289      	uxth	r1, r1
 8000e18:	f101 0106 	add.w	r1, r1, #6
 8000e1c:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 8000e20:	d917      	bls.n	8000e52 <HAL_PCD_IRQHandler+0x2ba>
 8000e22:	f3c5 134f 	ubfx	r3, r5, #5, #16
 8000e26:	06ee      	lsls	r6, r5, #27
 8000e28:	bf04      	itt	eq
 8000e2a:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
 8000e2e:	b29b      	uxtheq	r3, r3
 8000e30:	ea49 2383 	orr.w	r3, r9, r3, lsl #10
 8000e34:	b29b      	uxth	r3, r3
 8000e36:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000e3a:	8813      	ldrh	r3, [r2, #0]
 8000e3c:	b29b      	uxth	r3, r3
 8000e3e:	ea03 0308 	and.w	r3, r3, r8
 8000e42:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8000e46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e4e:	8013      	strh	r3, [r2, #0]
 8000e50:	e74d      	b.n	8000cee <HAL_PCD_IRQHandler+0x156>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000e52:	f3c5 034f 	ubfx	r3, r5, #1, #16
 8000e56:	07ed      	lsls	r5, r5, #31
 8000e58:	bf44      	itt	mi
 8000e5a:	3301      	addmi	r3, #1
 8000e5c:	b29b      	uxthmi	r3, r3
 8000e5e:	029b      	lsls	r3, r3, #10
 8000e60:	e7e8      	b.n	8000e34 <HAL_PCD_IRQHandler+0x29c>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8000e62:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	f8ad 3006 	strh.w	r3, [sp, #6]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000e6c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000e70:	0419      	lsls	r1, r3, #16
 8000e72:	d53f      	bpl.n	8000ef4 <HAL_PCD_IRQHandler+0x35c>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000e74:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000e78:	ea4f 1a45 	mov.w	sl, r5, lsl #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000e7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000e80:	051b      	lsls	r3, r3, #20
 8000e82:	0d1b      	lsrs	r3, r3, #20
 8000e84:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000e88:	eb04 010a 	add.w	r1, r4, sl
 8000e8c:	f891 3232 	ldrb.w	r3, [r1, #562]	; 0x232
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d174      	bne.n	8000f7e <HAL_PCD_IRQHandler+0x3e6>
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000e94:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000e98:	f891 2228 	ldrb.w	r2, [r1, #552]	; 0x228
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	3306      	adds	r3, #6
 8000ea0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000ea4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000ea8:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 8000eac:	f3c6 0609 	ubfx	r6, r6, #0, #10
          if (count != 0U)
 8000eb0:	b136      	cbz	r6, 8000ec0 <HAL_PCD_IRQHandler+0x328>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8000eb2:	f8b1 222c 	ldrh.w	r2, [r1, #556]	; 0x22c
 8000eb6:	4633      	mov	r3, r6
 8000eb8:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 8000ebc:	f001 f8c8 	bl	8002050 <USB_ReadPMA>
 8000ec0:	eb04 010a 	add.w	r1, r4, sl
        ep->xfer_count+=count;
 8000ec4:	f8d1 3244 	ldr.w	r3, [r1, #580]	; 0x244
        ep->xfer_buff+=count;
 8000ec8:	f8d1 223c 	ldr.w	r2, [r1, #572]	; 0x23c
        ep->xfer_count+=count;
 8000ecc:	4433      	add	r3, r6
 8000ece:	f8c1 3244 	str.w	r3, [r1, #580]	; 0x244
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8000ed2:	f8d1 3240 	ldr.w	r3, [r1, #576]	; 0x240
        ep->xfer_buff+=count;
 8000ed6:	4432      	add	r2, r6
 8000ed8:	f8c1 223c 	str.w	r2, [r1, #572]	; 0x23c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8000edc:	b123      	cbz	r3, 8000ee8 <HAL_PCD_IRQHandler+0x350>
 8000ede:	f8d1 0238 	ldr.w	r0, [r1, #568]	; 0x238
 8000ee2:	4286      	cmp	r6, r0
 8000ee4:	f080 8086 	bcs.w	8000ff4 <HAL_PCD_IRQHandler+0x45c>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8000ee8:	44a2      	add	sl, r4
 8000eea:	f89a 1228 	ldrb.w	r1, [sl, #552]	; 0x228
 8000eee:	4620      	mov	r0, r4
 8000ef0:	f001 ff2a 	bl	8002d48 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8000ef4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000ef8:	061a      	lsls	r2, r3, #24
 8000efa:	f57f aef8 	bpl.w	8000cee <HAL_PCD_IRQHandler+0x156>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000efe:	6820      	ldr	r0, [r4, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 8000f00:	016e      	lsls	r6, r5, #5
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000f02:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000f06:	19a1      	adds	r1, r4, r6
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	403b      	ands	r3, r7
 8000f0c:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000f10:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8000f14:	3502      	adds	r5, #2
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d178      	bne.n	800100c <HAL_PCD_IRQHandler+0x474>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000f1a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000f1e:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	3302      	adds	r3, #2
 8000f26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000f2a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000f2e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000f32:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8000f36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000f3a:	606b      	str	r3, [r5, #4]
          if (ep->xfer_count != 0U)
 8000f3c:	b11b      	cbz	r3, 8000f46 <HAL_PCD_IRQHandler+0x3ae>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8000f3e:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 8000f40:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8000f42:	f000 ff73 	bl	8001e2c <USB_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000f46:	6822      	ldr	r2, [r4, #0]
 8000f48:	4426      	add	r6, r4
 8000f4a:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8000f4e:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8000f52:	b29b      	uxth	r3, r3
 8000f54:	3302      	adds	r3, #2
 8000f56:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8000f5a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000f5e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        ep->xfer_buff+=ep->xfer_count;
 8000f62:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000f64:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000f68:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff+=ep->xfer_count;
 8000f6a:	441a      	add	r2, r3
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8000f6c:	6c33      	ldr	r3, [r6, #64]	; 0x40
        ep->xfer_buff+=ep->xfer_count;
 8000f6e:	63f2      	str	r2, [r6, #60]	; 0x3c
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000f70:	4620      	mov	r0, r4
        if (ep->xfer_len == 0U)
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	f040 8085 	bne.w	8001082 <HAL_PCD_IRQHandler+0x4ea>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000f78:	f001 feee 	bl	8002d58 <HAL_PCD_DataInStageCallback>
 8000f7c:	e6b7      	b.n	8000cee <HAL_PCD_IRQHandler+0x156>
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8000f7e:	f891 3228 	ldrb.w	r3, [r1, #552]	; 0x228
 8000f82:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8000f86:	00db      	lsls	r3, r3, #3
 8000f88:	f412 4f80 	tst.w	r2, #16384	; 0x4000
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000f8c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8000f90:	b292      	uxth	r2, r2
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8000f92:	d021      	beq.n	8000fd8 <HAL_PCD_IRQHandler+0x440>
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000f94:	3202      	adds	r2, #2
 8000f96:	4413      	add	r3, r2
 8000f98:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000f9c:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 8000fa0:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 8000fa4:	b136      	cbz	r6, 8000fb4 <HAL_PCD_IRQHandler+0x41c>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8000fa6:	4633      	mov	r3, r6
 8000fa8:	f8b1 222e 	ldrh.w	r2, [r1, #558]	; 0x22e
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000fac:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 8000fb0:	f001 f84e 	bl	8002050 <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 8000fb4:	eb04 030a 	add.w	r3, r4, sl
 8000fb8:	f893 1228 	ldrb.w	r1, [r3, #552]	; 0x228
 8000fbc:	6822      	ldr	r2, [r4, #0]
 8000fbe:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000fc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000fc6:	051b      	lsls	r3, r3, #20
 8000fc8:	0d1b      	lsrs	r3, r3, #20
 8000fca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000fd2:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8000fd6:	e773      	b.n	8000ec0 <HAL_PCD_IRQHandler+0x328>
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000fd8:	3206      	adds	r2, #6
 8000fda:	4413      	add	r3, r2
 8000fdc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000fe0:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 8000fe4:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 8000fe8:	2e00      	cmp	r6, #0
 8000fea:	d0e3      	beq.n	8000fb4 <HAL_PCD_IRQHandler+0x41c>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000fec:	4633      	mov	r3, r6
 8000fee:	f8b1 2230 	ldrh.w	r2, [r1, #560]	; 0x230
 8000ff2:	e7db      	b.n	8000fac <HAL_PCD_IRQHandler+0x414>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8000ff4:	f891 1228 	ldrb.w	r1, [r1, #552]	; 0x228
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	f7ff fd9e 	bl	8000b3a <HAL_PCD_EP_Receive>
 8000ffe:	e779      	b.n	8000ef4 <HAL_PCD_IRQHandler+0x35c>
 8001000:	ffff8f0f 	.word	0xffff8f0f
 8001004:	ffffbf8f 	.word	0xffffbf8f
 8001008:	ffff8000 	.word	0xffff8000
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 800100c:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8001010:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001014:	00db      	lsls	r3, r3, #3
 8001016:	f012 0f40 	tst.w	r2, #64	; 0x40
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800101a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800101e:	b292      	uxth	r2, r2
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8001020:	d020      	beq.n	8001064 <HAL_PCD_IRQHandler+0x4cc>
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001022:	3202      	adds	r2, #2
 8001024:	4413      	add	r3, r2
 8001026:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800102a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800102e:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8001032:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001036:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0U)
 8001038:	b11b      	cbz	r3, 8001042 <HAL_PCD_IRQHandler+0x4aa>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 800103a:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 800103c:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800103e:	f000 fef5 	bl	8001e2c <USB_WritePMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 8001042:	19a3      	adds	r3, r4, r6
 8001044:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8001048:	6822      	ldr	r2, [r4, #0]
 800104a:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800104e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001052:	051b      	lsls	r3, r3, #20
 8001054:	0d1b      	lsrs	r3, r3, #20
 8001056:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800105a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800105e:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8001062:	e770      	b.n	8000f46 <HAL_PCD_IRQHandler+0x3ae>
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001064:	3206      	adds	r2, #6
 8001066:	4413      	add	r3, r2
 8001068:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800106c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001070:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8001074:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001078:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0U)
 800107a:	2b00      	cmp	r3, #0
 800107c:	d0e1      	beq.n	8001042 <HAL_PCD_IRQHandler+0x4aa>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 800107e:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 8001080:	e7dc      	b.n	800103c <HAL_PCD_IRQHandler+0x4a4>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001082:	f7ff fd72 	bl	8000b6a <HAL_PCD_EP_Transmit>
 8001086:	e632      	b.n	8000cee <HAL_PCD_IRQHandler+0x156>

08001088 <HAL_PCD_EP_SetStall>:
  ep->is_stall = 1U;
 8001088:	2201      	movs	r2, #1
{
 800108a:	b538      	push	{r3, r4, r5, lr}
  if ((0x80U & ep_addr) == 0x80U)
 800108c:	b24b      	sxtb	r3, r1
 800108e:	2b00      	cmp	r3, #0
 8001090:	f001 057f 	and.w	r5, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001094:	bfb5      	itete	lt
 8001096:	eb00 1145 	addlt.w	r1, r0, r5, lsl #5
    ep = &hpcd->OUT_ep[ep_addr];
 800109a:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800109e:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 80010a0:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 80010a4:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7FU;
 80010a6:	b2ed      	uxtb	r5, r5
  ep->is_stall = 1U;
 80010a8:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7FU;
 80010aa:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 80010ac:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd);
 80010ae:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 80010b2:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d00e      	beq.n	80010d6 <HAL_PCD_EP_SetStall+0x4e>
 80010b8:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  USB_EPSetStall(hpcd->Instance , ep);
 80010bc:	6800      	ldr	r0, [r0, #0]
 80010be:	f000 fe31 	bl	8001d24 <USB_EPSetStall>
  if((ep_addr & 0x7FU) == 0U)
 80010c2:	b925      	cbnz	r5, 80010ce <HAL_PCD_EP_SetStall+0x46>
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80010c4:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 80010c8:	6820      	ldr	r0, [r4, #0]
 80010ca:	f000 fead 	bl	8001e28 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd); 
 80010ce:	2000      	movs	r0, #0
 80010d0:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 80010d4:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80010d6:	2002      	movs	r0, #2
}
 80010d8:	bd38      	pop	{r3, r4, r5, pc}

080010da <HAL_PCD_EP_ClrStall>:
{
 80010da:	b538      	push	{r3, r4, r5, lr}
  ep->is_stall = 0U;
 80010dc:	2400      	movs	r4, #0
  if ((0x80U & ep_addr) == 0x80U)
 80010de:	b24b      	sxtb	r3, r1
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	f001 027f 	and.w	r2, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80010e6:	bfb5      	itete	lt
 80010e8:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
    ep = &hpcd->OUT_ep[ep_addr];
 80010ec:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80010f0:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 80010f2:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 80010f6:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0U;
 80010f8:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7FU;
 80010fa:	700a      	strb	r2, [r1, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 80010fc:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 80010fe:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 8001102:	4605      	mov	r5, r0
  __HAL_LOCK(hpcd); 
 8001104:	2b01      	cmp	r3, #1
 8001106:	d009      	beq.n	800111c <HAL_PCD_EP_ClrStall+0x42>
 8001108:	2301      	movs	r3, #1
 800110a:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  USB_EPClearStall(hpcd->Instance , ep);
 800110e:	6800      	ldr	r0, [r0, #0]
 8001110:	f000 fe3a 	bl	8001d88 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8001114:	f885 4428 	strb.w	r4, [r5, #1064]	; 0x428
  return HAL_OK;
 8001118:	4620      	mov	r0, r4
 800111a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 800111c:	2002      	movs	r0, #2
}
 800111e:	bd38      	pop	{r3, r4, r5, pc}

08001120 <HAL_PCDEx_PMAConfig>:

{
  PCD_EPTypeDef *ep = NULL;
  
  /* initialize ep structure*/
  if ((ep_addr & 0x80U) == 0x80U)
 8001120:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001124:	bf1b      	ittet	ne
 8001126:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 800112a:	eb00 1041 	addne.w	r0, r0, r1, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800112e:	eb00 1041 	addeq.w	r0, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001132:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8001134:	bf08      	it	eq
 8001136:	f500 700a 	addeq.w	r0, r0, #552	; 0x228
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800113a:	b91a      	cbnz	r2, 8001144 <HAL_PCDEx_PMAConfig+0x24>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0U;
 800113c:	7282      	strb	r2, [r0, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 800113e:	8083      	strh	r3, [r0, #4]
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
  }
  
  return HAL_OK; 
}
 8001140:	2000      	movs	r0, #0
 8001142:	4770      	bx	lr
    ep->doublebuffer = 1U;
 8001144:	2201      	movs	r2, #1
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
 8001146:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8001148:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 800114a:	7282      	strb	r2, [r0, #10]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 800114c:	8103      	strh	r3, [r0, #8]
 800114e:	e7f7      	b.n	8001140 <HAL_PCDEx_PMAConfig+0x20>

08001150 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001150:	6803      	ldr	r3, [r0, #0]
{
 8001152:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001156:	07db      	lsls	r3, r3, #31
{
 8001158:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800115a:	d410      	bmi.n	800117e <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800115c:	682b      	ldr	r3, [r5, #0]
 800115e:	079f      	lsls	r7, r3, #30
 8001160:	d45e      	bmi.n	8001220 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001162:	682b      	ldr	r3, [r5, #0]
 8001164:	0719      	lsls	r1, r3, #28
 8001166:	f100 8095 	bmi.w	8001294 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800116a:	682b      	ldr	r3, [r5, #0]
 800116c:	075a      	lsls	r2, r3, #29
 800116e:	f100 80bf 	bmi.w	80012f0 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001172:	69ea      	ldr	r2, [r5, #28]
 8001174:	2a00      	cmp	r2, #0
 8001176:	f040 812d 	bne.w	80013d4 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800117a:	2000      	movs	r0, #0
 800117c:	e014      	b.n	80011a8 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800117e:	4c90      	ldr	r4, [pc, #576]	; (80013c0 <HAL_RCC_OscConfig+0x270>)
 8001180:	6863      	ldr	r3, [r4, #4]
 8001182:	f003 030c 	and.w	r3, r3, #12
 8001186:	2b04      	cmp	r3, #4
 8001188:	d007      	beq.n	800119a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800118a:	6863      	ldr	r3, [r4, #4]
 800118c:	f003 030c 	and.w	r3, r3, #12
 8001190:	2b08      	cmp	r3, #8
 8001192:	d10c      	bne.n	80011ae <HAL_RCC_OscConfig+0x5e>
 8001194:	6863      	ldr	r3, [r4, #4]
 8001196:	03de      	lsls	r6, r3, #15
 8001198:	d509      	bpl.n	80011ae <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800119a:	6823      	ldr	r3, [r4, #0]
 800119c:	039c      	lsls	r4, r3, #14
 800119e:	d5dd      	bpl.n	800115c <HAL_RCC_OscConfig+0xc>
 80011a0:	686b      	ldr	r3, [r5, #4]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d1da      	bne.n	800115c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80011a6:	2001      	movs	r0, #1
}
 80011a8:	b002      	add	sp, #8
 80011aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011ae:	686b      	ldr	r3, [r5, #4]
 80011b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011b4:	d110      	bne.n	80011d8 <HAL_RCC_OscConfig+0x88>
 80011b6:	6823      	ldr	r3, [r4, #0]
 80011b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011bc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80011be:	f7fe fff3 	bl	80001a8 <HAL_GetTick>
 80011c2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011c4:	6823      	ldr	r3, [r4, #0]
 80011c6:	0398      	lsls	r0, r3, #14
 80011c8:	d4c8      	bmi.n	800115c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011ca:	f7fe ffed 	bl	80001a8 <HAL_GetTick>
 80011ce:	1b80      	subs	r0, r0, r6
 80011d0:	2864      	cmp	r0, #100	; 0x64
 80011d2:	d9f7      	bls.n	80011c4 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80011d4:	2003      	movs	r0, #3
 80011d6:	e7e7      	b.n	80011a8 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011d8:	b99b      	cbnz	r3, 8001202 <HAL_RCC_OscConfig+0xb2>
 80011da:	6823      	ldr	r3, [r4, #0]
 80011dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011e0:	6023      	str	r3, [r4, #0]
 80011e2:	6823      	ldr	r3, [r4, #0]
 80011e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011e8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80011ea:	f7fe ffdd 	bl	80001a8 <HAL_GetTick>
 80011ee:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011f0:	6823      	ldr	r3, [r4, #0]
 80011f2:	0399      	lsls	r1, r3, #14
 80011f4:	d5b2      	bpl.n	800115c <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011f6:	f7fe ffd7 	bl	80001a8 <HAL_GetTick>
 80011fa:	1b80      	subs	r0, r0, r6
 80011fc:	2864      	cmp	r0, #100	; 0x64
 80011fe:	d9f7      	bls.n	80011f0 <HAL_RCC_OscConfig+0xa0>
 8001200:	e7e8      	b.n	80011d4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001202:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001206:	6823      	ldr	r3, [r4, #0]
 8001208:	d103      	bne.n	8001212 <HAL_RCC_OscConfig+0xc2>
 800120a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800120e:	6023      	str	r3, [r4, #0]
 8001210:	e7d1      	b.n	80011b6 <HAL_RCC_OscConfig+0x66>
 8001212:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001216:	6023      	str	r3, [r4, #0]
 8001218:	6823      	ldr	r3, [r4, #0]
 800121a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800121e:	e7cd      	b.n	80011bc <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001220:	4c67      	ldr	r4, [pc, #412]	; (80013c0 <HAL_RCC_OscConfig+0x270>)
 8001222:	6863      	ldr	r3, [r4, #4]
 8001224:	f013 0f0c 	tst.w	r3, #12
 8001228:	d007      	beq.n	800123a <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800122a:	6863      	ldr	r3, [r4, #4]
 800122c:	f003 030c 	and.w	r3, r3, #12
 8001230:	2b08      	cmp	r3, #8
 8001232:	d110      	bne.n	8001256 <HAL_RCC_OscConfig+0x106>
 8001234:	6863      	ldr	r3, [r4, #4]
 8001236:	03da      	lsls	r2, r3, #15
 8001238:	d40d      	bmi.n	8001256 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800123a:	6823      	ldr	r3, [r4, #0]
 800123c:	079b      	lsls	r3, r3, #30
 800123e:	d502      	bpl.n	8001246 <HAL_RCC_OscConfig+0xf6>
 8001240:	692b      	ldr	r3, [r5, #16]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d1af      	bne.n	80011a6 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001246:	6823      	ldr	r3, [r4, #0]
 8001248:	696a      	ldr	r2, [r5, #20]
 800124a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800124e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001252:	6023      	str	r3, [r4, #0]
 8001254:	e785      	b.n	8001162 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001256:	692a      	ldr	r2, [r5, #16]
 8001258:	4b5a      	ldr	r3, [pc, #360]	; (80013c4 <HAL_RCC_OscConfig+0x274>)
 800125a:	b16a      	cbz	r2, 8001278 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 800125c:	2201      	movs	r2, #1
 800125e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001260:	f7fe ffa2 	bl	80001a8 <HAL_GetTick>
 8001264:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001266:	6823      	ldr	r3, [r4, #0]
 8001268:	079f      	lsls	r7, r3, #30
 800126a:	d4ec      	bmi.n	8001246 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800126c:	f7fe ff9c 	bl	80001a8 <HAL_GetTick>
 8001270:	1b80      	subs	r0, r0, r6
 8001272:	2802      	cmp	r0, #2
 8001274:	d9f7      	bls.n	8001266 <HAL_RCC_OscConfig+0x116>
 8001276:	e7ad      	b.n	80011d4 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8001278:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800127a:	f7fe ff95 	bl	80001a8 <HAL_GetTick>
 800127e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001280:	6823      	ldr	r3, [r4, #0]
 8001282:	0798      	lsls	r0, r3, #30
 8001284:	f57f af6d 	bpl.w	8001162 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001288:	f7fe ff8e 	bl	80001a8 <HAL_GetTick>
 800128c:	1b80      	subs	r0, r0, r6
 800128e:	2802      	cmp	r0, #2
 8001290:	d9f6      	bls.n	8001280 <HAL_RCC_OscConfig+0x130>
 8001292:	e79f      	b.n	80011d4 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001294:	69aa      	ldr	r2, [r5, #24]
 8001296:	4c4a      	ldr	r4, [pc, #296]	; (80013c0 <HAL_RCC_OscConfig+0x270>)
 8001298:	4b4b      	ldr	r3, [pc, #300]	; (80013c8 <HAL_RCC_OscConfig+0x278>)
 800129a:	b1da      	cbz	r2, 80012d4 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 800129c:	2201      	movs	r2, #1
 800129e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80012a0:	f7fe ff82 	bl	80001a8 <HAL_GetTick>
 80012a4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80012a8:	079b      	lsls	r3, r3, #30
 80012aa:	d50d      	bpl.n	80012c8 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80012ac:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80012b0:	4b46      	ldr	r3, [pc, #280]	; (80013cc <HAL_RCC_OscConfig+0x27c>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80012b8:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80012ba:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80012bc:	9b01      	ldr	r3, [sp, #4]
 80012be:	1e5a      	subs	r2, r3, #1
 80012c0:	9201      	str	r2, [sp, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d1f9      	bne.n	80012ba <HAL_RCC_OscConfig+0x16a>
 80012c6:	e750      	b.n	800116a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012c8:	f7fe ff6e 	bl	80001a8 <HAL_GetTick>
 80012cc:	1b80      	subs	r0, r0, r6
 80012ce:	2802      	cmp	r0, #2
 80012d0:	d9e9      	bls.n	80012a6 <HAL_RCC_OscConfig+0x156>
 80012d2:	e77f      	b.n	80011d4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80012d4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80012d6:	f7fe ff67 	bl	80001a8 <HAL_GetTick>
 80012da:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80012de:	079f      	lsls	r7, r3, #30
 80012e0:	f57f af43 	bpl.w	800116a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012e4:	f7fe ff60 	bl	80001a8 <HAL_GetTick>
 80012e8:	1b80      	subs	r0, r0, r6
 80012ea:	2802      	cmp	r0, #2
 80012ec:	d9f6      	bls.n	80012dc <HAL_RCC_OscConfig+0x18c>
 80012ee:	e771      	b.n	80011d4 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012f0:	4c33      	ldr	r4, [pc, #204]	; (80013c0 <HAL_RCC_OscConfig+0x270>)
 80012f2:	69e3      	ldr	r3, [r4, #28]
 80012f4:	00d8      	lsls	r0, r3, #3
 80012f6:	d424      	bmi.n	8001342 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 80012f8:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80012fa:	69e3      	ldr	r3, [r4, #28]
 80012fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001300:	61e3      	str	r3, [r4, #28]
 8001302:	69e3      	ldr	r3, [r4, #28]
 8001304:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001308:	9300      	str	r3, [sp, #0]
 800130a:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800130c:	4e30      	ldr	r6, [pc, #192]	; (80013d0 <HAL_RCC_OscConfig+0x280>)
 800130e:	6833      	ldr	r3, [r6, #0]
 8001310:	05d9      	lsls	r1, r3, #23
 8001312:	d518      	bpl.n	8001346 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001314:	68eb      	ldr	r3, [r5, #12]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d126      	bne.n	8001368 <HAL_RCC_OscConfig+0x218>
 800131a:	6a23      	ldr	r3, [r4, #32]
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001322:	f7fe ff41 	bl	80001a8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001326:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800132a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800132c:	6a23      	ldr	r3, [r4, #32]
 800132e:	079b      	lsls	r3, r3, #30
 8001330:	d53f      	bpl.n	80013b2 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8001332:	2f00      	cmp	r7, #0
 8001334:	f43f af1d 	beq.w	8001172 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001338:	69e3      	ldr	r3, [r4, #28]
 800133a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800133e:	61e3      	str	r3, [r4, #28]
 8001340:	e717      	b.n	8001172 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8001342:	2700      	movs	r7, #0
 8001344:	e7e2      	b.n	800130c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001346:	6833      	ldr	r3, [r6, #0]
 8001348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800134c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800134e:	f7fe ff2b 	bl	80001a8 <HAL_GetTick>
 8001352:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001354:	6833      	ldr	r3, [r6, #0]
 8001356:	05da      	lsls	r2, r3, #23
 8001358:	d4dc      	bmi.n	8001314 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800135a:	f7fe ff25 	bl	80001a8 <HAL_GetTick>
 800135e:	eba0 0008 	sub.w	r0, r0, r8
 8001362:	2864      	cmp	r0, #100	; 0x64
 8001364:	d9f6      	bls.n	8001354 <HAL_RCC_OscConfig+0x204>
 8001366:	e735      	b.n	80011d4 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001368:	b9ab      	cbnz	r3, 8001396 <HAL_RCC_OscConfig+0x246>
 800136a:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800136c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001370:	f023 0301 	bic.w	r3, r3, #1
 8001374:	6223      	str	r3, [r4, #32]
 8001376:	6a23      	ldr	r3, [r4, #32]
 8001378:	f023 0304 	bic.w	r3, r3, #4
 800137c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800137e:	f7fe ff13 	bl	80001a8 <HAL_GetTick>
 8001382:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001384:	6a23      	ldr	r3, [r4, #32]
 8001386:	0798      	lsls	r0, r3, #30
 8001388:	d5d3      	bpl.n	8001332 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800138a:	f7fe ff0d 	bl	80001a8 <HAL_GetTick>
 800138e:	1b80      	subs	r0, r0, r6
 8001390:	4540      	cmp	r0, r8
 8001392:	d9f7      	bls.n	8001384 <HAL_RCC_OscConfig+0x234>
 8001394:	e71e      	b.n	80011d4 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001396:	2b05      	cmp	r3, #5
 8001398:	6a23      	ldr	r3, [r4, #32]
 800139a:	d103      	bne.n	80013a4 <HAL_RCC_OscConfig+0x254>
 800139c:	f043 0304 	orr.w	r3, r3, #4
 80013a0:	6223      	str	r3, [r4, #32]
 80013a2:	e7ba      	b.n	800131a <HAL_RCC_OscConfig+0x1ca>
 80013a4:	f023 0301 	bic.w	r3, r3, #1
 80013a8:	6223      	str	r3, [r4, #32]
 80013aa:	6a23      	ldr	r3, [r4, #32]
 80013ac:	f023 0304 	bic.w	r3, r3, #4
 80013b0:	e7b6      	b.n	8001320 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013b2:	f7fe fef9 	bl	80001a8 <HAL_GetTick>
 80013b6:	eba0 0008 	sub.w	r0, r0, r8
 80013ba:	42b0      	cmp	r0, r6
 80013bc:	d9b6      	bls.n	800132c <HAL_RCC_OscConfig+0x1dc>
 80013be:	e709      	b.n	80011d4 <HAL_RCC_OscConfig+0x84>
 80013c0:	40021000 	.word	0x40021000
 80013c4:	42420000 	.word	0x42420000
 80013c8:	42420480 	.word	0x42420480
 80013cc:	20000080 	.word	0x20000080
 80013d0:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013d4:	4c22      	ldr	r4, [pc, #136]	; (8001460 <HAL_RCC_OscConfig+0x310>)
 80013d6:	6863      	ldr	r3, [r4, #4]
 80013d8:	f003 030c 	and.w	r3, r3, #12
 80013dc:	2b08      	cmp	r3, #8
 80013de:	f43f aee2 	beq.w	80011a6 <HAL_RCC_OscConfig+0x56>
 80013e2:	2300      	movs	r3, #0
 80013e4:	4e1f      	ldr	r6, [pc, #124]	; (8001464 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013e6:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80013e8:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013ea:	d12b      	bne.n	8001444 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80013ec:	f7fe fedc 	bl	80001a8 <HAL_GetTick>
 80013f0:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013f2:	6823      	ldr	r3, [r4, #0]
 80013f4:	0199      	lsls	r1, r3, #6
 80013f6:	d41f      	bmi.n	8001438 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80013f8:	6a2b      	ldr	r3, [r5, #32]
 80013fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013fe:	d105      	bne.n	800140c <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001400:	6862      	ldr	r2, [r4, #4]
 8001402:	68a9      	ldr	r1, [r5, #8]
 8001404:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001408:	430a      	orrs	r2, r1
 800140a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800140c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800140e:	6862      	ldr	r2, [r4, #4]
 8001410:	430b      	orrs	r3, r1
 8001412:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001416:	4313      	orrs	r3, r2
 8001418:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800141a:	2301      	movs	r3, #1
 800141c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800141e:	f7fe fec3 	bl	80001a8 <HAL_GetTick>
 8001422:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001424:	6823      	ldr	r3, [r4, #0]
 8001426:	019a      	lsls	r2, r3, #6
 8001428:	f53f aea7 	bmi.w	800117a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800142c:	f7fe febc 	bl	80001a8 <HAL_GetTick>
 8001430:	1b40      	subs	r0, r0, r5
 8001432:	2802      	cmp	r0, #2
 8001434:	d9f6      	bls.n	8001424 <HAL_RCC_OscConfig+0x2d4>
 8001436:	e6cd      	b.n	80011d4 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001438:	f7fe feb6 	bl	80001a8 <HAL_GetTick>
 800143c:	1bc0      	subs	r0, r0, r7
 800143e:	2802      	cmp	r0, #2
 8001440:	d9d7      	bls.n	80013f2 <HAL_RCC_OscConfig+0x2a2>
 8001442:	e6c7      	b.n	80011d4 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001444:	f7fe feb0 	bl	80001a8 <HAL_GetTick>
 8001448:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800144a:	6823      	ldr	r3, [r4, #0]
 800144c:	019b      	lsls	r3, r3, #6
 800144e:	f57f ae94 	bpl.w	800117a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001452:	f7fe fea9 	bl	80001a8 <HAL_GetTick>
 8001456:	1b40      	subs	r0, r0, r5
 8001458:	2802      	cmp	r0, #2
 800145a:	d9f6      	bls.n	800144a <HAL_RCC_OscConfig+0x2fa>
 800145c:	e6ba      	b.n	80011d4 <HAL_RCC_OscConfig+0x84>
 800145e:	bf00      	nop
 8001460:	40021000 	.word	0x40021000
 8001464:	42420060 	.word	0x42420060

08001468 <HAL_RCC_GetSysClockFreq>:
{
 8001468:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800146a:	4b1a      	ldr	r3, [pc, #104]	; (80014d4 <HAL_RCC_GetSysClockFreq+0x6c>)
{
 800146c:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800146e:	ac02      	add	r4, sp, #8
 8001470:	f103 0510 	add.w	r5, r3, #16
 8001474:	4622      	mov	r2, r4
 8001476:	6818      	ldr	r0, [r3, #0]
 8001478:	6859      	ldr	r1, [r3, #4]
 800147a:	3308      	adds	r3, #8
 800147c:	c203      	stmia	r2!, {r0, r1}
 800147e:	42ab      	cmp	r3, r5
 8001480:	4614      	mov	r4, r2
 8001482:	d1f7      	bne.n	8001474 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001484:	2301      	movs	r3, #1
 8001486:	f88d 3004 	strb.w	r3, [sp, #4]
 800148a:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 800148c:	4912      	ldr	r1, [pc, #72]	; (80014d8 <HAL_RCC_GetSysClockFreq+0x70>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800148e:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8001492:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001494:	f003 020c 	and.w	r2, r3, #12
 8001498:	2a08      	cmp	r2, #8
 800149a:	d118      	bne.n	80014ce <HAL_RCC_GetSysClockFreq+0x66>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800149c:	f3c3 4283 	ubfx	r2, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80014a0:	03db      	lsls	r3, r3, #15
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80014a2:	bf48      	it	mi
 80014a4:	684b      	ldrmi	r3, [r1, #4]
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80014a6:	a806      	add	r0, sp, #24
 80014a8:	4402      	add	r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80014aa:	bf48      	it	mi
 80014ac:	f3c3 4340 	ubfxmi	r3, r3, #17, #1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80014b0:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80014b4:	bf41      	itttt	mi
 80014b6:	aa06      	addmi	r2, sp, #24
 80014b8:	189b      	addmi	r3, r3, r2
 80014ba:	f813 2c14 	ldrbmi.w	r2, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 80014be:	4b07      	ldrmi	r3, [pc, #28]	; (80014dc <HAL_RCC_GetSysClockFreq+0x74>)
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80014c0:	bf54      	ite	pl
 80014c2:	4b07      	ldrpl	r3, [pc, #28]	; (80014e0 <HAL_RCC_GetSysClockFreq+0x78>)
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 80014c4:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80014c8:	4358      	muls	r0, r3
}
 80014ca:	b007      	add	sp, #28
 80014cc:	bd30      	pop	{r4, r5, pc}
      sysclockfreq = HSE_VALUE;
 80014ce:	4803      	ldr	r0, [pc, #12]	; (80014dc <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 80014d0:	e7fb      	b.n	80014ca <HAL_RCC_GetSysClockFreq+0x62>
 80014d2:	bf00      	nop
 80014d4:	08003098 	.word	0x08003098
 80014d8:	40021000 	.word	0x40021000
 80014dc:	007a1200 	.word	0x007a1200
 80014e0:	003d0900 	.word	0x003d0900

080014e4 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80014e4:	4a4d      	ldr	r2, [pc, #308]	; (800161c <HAL_RCC_ClockConfig+0x138>)
{
 80014e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80014ea:	6813      	ldr	r3, [r2, #0]
{
 80014ec:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	428b      	cmp	r3, r1
{
 80014f4:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80014f6:	d328      	bcc.n	800154a <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014f8:	682a      	ldr	r2, [r5, #0]
 80014fa:	0791      	lsls	r1, r2, #30
 80014fc:	d432      	bmi.n	8001564 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014fe:	07d2      	lsls	r2, r2, #31
 8001500:	d438      	bmi.n	8001574 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001502:	4a46      	ldr	r2, [pc, #280]	; (800161c <HAL_RCC_ClockConfig+0x138>)
 8001504:	6813      	ldr	r3, [r2, #0]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	429e      	cmp	r6, r3
 800150c:	d373      	bcc.n	80015f6 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800150e:	682a      	ldr	r2, [r5, #0]
 8001510:	4c43      	ldr	r4, [pc, #268]	; (8001620 <HAL_RCC_ClockConfig+0x13c>)
 8001512:	f012 0f04 	tst.w	r2, #4
 8001516:	d179      	bne.n	800160c <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001518:	0713      	lsls	r3, r2, #28
 800151a:	d506      	bpl.n	800152a <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800151c:	6863      	ldr	r3, [r4, #4]
 800151e:	692a      	ldr	r2, [r5, #16]
 8001520:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001524:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001528:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800152a:	f7ff ff9d 	bl	8001468 <HAL_RCC_GetSysClockFreq>
 800152e:	6863      	ldr	r3, [r4, #4]
 8001530:	4a3c      	ldr	r2, [pc, #240]	; (8001624 <HAL_RCC_ClockConfig+0x140>)
 8001532:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001536:	5cd3      	ldrb	r3, [r2, r3]
 8001538:	40d8      	lsrs	r0, r3
 800153a:	4b3b      	ldr	r3, [pc, #236]	; (8001628 <HAL_RCC_ClockConfig+0x144>)
 800153c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800153e:	2000      	movs	r0, #0
 8001540:	f7fe fe04 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8001544:	2000      	movs	r0, #0
}
 8001546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800154a:	6813      	ldr	r3, [r2, #0]
 800154c:	f023 0307 	bic.w	r3, r3, #7
 8001550:	430b      	orrs	r3, r1
 8001552:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001554:	6813      	ldr	r3, [r2, #0]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	4299      	cmp	r1, r3
 800155c:	d0cc      	beq.n	80014f8 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 800155e:	2001      	movs	r0, #1
 8001560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001564:	492e      	ldr	r1, [pc, #184]	; (8001620 <HAL_RCC_ClockConfig+0x13c>)
 8001566:	68a8      	ldr	r0, [r5, #8]
 8001568:	684b      	ldr	r3, [r1, #4]
 800156a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800156e:	4303      	orrs	r3, r0
 8001570:	604b      	str	r3, [r1, #4]
 8001572:	e7c4      	b.n	80014fe <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001574:	686a      	ldr	r2, [r5, #4]
 8001576:	4c2a      	ldr	r4, [pc, #168]	; (8001620 <HAL_RCC_ClockConfig+0x13c>)
 8001578:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800157a:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800157c:	d11c      	bne.n	80015b8 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800157e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001582:	d0ec      	beq.n	800155e <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001584:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001586:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800158a:	f023 0303 	bic.w	r3, r3, #3
 800158e:	4313      	orrs	r3, r2
 8001590:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8001592:	f7fe fe09 	bl	80001a8 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001596:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001598:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800159a:	2b01      	cmp	r3, #1
 800159c:	d114      	bne.n	80015c8 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800159e:	6863      	ldr	r3, [r4, #4]
 80015a0:	f003 030c 	and.w	r3, r3, #12
 80015a4:	2b04      	cmp	r3, #4
 80015a6:	d0ac      	beq.n	8001502 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015a8:	f7fe fdfe 	bl	80001a8 <HAL_GetTick>
 80015ac:	1bc0      	subs	r0, r0, r7
 80015ae:	4540      	cmp	r0, r8
 80015b0:	d9f5      	bls.n	800159e <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 80015b2:	2003      	movs	r0, #3
 80015b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015b8:	2a02      	cmp	r2, #2
 80015ba:	d102      	bne.n	80015c2 <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015bc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80015c0:	e7df      	b.n	8001582 <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015c2:	f013 0f02 	tst.w	r3, #2
 80015c6:	e7dc      	b.n	8001582 <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d10f      	bne.n	80015ec <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015cc:	6863      	ldr	r3, [r4, #4]
 80015ce:	f003 030c 	and.w	r3, r3, #12
 80015d2:	2b08      	cmp	r3, #8
 80015d4:	d095      	beq.n	8001502 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015d6:	f7fe fde7 	bl	80001a8 <HAL_GetTick>
 80015da:	1bc0      	subs	r0, r0, r7
 80015dc:	4540      	cmp	r0, r8
 80015de:	d9f5      	bls.n	80015cc <HAL_RCC_ClockConfig+0xe8>
 80015e0:	e7e7      	b.n	80015b2 <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015e2:	f7fe fde1 	bl	80001a8 <HAL_GetTick>
 80015e6:	1bc0      	subs	r0, r0, r7
 80015e8:	4540      	cmp	r0, r8
 80015ea:	d8e2      	bhi.n	80015b2 <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80015ec:	6863      	ldr	r3, [r4, #4]
 80015ee:	f013 0f0c 	tst.w	r3, #12
 80015f2:	d1f6      	bne.n	80015e2 <HAL_RCC_ClockConfig+0xfe>
 80015f4:	e785      	b.n	8001502 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015f6:	6813      	ldr	r3, [r2, #0]
 80015f8:	f023 0307 	bic.w	r3, r3, #7
 80015fc:	4333      	orrs	r3, r6
 80015fe:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001600:	6813      	ldr	r3, [r2, #0]
 8001602:	f003 0307 	and.w	r3, r3, #7
 8001606:	429e      	cmp	r6, r3
 8001608:	d1a9      	bne.n	800155e <HAL_RCC_ClockConfig+0x7a>
 800160a:	e780      	b.n	800150e <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800160c:	6863      	ldr	r3, [r4, #4]
 800160e:	68e9      	ldr	r1, [r5, #12]
 8001610:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001614:	430b      	orrs	r3, r1
 8001616:	6063      	str	r3, [r4, #4]
 8001618:	e77e      	b.n	8001518 <HAL_RCC_ClockConfig+0x34>
 800161a:	bf00      	nop
 800161c:	40022000 	.word	0x40022000
 8001620:	40021000 	.word	0x40021000
 8001624:	080030d0 	.word	0x080030d0
 8001628:	20000080 	.word	0x20000080

0800162c <HAL_RCC_GetHCLKFreq>:
}
 800162c:	4b01      	ldr	r3, [pc, #4]	; (8001634 <HAL_RCC_GetHCLKFreq+0x8>)
 800162e:	6818      	ldr	r0, [r3, #0]
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	20000080 	.word	0x20000080

08001638 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001638:	4b04      	ldr	r3, [pc, #16]	; (800164c <HAL_RCC_GetPCLK2Freq+0x14>)
 800163a:	4a05      	ldr	r2, [pc, #20]	; (8001650 <HAL_RCC_GetPCLK2Freq+0x18>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001642:	5cd3      	ldrb	r3, [r2, r3]
 8001644:	4a03      	ldr	r2, [pc, #12]	; (8001654 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001646:	6810      	ldr	r0, [r2, #0]
} 
 8001648:	40d8      	lsrs	r0, r3
 800164a:	4770      	bx	lr
 800164c:	40021000 	.word	0x40021000
 8001650:	080030e0 	.word	0x080030e0
 8001654:	20000080 	.word	0x20000080

08001658 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001658:	6803      	ldr	r3, [r0, #0]
{
 800165a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800165e:	07d9      	lsls	r1, r3, #31
{
 8001660:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001662:	d520      	bpl.n	80016a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001664:	4c35      	ldr	r4, [pc, #212]	; (800173c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001666:	69e3      	ldr	r3, [r4, #28]
 8001668:	00da      	lsls	r2, r3, #3
 800166a:	d432      	bmi.n	80016d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 800166c:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 800166e:	69e3      	ldr	r3, [r4, #28]
 8001670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001674:	61e3      	str	r3, [r4, #28]
 8001676:	69e3      	ldr	r3, [r4, #28]
 8001678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167c:	9301      	str	r3, [sp, #4]
 800167e:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001680:	4e2f      	ldr	r6, [pc, #188]	; (8001740 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001682:	6833      	ldr	r3, [r6, #0]
 8001684:	05db      	lsls	r3, r3, #23
 8001686:	d526      	bpl.n	80016d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001688:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800168a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800168e:	d136      	bne.n	80016fe <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001690:	6a23      	ldr	r3, [r4, #32]
 8001692:	686a      	ldr	r2, [r5, #4]
 8001694:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001698:	4313      	orrs	r3, r2
 800169a:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800169c:	b11f      	cbz	r7, 80016a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800169e:	69e3      	ldr	r3, [r4, #28]
 80016a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016a4:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80016a6:	6828      	ldr	r0, [r5, #0]
 80016a8:	0783      	lsls	r3, r0, #30
 80016aa:	d506      	bpl.n	80016ba <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80016ac:	4a23      	ldr	r2, [pc, #140]	; (800173c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80016ae:	68a9      	ldr	r1, [r5, #8]
 80016b0:	6853      	ldr	r3, [r2, #4]
 80016b2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80016b6:	430b      	orrs	r3, r1
 80016b8:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80016ba:	f010 0010 	ands.w	r0, r0, #16
 80016be:	d01b      	beq.n	80016f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80016c0:	4a1e      	ldr	r2, [pc, #120]	; (800173c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80016c2:	68e9      	ldr	r1, [r5, #12]
 80016c4:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80016c6:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80016c8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80016cc:	430b      	orrs	r3, r1
 80016ce:	6053      	str	r3, [r2, #4]
 80016d0:	e012      	b.n	80016f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 80016d2:	2700      	movs	r7, #0
 80016d4:	e7d4      	b.n	8001680 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016d6:	6833      	ldr	r3, [r6, #0]
 80016d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016dc:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80016de:	f7fe fd63 	bl	80001a8 <HAL_GetTick>
 80016e2:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e4:	6833      	ldr	r3, [r6, #0]
 80016e6:	05d8      	lsls	r0, r3, #23
 80016e8:	d4ce      	bmi.n	8001688 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016ea:	f7fe fd5d 	bl	80001a8 <HAL_GetTick>
 80016ee:	eba0 0008 	sub.w	r0, r0, r8
 80016f2:	2864      	cmp	r0, #100	; 0x64
 80016f4:	d9f6      	bls.n	80016e4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 80016f6:	2003      	movs	r0, #3
}
 80016f8:	b002      	add	sp, #8
 80016fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80016fe:	686a      	ldr	r2, [r5, #4]
 8001700:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001704:	4293      	cmp	r3, r2
 8001706:	d0c3      	beq.n	8001690 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001708:	2001      	movs	r0, #1
 800170a:	4a0e      	ldr	r2, [pc, #56]	; (8001744 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800170c:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800170e:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001710:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001712:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001716:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8001718:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800171a:	07d9      	lsls	r1, r3, #31
 800171c:	d5b8      	bpl.n	8001690 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 800171e:	f7fe fd43 	bl	80001a8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001722:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001726:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001728:	6a23      	ldr	r3, [r4, #32]
 800172a:	079a      	lsls	r2, r3, #30
 800172c:	d4b0      	bmi.n	8001690 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800172e:	f7fe fd3b 	bl	80001a8 <HAL_GetTick>
 8001732:	1b80      	subs	r0, r0, r6
 8001734:	4540      	cmp	r0, r8
 8001736:	d9f7      	bls.n	8001728 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8001738:	e7dd      	b.n	80016f6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800173a:	bf00      	nop
 800173c:	40021000 	.word	0x40021000
 8001740:	40007000 	.word	0x40007000
 8001744:	42420440 	.word	0x42420440

08001748 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001748:	b570      	push	{r4, r5, r6, lr}
 800174a:	4604      	mov	r4, r0
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800174c:	4b35      	ldr	r3, [pc, #212]	; (8001824 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
{
 800174e:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001750:	ad02      	add	r5, sp, #8
 8001752:	f103 0610 	add.w	r6, r3, #16
 8001756:	462a      	mov	r2, r5
 8001758:	6818      	ldr	r0, [r3, #0]
 800175a:	6859      	ldr	r1, [r3, #4]
 800175c:	3308      	adds	r3, #8
 800175e:	c203      	stmia	r2!, {r0, r1}
 8001760:	42b3      	cmp	r3, r6
 8001762:	4615      	mov	r5, r2
 8001764:	d1f7      	bne.n	8001756 <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001766:	2301      	movs	r3, #1
 8001768:	f88d 3004 	strb.w	r3, [sp, #4]
 800176c:	2302      	movs	r3, #2
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 800176e:	429c      	cmp	r4, r3
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001770:	f88d 3005 	strb.w	r3, [sp, #5]
  switch (PeriphClk)
 8001774:	d047      	beq.n	8001806 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 8001776:	2c10      	cmp	r4, #16
 8001778:	d017      	beq.n	80017aa <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 800177a:	2c01      	cmp	r4, #1
 800177c:	d14f      	bne.n	800181e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800177e:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 8001782:	4a29      	ldr	r2, [pc, #164]	; (8001828 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8001784:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001786:	4019      	ands	r1, r3
 8001788:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 800178c:	d044      	beq.n	8001818 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800178e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001792:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001796:	d12d      	bne.n	80017f4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
      {
        frequency = LSI_VALUE;
 8001798:	f649 4040 	movw	r0, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800179c:	6a53      	ldr	r3, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 800179e:	f013 0f02 	tst.w	r3, #2
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
      {
        frequency = HSE_VALUE / 128U;
 80017a2:	bf08      	it	eq
 80017a4:	2000      	moveq	r0, #0
    {
      break;
    }
  }
  return(frequency);
}
 80017a6:	b006      	add	sp, #24
 80017a8:	bd70      	pop	{r4, r5, r6, pc}
      temp_reg = RCC->CFGR;
 80017aa:	4b1f      	ldr	r3, [pc, #124]	; (8001828 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 80017ac:	6859      	ldr	r1, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 80017ae:	6818      	ldr	r0, [r3, #0]
 80017b0:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 80017b4:	d0f7      	beq.n	80017a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017b6:	f3c1 4283 	ubfx	r2, r1, #18, #4
 80017ba:	a806      	add	r0, sp, #24
 80017bc:	4402      	add	r2, r0
 80017be:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017c2:	03ca      	lsls	r2, r1, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017c4:	bf41      	itttt	mi
 80017c6:	685a      	ldrmi	r2, [r3, #4]
 80017c8:	a906      	addmi	r1, sp, #24
 80017ca:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 80017ce:	1852      	addmi	r2, r2, r1
 80017d0:	bf44      	itt	mi
 80017d2:	f812 1c14 	ldrbmi.w	r1, [r2, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80017d6:	4a15      	ldrmi	r2, [pc, #84]	; (800182c <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80017d8:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80017da:	bf4c      	ite	mi
 80017dc:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017e0:	4a13      	ldrpl	r2, [pc, #76]	; (8001830 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80017e2:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017e4:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80017e8:	d4dd      	bmi.n	80017a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          frequency = (pllclk * 2) / 3;
 80017ea:	2303      	movs	r3, #3
 80017ec:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80017ee:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80017f2:	e7d8      	b.n	80017a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80017f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80017f8:	d111      	bne.n	800181e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80017fa:	6813      	ldr	r3, [r2, #0]
        frequency = HSE_VALUE / 128U;
 80017fc:	f24f 4024 	movw	r0, #62500	; 0xf424
 8001800:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001804:	e7cd      	b.n	80017a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001806:	f7ff ff17 	bl	8001638 <HAL_RCC_GetPCLK2Freq>
 800180a:	4b07      	ldr	r3, [pc, #28]	; (8001828 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8001812:	3301      	adds	r3, #1
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	e7ea      	b.n	80017ee <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
        frequency = LSE_VALUE;
 8001818:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800181c:	e7c3      	b.n	80017a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
        frequency = 0U;
 800181e:	2000      	movs	r0, #0
 8001820:	e7c1      	b.n	80017a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8001822:	bf00      	nop
 8001824:	080030a8 	.word	0x080030a8
 8001828:	40021000 	.word	0x40021000
 800182c:	007a1200 	.word	0x007a1200
 8001830:	003d0900 	.word	0x003d0900

08001834 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001834:	b084      	sub	sp, #16
 8001836:	a801      	add	r0, sp, #4
 8001838:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 800183c:	b004      	add	sp, #16
 800183e:	2000      	movs	r0, #0
 8001840:	4770      	bx	lr

08001842 <USB_EnableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
     | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8001842:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8001846:	b29b      	uxth	r3, r3
 8001848:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 800184c:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 8001850:	2000      	movs	r0, #0
 8001852:	4770      	bx	lr

08001854 <USB_DisableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8001854:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8001858:	f423 5374 	bic.w	r3, r3, #15616	; 0x3d00
 800185c:	045b      	lsls	r3, r3, #17
 800185e:	0c5b      	lsrs	r3, r3, #17
 8001860:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 8001864:	2000      	movs	r0, #0
 8001866:	4770      	bx	lr

08001868 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001868:	2000      	movs	r0, #0
 800186a:	4770      	bx	lr

0800186c <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800186c:	b084      	sub	sp, #16
 800186e:	b510      	push	{r4, lr}
 8001870:	ac03      	add	r4, sp, #12
 8001872:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  
  /* Enable USB Device Interrupt mask */
  USB_EnableGlobalInt(USBx);
    
  return HAL_OK;
}
 8001876:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = 0;
 800187a:	2200      	movs	r2, #0
  USBx->CNTR = USB_CNTR_FRES;
 800187c:	2301      	movs	r3, #1
 800187e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0;
 8001882:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
  USBx->ISTR = 0;
 8001886:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 800188a:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 800188e:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
}
 8001892:	b004      	add	sp, #16
  USBx->CNTR |= winterruptmask;
 8001894:	b29b      	uxth	r3, r3
 8001896:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 800189a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 800189e:	4610      	mov	r0, r2
 80018a0:	4770      	bx	lr
	...

080018a4 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80018a4:	b570      	push	{r4, r5, r6, lr}
  /* initialize Endpoint */
  switch (ep->type)
 80018a6:	78cb      	ldrb	r3, [r1, #3]
 80018a8:	780a      	ldrb	r2, [r1, #0]
 80018aa:	2b03      	cmp	r3, #3
 80018ac:	d80f      	bhi.n	80018ce <USB_ActivateEndpoint+0x2a>
 80018ae:	e8df f003 	tbb	[pc, r3]
 80018b2:	6402      	.short	0x6402
 80018b4:	5950      	.short	0x5950
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 80018b6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80018ba:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80018be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018c2:	041b      	lsls	r3, r3, #16
 80018c4:	0c1b      	lsrs	r3, r3, #16
 80018c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    break;
  case EP_TYPE_INTR:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
    break;
  case EP_TYPE_ISOC:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 80018ca:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
  default:
      break;
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80018ce:	f640 730f 	movw	r3, #3855	; 0xf0f
 80018d2:	780c      	ldrb	r4, [r1, #0]
 80018d4:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 80018d8:	f444 4500 	orr.w	r5, r4, #32768	; 0x8000
 80018dc:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80018e0:	401a      	ands	r2, r3
 80018e2:	432a      	orrs	r2, r5
 80018e4:	f820 2024 	strh.w	r2, [r0, r4, lsl #2]
  
  if (ep->doublebuffer == 0) 
 80018e8:	7a8a      	ldrb	r2, [r1, #10]
 80018ea:	780d      	ldrb	r5, [r1, #0]
 80018ec:	2a00      	cmp	r2, #0
 80018ee:	f040 8097 	bne.w	8001a20 <USB_ActivateEndpoint+0x17c>
  {
    if (ep->is_in)
 80018f2:	784c      	ldrb	r4, [r1, #1]
 80018f4:	888a      	ldrh	r2, [r1, #4]
 80018f6:	2c00      	cmp	r4, #0
 80018f8:	d04a      	beq.n	8001990 <USB_ActivateEndpoint+0xec>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80018fa:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
 80018fe:	0852      	lsrs	r2, r2, #1
 8001900:	b2a4      	uxth	r4, r4
 8001902:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8001906:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800190a:	0052      	lsls	r2, r2, #1
 800190c:	f8c4 2400 	str.w	r2, [r4, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001910:	780c      	ldrb	r4, [r1, #0]
 8001912:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001916:	0652      	lsls	r2, r2, #25
 8001918:	d508      	bpl.n	800192c <USB_ActivateEndpoint+0x88>
 800191a:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 800191e:	4013      	ands	r3, r2
 8001920:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001924:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001928:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 800192c:	780a      	ldrb	r2, [r1, #0]
 800192e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001932:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001936:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800193a:	041b      	lsls	r3, r3, #16
 800193c:	0c1b      	lsrs	r3, r3, #16
 800193e:	f083 0320 	eor.w	r3, r3, #32
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001942:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001946:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800194a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 800194e:	2000      	movs	r0, #0
 8001950:	bd70      	pop	{r4, r5, r6, pc}
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 8001952:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001956:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800195a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800195e:	041b      	lsls	r3, r3, #16
 8001960:	0c1b      	lsrs	r3, r3, #16
 8001962:	e7b2      	b.n	80018ca <USB_ActivateEndpoint+0x26>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 8001964:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001968:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800196c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001970:	041b      	lsls	r3, r3, #16
 8001972:	0c1b      	lsrs	r3, r3, #16
 8001974:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8001978:	e7a7      	b.n	80018ca <USB_ActivateEndpoint+0x26>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 800197a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800197e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001986:	041b      	lsls	r3, r3, #16
 8001988:	0c1b      	lsrs	r3, r3, #16
 800198a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800198e:	e79c      	b.n	80018ca <USB_ActivateEndpoint+0x26>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001990:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001994:	0852      	lsrs	r2, r2, #1
 8001996:	b29b      	uxth	r3, r3
 8001998:	3304      	adds	r3, #4
 800199a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800199e:	0052      	lsls	r2, r2, #1
 80019a0:	f500 6480 	add.w	r4, r0, #1024	; 0x400
 80019a4:	f844 2013 	str.w	r2, [r4, r3, lsl #1]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80019a8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80019ac:	690d      	ldr	r5, [r1, #16]
 80019ae:	b292      	uxth	r2, r2
 80019b0:	780b      	ldrb	r3, [r1, #0]
 80019b2:	3206      	adds	r2, #6
 80019b4:	2d3e      	cmp	r5, #62	; 0x3e
 80019b6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80019ba:	d929      	bls.n	8001a10 <USB_ActivateEndpoint+0x16c>
 80019bc:	f3c5 164f 	ubfx	r6, r5, #5, #16
 80019c0:	06eb      	lsls	r3, r5, #27
 80019c2:	bf04      	itt	eq
 80019c4:	f106 33ff 	addeq.w	r3, r6, #4294967295	; 0xffffffff
 80019c8:	b29e      	uxtheq	r6, r3
 80019ca:	4b6e      	ldr	r3, [pc, #440]	; (8001b84 <USB_ActivateEndpoint+0x2e0>)
 80019cc:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	f844 3012 	str.w	r3, [r4, r2, lsl #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80019d6:	780a      	ldrb	r2, [r1, #0]
 80019d8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80019dc:	045e      	lsls	r6, r3, #17
 80019de:	d50b      	bpl.n	80019f8 <USB_ActivateEndpoint+0x154>
 80019e0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80019e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019e8:	051b      	lsls	r3, r3, #20
 80019ea:	0d1b      	lsrs	r3, r3, #20
 80019ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019f4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80019f8:	780a      	ldrb	r2, [r1, #0]
 80019fa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80019fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a06:	041b      	lsls	r3, r3, #16
 8001a08:	0c1b      	lsrs	r3, r3, #16
 8001a0a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001a0e:	e798      	b.n	8001942 <USB_ActivateEndpoint+0x9e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8001a10:	f3c5 034f 	ubfx	r3, r5, #1, #16
 8001a14:	07ed      	lsls	r5, r5, #31
 8001a16:	bf44      	itt	mi
 8001a18:	3301      	addmi	r3, #1
 8001a1a:	b29b      	uxthmi	r3, r3
 8001a1c:	029b      	lsls	r3, r3, #10
 8001a1e:	e7d7      	b.n	80019d0 <USB_ActivateEndpoint+0x12c>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8001a20:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]
 8001a24:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 8001a28:	0512      	lsls	r2, r2, #20
 8001a2a:	0d12      	lsrs	r2, r2, #20
 8001a2c:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8001a30:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a34:	f820 2025 	strh.w	r2, [r0, r5, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 8001a38:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001a3c:	780c      	ldrb	r4, [r1, #0]
 8001a3e:	b292      	uxth	r2, r2
 8001a40:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8001a44:	88cc      	ldrh	r4, [r1, #6]
 8001a46:	f500 6580 	add.w	r5, r0, #1024	; 0x400
 8001a4a:	0864      	lsrs	r4, r4, #1
 8001a4c:	0064      	lsls	r4, r4, #1
 8001a4e:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
 8001a52:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001a56:	780c      	ldrb	r4, [r1, #0]
 8001a58:	b292      	uxth	r2, r2
 8001a5a:	3204      	adds	r2, #4
 8001a5c:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8001a60:	890c      	ldrh	r4, [r1, #8]
 8001a62:	0864      	lsrs	r4, r4, #1
 8001a64:	0064      	lsls	r4, r4, #1
 8001a66:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
    if (ep->is_in==0)
 8001a6a:	784a      	ldrb	r2, [r1, #1]
 8001a6c:	780c      	ldrb	r4, [r1, #0]
 8001a6e:	2a00      	cmp	r2, #0
 8001a70:	d147      	bne.n	8001b02 <USB_ActivateEndpoint+0x25e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001a72:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001a76:	0455      	lsls	r5, r2, #17
 8001a78:	d508      	bpl.n	8001a8c <USB_ActivateEndpoint+0x1e8>
 8001a7a:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a88:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001a8c:	780a      	ldrb	r2, [r1, #0]
 8001a8e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a92:	065c      	lsls	r4, r3, #25
 8001a94:	d50b      	bpl.n	8001aae <USB_ActivateEndpoint+0x20a>
 8001a96:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a9e:	051b      	lsls	r3, r3, #20
 8001aa0:	0d1b      	lsrs	r3, r3, #20
 8001aa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001aa6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001aaa:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8001aae:	780a      	ldrb	r2, [r1, #0]
 8001ab0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001ab4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ab8:	051b      	lsls	r3, r3, #20
 8001aba:	0d1b      	lsrs	r3, r3, #20
 8001abc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ac0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001ac4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001ac8:	f248 0280 	movw	r2, #32896	; 0x8080
 8001acc:	780c      	ldrb	r4, [r1, #0]
 8001ace:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001ad2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ada:	041b      	lsls	r3, r3, #16
 8001adc:	0c1b      	lsrs	r3, r3, #16
 8001ade:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001ae8:	7809      	ldrb	r1, [r1, #0]
 8001aea:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001aee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001af2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001af6:	041b      	lsls	r3, r3, #16
 8001af8:	0c1b      	lsrs	r3, r3, #16
 8001afa:	4313      	orrs	r3, r2
 8001afc:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 8001b00:	e725      	b.n	800194e <USB_ActivateEndpoint+0xaa>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001b02:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001b06:	0452      	lsls	r2, r2, #17
 8001b08:	d508      	bpl.n	8001b1c <USB_ActivateEndpoint+0x278>
 8001b0a:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b18:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001b1c:	780a      	ldrb	r2, [r1, #0]
 8001b1e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001b22:	065b      	lsls	r3, r3, #25
 8001b24:	d50b      	bpl.n	8001b3e <USB_ActivateEndpoint+0x29a>
 8001b26:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001b2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b2e:	051b      	lsls	r3, r3, #20
 8001b30:	0d1b      	lsrs	r3, r3, #20
 8001b32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b36:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001b3a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8001b3e:	780a      	ldrb	r2, [r1, #0]
 8001b40:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001b44:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b48:	051b      	lsls	r3, r3, #20
 8001b4a:	0d1b      	lsrs	r3, r3, #20
 8001b4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b54:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001b58:	f248 0280 	movw	r2, #32896	; 0x8080
 8001b5c:	780c      	ldrb	r4, [r1, #0]
 8001b5e:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001b62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b6a:	041b      	lsls	r3, r3, #16
 8001b6c:	0c1b      	lsrs	r3, r3, #16
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001b74:	7809      	ldrb	r1, [r1, #0]
 8001b76:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001b7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b82:	e7b8      	b.n	8001af6 <USB_ActivateEndpoint+0x252>
 8001b84:	ffff8000 	.word	0xffff8000

08001b88 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8001b88:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0) 
 8001b8a:	7a8c      	ldrb	r4, [r1, #10]
 8001b8c:	784a      	ldrb	r2, [r1, #1]
 8001b8e:	780b      	ldrb	r3, [r1, #0]
 8001b90:	bbcc      	cbnz	r4, 8001c06 <USB_DeactivateEndpoint+0x7e>
  {
    if (ep->is_in)
 8001b92:	b302      	cbz	r2, 8001bd6 <USB_DeactivateEndpoint+0x4e>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001b94:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001b98:	0652      	lsls	r2, r2, #25
 8001b9a:	d50b      	bpl.n	8001bb4 <USB_DeactivateEndpoint+0x2c>
 8001b9c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001ba0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001ba4:	0512      	lsls	r2, r2, #20
 8001ba6:	0d12      	lsrs	r2, r2, #20
 8001ba8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001bac:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001bb0:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
 8001bb4:	780a      	ldrb	r2, [r1, #0]
 8001bb6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001bba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001bbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001bc2:	041b      	lsls	r3, r3, #16
 8001bc4:	0c1b      	lsrs	r3, r3, #16
 8001bc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bce:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001bd6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001bda:	0454      	lsls	r4, r2, #17
 8001bdc:	d50b      	bpl.n	8001bf6 <USB_DeactivateEndpoint+0x6e>
 8001bde:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001be2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001be6:	0512      	lsls	r2, r2, #20
 8001be8:	0d12      	lsrs	r2, r2, #20
 8001bea:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001bee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001bf2:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001bf6:	780a      	ldrb	r2, [r1, #0]
 8001bf8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001bfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c04:	e7dd      	b.n	8001bc2 <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in==0)
 8001c06:	2a00      	cmp	r2, #0
 8001c08:	d148      	bne.n	8001c9c <USB_DeactivateEndpoint+0x114>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001c0a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001c0e:	0452      	lsls	r2, r2, #17
 8001c10:	d50b      	bpl.n	8001c2a <USB_DeactivateEndpoint+0xa2>
 8001c12:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001c16:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001c1a:	0512      	lsls	r2, r2, #20
 8001c1c:	0d12      	lsrs	r2, r2, #20
 8001c1e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001c22:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c26:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001c2a:	780a      	ldrb	r2, [r1, #0]
 8001c2c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001c30:	065c      	lsls	r4, r3, #25
 8001c32:	d50b      	bpl.n	8001c4c <USB_DeactivateEndpoint+0xc4>
 8001c34:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001c38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c3c:	051b      	lsls	r3, r3, #20
 8001c3e:	0d1b      	lsrs	r3, r3, #20
 8001c40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c44:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001c48:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8001c4c:	780a      	ldrb	r2, [r1, #0]
 8001c4e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001c52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c56:	051b      	lsls	r3, r3, #20
 8001c58:	0d1b      	lsrs	r3, r3, #20
 8001c5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c5e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001c62:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001c66:	f248 0280 	movw	r2, #32896	; 0x8080
 8001c6a:	780c      	ldrb	r4, [r1, #0]
 8001c6c:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001c70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c78:	041b      	lsls	r3, r3, #16
 8001c7a:	0c1b      	lsrs	r3, r3, #16
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001c82:	7809      	ldrb	r1, [r1, #0]
 8001c84:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001c88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001c90:	041b      	lsls	r3, r3, #16
 8001c92:	0c1b      	lsrs	r3, r3, #16
 8001c94:	4313      	orrs	r3, r2
 8001c96:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 8001c9a:	e79a      	b.n	8001bd2 <USB_DeactivateEndpoint+0x4a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001c9c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001ca0:	0452      	lsls	r2, r2, #17
 8001ca2:	d50b      	bpl.n	8001cbc <USB_DeactivateEndpoint+0x134>
 8001ca4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001ca8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001cac:	0512      	lsls	r2, r2, #20
 8001cae:	0d12      	lsrs	r2, r2, #20
 8001cb0:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001cb4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001cb8:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001cbc:	780a      	ldrb	r2, [r1, #0]
 8001cbe:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001cc2:	065b      	lsls	r3, r3, #25
 8001cc4:	d50b      	bpl.n	8001cde <USB_DeactivateEndpoint+0x156>
 8001cc6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001cca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cce:	051b      	lsls	r3, r3, #20
 8001cd0:	0d1b      	lsrs	r3, r3, #20
 8001cd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cd6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001cda:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8001cde:	780a      	ldrb	r2, [r1, #0]
 8001ce0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001ce4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ce8:	051b      	lsls	r3, r3, #20
 8001cea:	0d1b      	lsrs	r3, r3, #20
 8001cec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001cf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cf4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001cf8:	f248 0280 	movw	r2, #32896	; 0x8080
 8001cfc:	780c      	ldrb	r4, [r1, #0]
 8001cfe:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001d02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d0a:	041b      	lsls	r3, r3, #16
 8001d0c:	0c1b      	lsrs	r3, r3, #16
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001d14:	7809      	ldrb	r1, [r1, #0]
 8001d16:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001d1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d22:	e7b5      	b.n	8001c90 <USB_DeactivateEndpoint+0x108>

08001d24 <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
  if (ep->num == 0)
 8001d24:	780a      	ldrb	r2, [r1, #0]
 8001d26:	b98a      	cbnz	r2, 8001d4c <USB_EPSetStall+0x28>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 8001d28:	8803      	ldrh	r3, [r0, #0]
 8001d2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d32:	041b      	lsls	r3, r3, #16
 8001d34:	0c1b      	lsrs	r3, r3, #16
 8001d36:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001d3a:	f083 0310 	eor.w	r3, r3, #16
 8001d3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d46:	8003      	strh	r3, [r0, #0]
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
    }
  }
  return HAL_OK;
}
 8001d48:	2000      	movs	r0, #0
 8001d4a:	4770      	bx	lr
    if (ep->is_in)
 8001d4c:	784b      	ldrb	r3, [r1, #1]
 8001d4e:	b183      	cbz	r3, 8001d72 <USB_EPSetStall+0x4e>
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 8001d50:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001d54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d5c:	041b      	lsls	r3, r3, #16
 8001d5e:	0c1b      	lsrs	r3, r3, #16
 8001d60:	f083 0310 	eor.w	r3, r3, #16
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 8001d64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d6c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8001d70:	e7ea      	b.n	8001d48 <USB_EPSetStall+0x24>
 8001d72:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001d76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d7e:	041b      	lsls	r3, r3, #16
 8001d80:	0c1b      	lsrs	r3, r3, #16
 8001d82:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001d86:	e7ed      	b.n	8001d64 <USB_EPSetStall+0x40>

08001d88 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in)
 8001d88:	784b      	ldrb	r3, [r1, #1]
 8001d8a:	780a      	ldrb	r2, [r1, #0]
 8001d8c:	b313      	cbz	r3, 8001dd4 <USB_EPClearStall+0x4c>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001d8e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001d92:	065b      	lsls	r3, r3, #25
 8001d94:	d50b      	bpl.n	8001dae <USB_EPClearStall+0x26>
 8001d96:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001d9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d9e:	051b      	lsls	r3, r3, #20
 8001da0:	0d1b      	lsrs	r3, r3, #20
 8001da2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001da6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001daa:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8001dae:	780a      	ldrb	r2, [r1, #0]
 8001db0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001db4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001db8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001dbc:	041b      	lsls	r3, r3, #16
 8001dbe:	0c1b      	lsrs	r3, r3, #16
 8001dc0:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001dc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dcc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }
  return HAL_OK;
}
 8001dd0:	2000      	movs	r0, #0
 8001dd2:	4770      	bx	lr
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001dd4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001dd8:	045b      	lsls	r3, r3, #17
 8001dda:	d50b      	bpl.n	8001df4 <USB_EPClearStall+0x6c>
 8001ddc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001de0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001de4:	051b      	lsls	r3, r3, #20
 8001de6:	0d1b      	lsrs	r3, r3, #20
 8001de8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001dec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001df0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001df4:	780a      	ldrb	r2, [r1, #0]
 8001df6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001dfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e02:	041b      	lsls	r3, r3, #16
 8001e04:	0c1b      	lsrs	r3, r3, #16
 8001e06:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001e0a:	e7db      	b.n	8001dc4 <USB_EPClearStall+0x3c>

08001e0c <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
  if(address == 0) 
 8001e0c:	b911      	cbnz	r1, 8001e14 <USB_SetDevAddress+0x8>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 8001e0e:	2380      	movs	r3, #128	; 0x80
 8001e10:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }
  
  return HAL_OK;
}
 8001e14:	2000      	movs	r0, #0
 8001e16:	4770      	bx	lr

08001e18 <USB_DevConnect>:
 8001e18:	2000      	movs	r0, #0
 8001e1a:	4770      	bx	lr

08001e1c <USB_DevDisconnect>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001e1c:	2000      	movs	r0, #0
 8001e1e:	4770      	bx	lr

08001e20 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
  uint32_t tmpreg = 0;
  
  tmpreg = USBx->ISTR;
 8001e20:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8001e24:	b280      	uxth	r0, r0
 8001e26:	4770      	bx	lr

08001e28 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001e28:	2000      	movs	r0, #0
 8001e2a:	4770      	bx	lr

08001e2c <USB_WritePMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8001e2c:	b510      	push	{r4, lr}
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (index = nbytes; index != 0; index--)
 8001e2e:	2400      	movs	r4, #0
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8001e30:	3301      	adds	r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8001e32:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8001e36:	105b      	asrs	r3, r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8001e38:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 8001e3c:	42a3      	cmp	r3, r4
 8001e3e:	d100      	bne.n	8001e42 <USB_WritePMA+0x16>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 8001e40:	bd10      	pop	{r4, pc}
 8001e42:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal++ = temp2;
 8001e46:	f822 0024 	strh.w	r0, [r2, r4, lsl #2]
 8001e4a:	3401      	adds	r4, #1
 8001e4c:	e7f6      	b.n	8001e3c <USB_WritePMA+0x10>
	...

08001e50 <USB_EPStartXfer>:
{
 8001e50:	b570      	push	{r4, r5, r6, lr}
 8001e52:	460e      	mov	r6, r1
  uint32_t len = ep->xfer_len;
 8001e54:	698a      	ldr	r2, [r1, #24]
  if (ep->is_in == 1)
 8001e56:	7849      	ldrb	r1, [r1, #1]
{
 8001e58:	4605      	mov	r5, r0
  if (ep->is_in == 1)
 8001e5a:	2901      	cmp	r1, #1
 8001e5c:	6933      	ldr	r3, [r6, #16]
 8001e5e:	7ab0      	ldrb	r0, [r6, #10]
 8001e60:	d166      	bne.n	8001f30 <USB_EPStartXfer+0xe0>
    if (ep->xfer_len > ep->maxpacket)
 8001e62:	429a      	cmp	r2, r3
 8001e64:	461c      	mov	r4, r3
      ep->xfer_len =0;
 8001e66:	bf9b      	ittet	ls
 8001e68:	2300      	movls	r3, #0
 8001e6a:	4614      	movls	r4, r2
      ep->xfer_len-=len; 
 8001e6c:	1ad2      	subhi	r2, r2, r3
      ep->xfer_len =0;
 8001e6e:	61b3      	strls	r3, [r6, #24]
      ep->xfer_len-=len; 
 8001e70:	bf88      	it	hi
 8001e72:	61b2      	strhi	r2, [r6, #24]
 8001e74:	b2a3      	uxth	r3, r4
    if (ep->doublebuffer == 0) 
 8001e76:	bb10      	cbnz	r0, 8001ebe <USB_EPStartXfer+0x6e>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 8001e78:	88b2      	ldrh	r2, [r6, #4]
 8001e7a:	6971      	ldr	r1, [r6, #20]
 8001e7c:	4628      	mov	r0, r5
 8001e7e:	f7ff ffd5 	bl	8001e2c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8001e82:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8001e86:	7832      	ldrb	r2, [r6, #0]
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	3302      	adds	r3, #2
 8001e8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001e90:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8001e94:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8001e98:	7832      	ldrb	r2, [r6, #0]
 8001e9a:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8001e9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ea2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ea6:	041b      	lsls	r3, r3, #16
 8001ea8:	0c1b      	lsrs	r3, r3, #16
 8001eaa:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001eae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001eb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eb6:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
}
 8001eba:	2000      	movs	r0, #0
 8001ebc:	bd70      	pop	{r4, r5, r6, pc}
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 8001ebe:	7832      	ldrb	r2, [r6, #0]
 8001ec0:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
 8001ec4:	00d2      	lsls	r2, r2, #3
 8001ec6:	f011 0f40 	tst.w	r1, #64	; 0x40
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8001eca:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8001ece:	b289      	uxth	r1, r1
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 8001ed0:	d01a      	beq.n	8001f08 <USB_EPStartXfer+0xb8>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8001ed2:	3102      	adds	r1, #2
 8001ed4:	440a      	add	r2, r1
 8001ed6:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8001eda:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
        pmabuffer = ep->pmaaddr1;
 8001ede:	8932      	ldrh	r2, [r6, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 8001ee0:	6971      	ldr	r1, [r6, #20]
 8001ee2:	4628      	mov	r0, r5
 8001ee4:	f7ff ffa2 	bl	8001e2c <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8001ee8:	7873      	ldrb	r3, [r6, #1]
 8001eea:	7832      	ldrb	r2, [r6, #0]
 8001eec:	b99b      	cbnz	r3, 8001f16 <USB_EPStartXfer+0xc6>
 8001eee:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8001ef2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ef6:	051b      	lsls	r3, r3, #20
 8001ef8:	0d1b      	lsrs	r3, r3, #20
 8001efa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001efe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001f02:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8001f06:	e7c7      	b.n	8001e98 <USB_EPStartXfer+0x48>
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8001f08:	440a      	add	r2, r1
 8001f0a:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8001f0e:	f8c2 4404 	str.w	r4, [r2, #1028]	; 0x404
        pmabuffer = ep->pmaaddr0;
 8001f12:	88f2      	ldrh	r2, [r6, #6]
 8001f14:	e7e4      	b.n	8001ee0 <USB_EPStartXfer+0x90>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d1be      	bne.n	8001e98 <USB_EPStartXfer+0x48>
 8001f1a:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8001f1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f22:	051b      	lsls	r3, r3, #20
 8001f24:	0d1b      	lsrs	r3, r3, #20
 8001f26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f2e:	e7e8      	b.n	8001f02 <USB_EPStartXfer+0xb2>
    if (ep->xfer_len > ep->maxpacket)
 8001f30:	429a      	cmp	r2, r3
      ep->xfer_len =0;
 8001f32:	bf93      	iteet	ls
 8001f34:	2300      	movls	r3, #0
      ep->xfer_len-=len; 
 8001f36:	1ad2      	subhi	r2, r2, r3
 8001f38:	61b2      	strhi	r2, [r6, #24]
      ep->xfer_len =0;
 8001f3a:	61b3      	strls	r3, [r6, #24]
 8001f3c:	bf98      	it	ls
 8001f3e:	4613      	movls	r3, r2
 8001f40:	7832      	ldrb	r2, [r6, #0]
    if (ep->doublebuffer == 0) 
 8001f42:	bb70      	cbnz	r0, 8001fa2 <USB_EPStartXfer+0x152>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8001f44:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8001f48:	2b3e      	cmp	r3, #62	; 0x3e
 8001f4a:	b289      	uxth	r1, r1
 8001f4c:	f101 0106 	add.w	r1, r1, #6
 8001f50:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8001f54:	f505 6080 	add.w	r0, r5, #1024	; 0x400
 8001f58:	d918      	bls.n	8001f8c <USB_EPStartXfer+0x13c>
 8001f5a:	f3c3 124f 	ubfx	r2, r3, #5, #16
 8001f5e:	06db      	lsls	r3, r3, #27
 8001f60:	bf04      	itt	eq
 8001f62:	f102 33ff 	addeq.w	r3, r2, #4294967295	; 0xffffffff
 8001f66:	b29a      	uxtheq	r2, r3
 8001f68:	4b38      	ldr	r3, [pc, #224]	; (800204c <USB_EPStartXfer+0x1fc>)
 8001f6a:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001f74:	7832      	ldrb	r2, [r6, #0]
 8001f76:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8001f7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f82:	041b      	lsls	r3, r3, #16
 8001f84:	0c1b      	lsrs	r3, r3, #16
 8001f86:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001f8a:	e790      	b.n	8001eae <USB_EPStartXfer+0x5e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8001f8c:	f3c3 024f 	ubfx	r2, r3, #1, #16
 8001f90:	07dc      	lsls	r4, r3, #31
 8001f92:	bf44      	itt	mi
 8001f94:	3201      	addmi	r2, #1
 8001f96:	b292      	uxthmi	r2, r2
 8001f98:	0292      	lsls	r2, r2, #10
 8001f9a:	b292      	uxth	r2, r2
 8001f9c:	f840 2011 	str.w	r2, [r0, r1, lsl #1]
 8001fa0:	e7e8      	b.n	8001f74 <USB_EPStartXfer+0x124>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8001fa2:	b9b9      	cbnz	r1, 8001fd4 <USB_EPStartXfer+0x184>
 8001fa4:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8001fa8:	2b3e      	cmp	r3, #62	; 0x3e
 8001faa:	b289      	uxth	r1, r1
 8001fac:	f101 0102 	add.w	r1, r1, #2
 8001fb0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8001fb4:	f505 6480 	add.w	r4, r5, #1024	; 0x400
 8001fb8:	d928      	bls.n	800200c <USB_EPStartXfer+0x1bc>
 8001fba:	f3c3 104f 	ubfx	r0, r3, #5, #16
 8001fbe:	06da      	lsls	r2, r3, #27
 8001fc0:	bf04      	itt	eq
 8001fc2:	f100 32ff 	addeq.w	r2, r0, #4294967295	; 0xffffffff
 8001fc6:	b290      	uxtheq	r0, r2
 8001fc8:	4a20      	ldr	r2, [pc, #128]	; (800204c <USB_EPStartXfer+0x1fc>)
 8001fca:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8001fce:	b292      	uxth	r2, r2
 8001fd0:	f844 2011 	str.w	r2, [r4, r1, lsl #1]
 8001fd4:	7872      	ldrb	r2, [r6, #1]
 8001fd6:	7831      	ldrb	r1, [r6, #0]
 8001fd8:	bb5a      	cbnz	r2, 8002032 <USB_EPStartXfer+0x1e2>
 8001fda:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8001fde:	2b3e      	cmp	r3, #62	; 0x3e
 8001fe0:	b292      	uxth	r2, r2
 8001fe2:	f102 0206 	add.w	r2, r2, #6
 8001fe6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8001fea:	f505 6080 	add.w	r0, r5, #1024	; 0x400
 8001fee:	d915      	bls.n	800201c <USB_EPStartXfer+0x1cc>
 8001ff0:	f3c3 114f 	ubfx	r1, r3, #5, #16
 8001ff4:	06dc      	lsls	r4, r3, #27
 8001ff6:	bf04      	itt	eq
 8001ff8:	f101 33ff 	addeq.w	r3, r1, #4294967295	; 0xffffffff
 8001ffc:	b299      	uxtheq	r1, r3
 8001ffe:	4b13      	ldr	r3, [pc, #76]	; (800204c <USB_EPStartXfer+0x1fc>)
 8002000:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8002004:	b29b      	uxth	r3, r3
 8002006:	f840 3012 	str.w	r3, [r0, r2, lsl #1]
 800200a:	e7b3      	b.n	8001f74 <USB_EPStartXfer+0x124>
 800200c:	f3c3 024f 	ubfx	r2, r3, #1, #16
 8002010:	07d8      	lsls	r0, r3, #31
 8002012:	bf44      	itt	mi
 8002014:	3201      	addmi	r2, #1
 8002016:	b292      	uxthmi	r2, r2
 8002018:	0292      	lsls	r2, r2, #10
 800201a:	e7d8      	b.n	8001fce <USB_EPStartXfer+0x17e>
 800201c:	f3c3 014f 	ubfx	r1, r3, #1, #16
 8002020:	07db      	lsls	r3, r3, #31
 8002022:	bf44      	itt	mi
 8002024:	3101      	addmi	r1, #1
 8002026:	b289      	uxthmi	r1, r1
 8002028:	0289      	lsls	r1, r1, #10
 800202a:	b289      	uxth	r1, r1
 800202c:	f840 1012 	str.w	r1, [r0, r2, lsl #1]
 8002030:	e7a0      	b.n	8001f74 <USB_EPStartXfer+0x124>
 8002032:	2a01      	cmp	r2, #1
 8002034:	d19e      	bne.n	8001f74 <USB_EPStartXfer+0x124>
 8002036:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800203a:	b292      	uxth	r2, r2
 800203c:	3202      	adds	r2, #2
 800203e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8002042:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8002046:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
 800204a:	e793      	b.n	8001f74 <USB_EPStartXfer+0x124>
 800204c:	ffff8000 	.word	0xffff8000

08002050 <USB_ReadPMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8002050:	b510      	push	{r4, lr}
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
  uint32_t index = 0;
  uint32_t *pdwVal = NULL;
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (index = nbytes; index != 0; index--)
 8002052:	2400      	movs	r4, #0
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8002054:	3301      	adds	r3, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002056:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 800205a:	105b      	asrs	r3, r3, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 800205c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 8002060:	42a3      	cmp	r3, r4
 8002062:	d100      	bne.n	8002066 <USB_ReadPMA+0x16>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
 8002064:	bd10      	pop	{r4, pc}
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8002066:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 800206a:	f821 0014 	strh.w	r0, [r1, r4, lsl #1]
 800206e:	3401      	adds	r4, #1
 8002070:	e7f6      	b.n	8002060 <USB_ReadPMA+0x10>
	...

08002074 <USBD_CUSTOM_HID_GetCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CUSTOM_HID_CfgDesc);
 8002074:	2329      	movs	r3, #41	; 0x29
 8002076:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_CfgDesc;
}
 8002078:	4800      	ldr	r0, [pc, #0]	; (800207c <USBD_CUSTOM_HID_GetCfgDesc+0x8>)
 800207a:	4770      	bx	lr
 800207c:	2000003c 	.word	0x2000003c

08002080 <USBD_CUSTOM_HID_DataIn>:
                              uint8_t epnum)
{
  
  /* Ensure that the FIFO is empty before a new transfer, this condition could 
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8002080:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 8002084:	2000      	movs	r0, #0
 8002086:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50

  return USBD_OK;
}
 800208a:	4770      	bx	lr

0800208c <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800208c:	b510      	push	{r4, lr}
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;  
 800208e:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218

  if (hhid->IsReportAvailable == 1)
 8002092:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002094:	2b01      	cmp	r3, #1
 8002096:	d107      	bne.n	80020a8 <USBD_CUSTOM_HID_EP0_RxReady+0x1c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0], 
 8002098:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 800209c:	7861      	ldrb	r1, [r4, #1]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	7820      	ldrb	r0, [r4, #0]
 80020a2:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0;      
 80020a4:	2300      	movs	r3, #0
 80020a6:	64e3      	str	r3, [r4, #76]	; 0x4c
  }

  return USBD_OK;
}
 80020a8:	2000      	movs	r0, #0
 80020aa:	bd10      	pop	{r4, pc}

080020ac <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc (uint16_t *length)
{
  *length = sizeof (USBD_CUSTOM_HID_DeviceQualifierDesc);
 80020ac:	230a      	movs	r3, #10
 80020ae:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
}
 80020b0:	4800      	ldr	r0, [pc, #0]	; (80020b4 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x8>)
 80020b2:	4770      	bx	lr
 80020b4:	20000074 	.word	0x20000074

080020b8 <USBD_CUSTOM_HID_DataOut>:
{
 80020b8:	b538      	push	{r3, r4, r5, lr}
 80020ba:	4604      	mov	r4, r0
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;  
 80020bc:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0], 
 80020c0:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 80020c4:	7869      	ldrb	r1, [r5, #1]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	7828      	ldrb	r0, [r5, #0]
 80020ca:	4798      	blx	r3
  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR , hhid->Report_buf, 
 80020cc:	2340      	movs	r3, #64	; 0x40
 80020ce:	462a      	mov	r2, r5
 80020d0:	2101      	movs	r1, #1
 80020d2:	4620      	mov	r0, r4
 80020d4:	f000 ff1e 	bl	8002f14 <USBD_LL_PrepareReceive>
}
 80020d8:	2000      	movs	r0, #0
 80020da:	bd38      	pop	{r3, r4, r5, pc}

080020dc <USBD_CUSTOM_HID_Setup>:
{
 80020dc:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80020de:	780c      	ldrb	r4, [r1, #0]
{
 80020e0:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80020e2:	f014 0460 	ands.w	r4, r4, #96	; 0x60
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 80020e6:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80020ea:	d02d      	beq.n	8002148 <USBD_CUSTOM_HID_Setup+0x6c>
 80020ec:	2c20      	cmp	r4, #32
 80020ee:	d10c      	bne.n	800210a <USBD_CUSTOM_HID_Setup+0x2e>
    switch (req->bRequest)
 80020f0:	784a      	ldrb	r2, [r1, #1]
 80020f2:	3a02      	subs	r2, #2
 80020f4:	2a09      	cmp	r2, #9
 80020f6:	d821      	bhi.n	800213c <USBD_CUSTOM_HID_Setup+0x60>
 80020f8:	e8df f002 	tbb	[pc, r2]
 80020fc:	20200914 	.word	0x20200914
 8002100:	18202020 	.word	0x18202020
 8002104:	0510      	.short	0x0510
      hhid->Protocol = (uint8_t)(req->wValue);
 8002106:	788a      	ldrb	r2, [r1, #2]
 8002108:	641a      	str	r2, [r3, #64]	; 0x40
  return USBD_OK;
 800210a:	2400      	movs	r4, #0
 800210c:	e01a      	b.n	8002144 <USBD_CUSTOM_HID_Setup+0x68>
      USBD_CtlSendData (pdev, 
 800210e:	2201      	movs	r2, #1
 8002110:	f103 0140 	add.w	r1, r3, #64	; 0x40
      USBD_CtlSendData (pdev, 
 8002114:	4628      	mov	r0, r5
 8002116:	f000 fb7b 	bl	8002810 <USBD_CtlSendData>
 800211a:	e7f6      	b.n	800210a <USBD_CUSTOM_HID_Setup+0x2e>
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800211c:	884a      	ldrh	r2, [r1, #2]
 800211e:	0a12      	lsrs	r2, r2, #8
 8002120:	645a      	str	r2, [r3, #68]	; 0x44
 8002122:	e7f2      	b.n	800210a <USBD_CUSTOM_HID_Setup+0x2e>
      USBD_CtlSendData (pdev, 
 8002124:	2201      	movs	r2, #1
 8002126:	f103 0144 	add.w	r1, r3, #68	; 0x44
 800212a:	e7f3      	b.n	8002114 <USBD_CUSTOM_HID_Setup+0x38>
      hhid->IsReportAvailable = 1;
 800212c:	2201      	movs	r2, #1
      USBD_CtlPrepareRx (pdev, hhid->Report_buf, (uint8_t)(req->wLength));
 800212e:	4628      	mov	r0, r5
      hhid->IsReportAvailable = 1;
 8002130:	64da      	str	r2, [r3, #76]	; 0x4c
      USBD_CtlPrepareRx (pdev, hhid->Report_buf, (uint8_t)(req->wLength));
 8002132:	798a      	ldrb	r2, [r1, #6]
 8002134:	4619      	mov	r1, r3
 8002136:	f000 fb80 	bl	800283a <USBD_CtlPrepareRx>
 800213a:	e7e6      	b.n	800210a <USBD_CUSTOM_HID_Setup+0x2e>
      USBD_CtlError (pdev, req);
 800213c:	4628      	mov	r0, r5
 800213e:	f000 fb40 	bl	80027c2 <USBD_CtlError>
      return USBD_FAIL; 
 8002142:	2402      	movs	r4, #2
}
 8002144:	4620      	mov	r0, r4
 8002146:	bd38      	pop	{r3, r4, r5, pc}
    switch (req->bRequest)
 8002148:	784a      	ldrb	r2, [r1, #1]
 800214a:	2a0a      	cmp	r2, #10
 800214c:	d01a      	beq.n	8002184 <USBD_CUSTOM_HID_Setup+0xa8>
 800214e:	2a0b      	cmp	r2, #11
 8002150:	d01e      	beq.n	8002190 <USBD_CUSTOM_HID_Setup+0xb4>
 8002152:	2a06      	cmp	r2, #6
 8002154:	d1f6      	bne.n	8002144 <USBD_CUSTOM_HID_Setup+0x68>
      if( req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8002156:	884b      	ldrh	r3, [r1, #2]
 8002158:	0a1b      	lsrs	r3, r3, #8
 800215a:	2b22      	cmp	r3, #34	; 0x22
 800215c:	d107      	bne.n	800216e <USBD_CUSTOM_HID_Setup+0x92>
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE , req->wLength);
 800215e:	88ca      	ldrh	r2, [r1, #6]
        pbuf =  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8002160:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE , req->wLength);
 8002164:	2a65      	cmp	r2, #101	; 0x65
 8002166:	bf28      	it	cs
 8002168:	2265      	movcs	r2, #101	; 0x65
        pbuf =  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 800216a:	6819      	ldr	r1, [r3, #0]
 800216c:	e7d2      	b.n	8002114 <USBD_CUSTOM_HID_Setup+0x38>
      else if( req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 800216e:	2b21      	cmp	r3, #33	; 0x21
 8002170:	d105      	bne.n	800217e <USBD_CUSTOM_HID_Setup+0xa2>
        len = MIN(USB_CUSTOM_HID_DESC_SIZ , req->wLength);
 8002172:	88ca      	ldrh	r2, [r1, #6]
        pbuf = USBD_CUSTOM_HID_Desc;   
 8002174:	4908      	ldr	r1, [pc, #32]	; (8002198 <USBD_CUSTOM_HID_Setup+0xbc>)
        len = MIN(USB_CUSTOM_HID_DESC_SIZ , req->wLength);
 8002176:	2a09      	cmp	r2, #9
 8002178:	bf28      	it	cs
 800217a:	2209      	movcs	r2, #9
 800217c:	e7ca      	b.n	8002114 <USBD_CUSTOM_HID_Setup+0x38>
  uint8_t  *pbuf = NULL;
 800217e:	4621      	mov	r1, r4
  uint16_t len = 0;
 8002180:	4622      	mov	r2, r4
 8002182:	e7c7      	b.n	8002114 <USBD_CUSTOM_HID_Setup+0x38>
      USBD_CtlSendData (pdev,
 8002184:	2201      	movs	r2, #1
 8002186:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800218a:	f000 fb41 	bl	8002810 <USBD_CtlSendData>
      break;
 800218e:	e7d9      	b.n	8002144 <USBD_CUSTOM_HID_Setup+0x68>
      hhid->AltSetting = (uint8_t)(req->wValue);
 8002190:	788a      	ldrb	r2, [r1, #2]
 8002192:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 8002194:	e7d6      	b.n	8002144 <USBD_CUSTOM_HID_Setup+0x68>
 8002196:	bf00      	nop
 8002198:	20000068 	.word	0x20000068

0800219c <USBD_CUSTOM_HID_DeInit>:
{
 800219c:	b510      	push	{r4, lr}
 800219e:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 80021a0:	2181      	movs	r1, #129	; 0x81
 80021a2:	f000 fe61 	bl	8002e68 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 80021a6:	2101      	movs	r1, #1
 80021a8:	4620      	mov	r0, r4
 80021aa:	f000 fe5d 	bl	8002e68 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 80021ae:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 80021b2:	b153      	cbz	r3, 80021ca <USBD_CUSTOM_HID_DeInit+0x2e>
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 80021b4:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80021bc:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 80021c0:	f000 feba 	bl	8002f38 <USBD_static_free>
    pdev->pClassData = NULL;
 80021c4:	2300      	movs	r3, #0
 80021c6:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 80021ca:	2000      	movs	r0, #0
 80021cc:	bd10      	pop	{r4, pc}

080021ce <USBD_CUSTOM_HID_Init>:
{
 80021ce:	b570      	push	{r4, r5, r6, lr}
 80021d0:	4605      	mov	r5, r0
  USBD_LL_OpenEP(pdev,
 80021d2:	2302      	movs	r3, #2
 80021d4:	2203      	movs	r2, #3
 80021d6:	2181      	movs	r1, #129	; 0x81
 80021d8:	f000 fe36 	bl	8002e48 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 80021dc:	2302      	movs	r3, #2
 80021de:	2203      	movs	r2, #3
 80021e0:	2101      	movs	r1, #1
 80021e2:	4628      	mov	r0, r5
 80021e4:	f000 fe30 	bl	8002e48 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CUSTOM_HID_HandleTypeDef));
 80021e8:	2054      	movs	r0, #84	; 0x54
 80021ea:	f000 fea1 	bl	8002f30 <USBD_static_malloc>
 80021ee:	4606      	mov	r6, r0
 80021f0:	f8c5 0218 	str.w	r0, [r5, #536]	; 0x218
  if(pdev->pClassData == NULL)
 80021f4:	b170      	cbz	r0, 8002214 <USBD_CUSTOM_HID_Init+0x46>
    hhid->state = CUSTOM_HID_IDLE;
 80021f6:	2400      	movs	r4, #0
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 80021f8:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
    hhid->state = CUSTOM_HID_IDLE;
 80021fc:	f880 4050 	strb.w	r4, [r0, #80]	; 0x50
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	4798      	blx	r3
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf, 
 8002204:	2340      	movs	r3, #64	; 0x40
 8002206:	4632      	mov	r2, r6
 8002208:	2101      	movs	r1, #1
 800220a:	4628      	mov	r0, r5
 800220c:	f000 fe82 	bl	8002f14 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 8002210:	4620      	mov	r0, r4
 8002212:	bd70      	pop	{r4, r5, r6, pc}
    ret = 1; 
 8002214:	2001      	movs	r0, #1
}
 8002216:	bd70      	pop	{r4, r5, r6, pc}

08002218 <USBD_CUSTOM_HID_SendReport>:
{
 8002218:	b510      	push	{r4, lr}
 800221a:	4613      	mov	r3, r2
  if (pdev->dev_state == USBD_STATE_CONFIGURED )
 800221c:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002220:	2a03      	cmp	r2, #3
 8002222:	d10b      	bne.n	800223c <USBD_CUSTOM_HID_SendReport+0x24>
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8002224:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
    if(hhid->state == CUSTOM_HID_IDLE)
 8002228:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 800222c:	b932      	cbnz	r2, 800223c <USBD_CUSTOM_HID_SendReport+0x24>
      hhid->state = CUSTOM_HID_BUSY;
 800222e:	2201      	movs	r2, #1
 8002230:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
      USBD_LL_Transmit (pdev, 
 8002234:	460a      	mov	r2, r1
 8002236:	2181      	movs	r1, #129	; 0x81
 8002238:	f000 fe5e 	bl	8002ef8 <USBD_LL_Transmit>
}
 800223c:	2000      	movs	r0, #0
 800223e:	bd10      	pop	{r4, pc}

08002240 <USBD_CUSTOM_HID_RegisterInterface>:
uint8_t  USBD_CUSTOM_HID_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                             USBD_CUSTOM_HID_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 8002240:	b119      	cbz	r1, 800224a <USBD_CUSTOM_HID_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 8002242:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 8002246:	2000      	movs	r0, #0
 8002248:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 800224a:	2002      	movs	r0, #2
  }
  
  return ret;
}
 800224c:	4770      	bx	lr

0800224e <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800224e:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8002250:	b180      	cbz	r0, 8002274 <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8002252:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002256:	b113      	cbz	r3, 800225e <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8002258:	2300      	movs	r3, #0
 800225a:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800225e:	b109      	cbz	r1, 8002264 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8002260:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8002264:	2301      	movs	r3, #1
  pdev->id = id;
 8002266:	7002      	strb	r2, [r0, #0]
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8002268:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800226c:	f000 fda0 	bl	8002db0 <USBD_LL_Init>
  
  return USBD_OK; 
 8002270:	2000      	movs	r0, #0
 8002272:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 8002274:	2002      	movs	r0, #2
}
 8002276:	bd08      	pop	{r3, pc}

08002278 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8002278:	b119      	cbz	r1, 8002282 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800227a:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 800227e:	2000      	movs	r0, #0
 8002280:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8002282:	2002      	movs	r0, #2
  }
  
  return status;
}
 8002284:	4770      	bx	lr

08002286 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8002286:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8002288:	f000 fdd0 	bl	8002e2c <USBD_LL_Start>
  
  return USBD_OK;  
}
 800228c:	2000      	movs	r0, #0
 800228e:	bd08      	pop	{r3, pc}

08002290 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002290:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8002292:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002296:	b90b      	cbnz	r3, 800229c <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8002298:	2002      	movs	r0, #2
 800229a:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4798      	blx	r3
 80022a0:	2800      	cmp	r0, #0
 80022a2:	d1f9      	bne.n	8002298 <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 80022a4:	bd08      	pop	{r3, pc}

080022a6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80022a6:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 80022a8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	4798      	blx	r3
  return USBD_OK;
}
 80022b0:	2000      	movs	r0, #0
 80022b2:	bd08      	pop	{r3, pc}

080022b4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80022b4:	b538      	push	{r3, r4, r5, lr}

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80022b6:	f500 7502 	add.w	r5, r0, #520	; 0x208
{
 80022ba:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80022bc:	4628      	mov	r0, r5
 80022be:	f000 fa6c 	bl	800279a <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 80022c2:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 80022c4:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 80022c8:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 80022cc:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 80022d0:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 80022d4:	f001 031f 	and.w	r3, r1, #31
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d00e      	beq.n	80022fa <USBD_LL_SetupStage+0x46>
 80022dc:	d307      	bcc.n	80022ee <USBD_LL_SetupStage+0x3a>
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d010      	beq.n	8002304 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 80022e2:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80022e6:	4620      	mov	r0, r4
 80022e8:	f000 fdcc 	bl	8002e84 <USBD_LL_StallEP>
    break;
 80022ec:	e003      	b.n	80022f6 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 80022ee:	4629      	mov	r1, r5
 80022f0:	4620      	mov	r0, r4
 80022f2:	f000 f8d5 	bl	80024a0 <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 80022f6:	2000      	movs	r0, #0
 80022f8:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 80022fa:	4629      	mov	r1, r5
 80022fc:	4620      	mov	r0, r4
 80022fe:	f000 f9d1 	bl	80026a4 <USBD_StdItfReq>
    break;
 8002302:	e7f8      	b.n	80022f6 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 8002304:	4629      	mov	r1, r5
 8002306:	4620      	mov	r0, r4
 8002308:	f000 f9e4 	bl	80026d4 <USBD_StdEPReq>
    break;
 800230c:	e7f3      	b.n	80022f6 <USBD_LL_SetupStage+0x42>

0800230e <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 800230e:	b538      	push	{r3, r4, r5, lr}
 8002310:	4604      	mov	r4, r0
 8002312:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8002314:	bb11      	cbnz	r1, 800235c <USBD_LL_DataOutStage+0x4e>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8002316:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 800231a:	2b03      	cmp	r3, #3
 800231c:	d10f      	bne.n	800233e <USBD_LL_DataOutStage+0x30>
    {
      if(pep->rem_length > pep->maxpacket)
 800231e:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8002322:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 8002326:	4293      	cmp	r3, r2
 8002328:	d90b      	bls.n	8002342 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 800232a:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 800232c:	429a      	cmp	r2, r3
 800232e:	bf28      	it	cs
 8002330:	461a      	movcs	r2, r3
        pep->rem_length -=  pep->maxpacket;
 8002332:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 8002336:	b292      	uxth	r2, r2
 8002338:	4629      	mov	r1, r5
 800233a:	f000 fa8d 	bl	8002858 <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 800233e:	2000      	movs	r0, #0
 8002340:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8002342:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	b123      	cbz	r3, 8002354 <USBD_LL_DataOutStage+0x46>
 800234a:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800234e:	2a03      	cmp	r2, #3
 8002350:	d100      	bne.n	8002354 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev); 
 8002352:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8002354:	4620      	mov	r0, r4
 8002356:	f000 fa87 	bl	8002868 <USBD_CtlSendStatus>
 800235a:	e7f0      	b.n	800233e <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL)&&
 800235c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0eb      	beq.n	800233e <USBD_LL_DataOutStage+0x30>
 8002366:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800236a:	2a03      	cmp	r2, #3
 800236c:	d1e7      	bne.n	800233e <USBD_LL_DataOutStage+0x30>
    pdev->pClass->DataOut(pdev, epnum); 
 800236e:	4798      	blx	r3
 8002370:	e7e5      	b.n	800233e <USBD_LL_DataOutStage+0x30>

08002372 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8002372:	b570      	push	{r4, r5, r6, lr}
 8002374:	4613      	mov	r3, r2
 8002376:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8002378:	460e      	mov	r6, r1
 800237a:	2900      	cmp	r1, #0
 800237c:	d13d      	bne.n	80023fa <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800237e:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8002382:	2a02      	cmp	r2, #2
 8002384:	d10f      	bne.n	80023a6 <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 8002386:	69c5      	ldr	r5, [r0, #28]
 8002388:	6a02      	ldr	r2, [r0, #32]
 800238a:	4295      	cmp	r5, r2
 800238c:	d914      	bls.n	80023b8 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 800238e:	1aaa      	subs	r2, r5, r2
 8002390:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 8002392:	4619      	mov	r1, r3
 8002394:	b292      	uxth	r2, r2
 8002396:	f000 fa48 	bl	800282a <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 800239a:	4633      	mov	r3, r6
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 800239c:	461a      	mov	r2, r3
 800239e:	4619      	mov	r1, r3
 80023a0:	4620      	mov	r0, r4
 80023a2:	f000 fdb7 	bl	8002f14 <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 80023a6:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d102      	bne.n	80023b4 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 80023ae:	2300      	movs	r3, #0
 80023b0:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 80023b4:	2000      	movs	r0, #0
 80023b6:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 80023b8:	6983      	ldr	r3, [r0, #24]
 80023ba:	fbb3 f5f2 	udiv	r5, r3, r2
 80023be:	fb02 3515 	mls	r5, r2, r5, r3
 80023c2:	b965      	cbnz	r5, 80023de <USBD_LL_DataInStage+0x6c>
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d80a      	bhi.n	80023de <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 80023c8:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d206      	bcs.n	80023de <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 80023d0:	462a      	mov	r2, r5
 80023d2:	f000 fa2a 	bl	800282a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 80023d6:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 80023da:	462b      	mov	r3, r5
 80023dc:	e7de      	b.n	800239c <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80023de:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	b12b      	cbz	r3, 80023f2 <USBD_LL_DataInStage+0x80>
 80023e6:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 80023ea:	2a03      	cmp	r2, #3
 80023ec:	d101      	bne.n	80023f2 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 80023ee:	4620      	mov	r0, r4
 80023f0:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 80023f2:	4620      	mov	r0, r4
 80023f4:	f000 fa43 	bl	800287e <USBD_CtlReceiveStatus>
 80023f8:	e7d5      	b.n	80023a6 <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 80023fa:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80023fe:	695b      	ldr	r3, [r3, #20]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d0d7      	beq.n	80023b4 <USBD_LL_DataInStage+0x42>
 8002404:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002408:	2a03      	cmp	r2, #3
 800240a:	d1d3      	bne.n	80023b4 <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 800240c:	4798      	blx	r3
 800240e:	e7d1      	b.n	80023b4 <USBD_LL_DataInStage+0x42>

08002410 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8002410:	2200      	movs	r2, #0
{
 8002412:	b538      	push	{r3, r4, r5, lr}
 8002414:	4604      	mov	r4, r0
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002416:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 8002418:	4611      	mov	r1, r2
 800241a:	2340      	movs	r3, #64	; 0x40
 800241c:	f000 fd14 	bl	8002e48 <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8002420:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002422:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 8002426:	2200      	movs	r2, #0
 8002428:	2180      	movs	r1, #128	; 0x80
 800242a:	4620      	mov	r0, r4
 800242c:	f000 fd0c 	bl	8002e48 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002430:	2301      	movs	r3, #1
 8002432:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8002436:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800243a:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 800243c:	b12b      	cbz	r3, 800244a <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800243e:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002442:	7921      	ldrb	r1, [r4, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	4620      	mov	r0, r4
 8002448:	4798      	blx	r3
 
  
  return USBD_OK;
}
 800244a:	2000      	movs	r0, #0
 800244c:	bd38      	pop	{r3, r4, r5, pc}

0800244e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800244e:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8002450:	2000      	movs	r0, #0
 8002452:	4770      	bx	lr

08002454 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8002454:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002458:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800245c:	2304      	movs	r3, #4
 800245e:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8002462:	2000      	movs	r0, #0
 8002464:	4770      	bx	lr

08002466 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8002466:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 800246a:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 800246e:	2000      	movs	r0, #0
 8002470:	4770      	bx	lr

08002472 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8002472:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8002474:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002478:	2a03      	cmp	r2, #3
 800247a:	d104      	bne.n	8002486 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 800247c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	b103      	cbz	r3, 8002486 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8002484:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8002486:	2000      	movs	r0, #0
 8002488:	bd08      	pop	{r3, pc}

0800248a <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 800248a:	b510      	push	{r4, lr}
 800248c:	4604      	mov	r4, r0
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 800248e:	2180      	movs	r1, #128	; 0x80
 8002490:	f000 fcf8 	bl	8002e84 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8002494:	4620      	mov	r0, r4
}
 8002496:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 800249a:	2100      	movs	r1, #0
 800249c:	f000 bcf2 	b.w	8002e84 <USBD_LL_StallEP>

080024a0 <USBD_StdDevReq>:
{
 80024a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 80024a2:	784b      	ldrb	r3, [r1, #1]
{
 80024a4:	4604      	mov	r4, r0
 80024a6:	460d      	mov	r5, r1
  switch (req->bRequest) 
 80024a8:	2b09      	cmp	r3, #9
 80024aa:	f200 8081 	bhi.w	80025b0 <USBD_StdDevReq+0x110>
 80024ae:	e8df f013 	tbh	[pc, r3, lsl #1]
 80024b2:	00d0      	.short	0x00d0
 80024b4:	007f00ec 	.word	0x007f00ec
 80024b8:	007f00e0 	.word	0x007f00e0
 80024bc:	000a0074 	.word	0x000a0074
 80024c0:	00c0007f 	.word	0x00c0007f
 80024c4:	0094      	.short	0x0094
  switch (req->wValue >> 8)
 80024c6:	8849      	ldrh	r1, [r1, #2]
 80024c8:	0a0b      	lsrs	r3, r1, #8
 80024ca:	3b01      	subs	r3, #1
 80024cc:	2b06      	cmp	r3, #6
 80024ce:	d86f      	bhi.n	80025b0 <USBD_StdDevReq+0x110>
 80024d0:	e8df f003 	tbb	[pc, r3]
 80024d4:	6e291c04 	.word	0x6e291c04
 80024d8:	506e      	.short	0x506e
 80024da:	59          	.byte	0x59
 80024db:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80024dc:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80024e0:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80024e2:	f10d 0106 	add.w	r1, sp, #6
 80024e6:	7c20      	ldrb	r0, [r4, #16]
 80024e8:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 80024ea:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80024ee:	2a00      	cmp	r2, #0
 80024f0:	d06e      	beq.n	80025d0 <USBD_StdDevReq+0x130>
 80024f2:	88eb      	ldrh	r3, [r5, #6]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d06b      	beq.n	80025d0 <USBD_StdDevReq+0x130>
    len = MIN(len , req->wLength);
 80024f8:	429a      	cmp	r2, r3
 80024fa:	bf28      	it	cs
 80024fc:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, 
 80024fe:	4601      	mov	r1, r0
    len = MIN(len , req->wLength);
 8002500:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 8002504:	4620      	mov	r0, r4
 8002506:	f000 f983 	bl	8002810 <USBD_CtlSendData>
 800250a:	e061      	b.n	80025d0 <USBD_StdDevReq+0x130>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 800250c:	7c02      	ldrb	r2, [r0, #16]
 800250e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002512:	b932      	cbnz	r2, 8002522 <USBD_StdDevReq+0x82>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8002514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8002516:	f10d 0006 	add.w	r0, sp, #6
 800251a:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800251c:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800251e:	7043      	strb	r3, [r0, #1]
 8002520:	e7e3      	b.n	80024ea <USBD_StdDevReq+0x4a>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8002522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002524:	e7f7      	b.n	8002516 <USBD_StdDevReq+0x76>
    switch ((uint8_t)(req->wValue))
 8002526:	b2c9      	uxtb	r1, r1
 8002528:	2905      	cmp	r1, #5
 800252a:	d81c      	bhi.n	8002566 <USBD_StdDevReq+0xc6>
 800252c:	e8df f001 	tbb	[pc, r1]
 8002530:	0f0b0703 	.word	0x0f0b0703
 8002534:	1713      	.short	0x1713
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8002536:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	e7d1      	b.n	80024e2 <USBD_StdDevReq+0x42>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800253e:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	e7cd      	b.n	80024e2 <USBD_StdDevReq+0x42>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8002546:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	e7c9      	b.n	80024e2 <USBD_StdDevReq+0x42>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800254e:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	e7c5      	b.n	80024e2 <USBD_StdDevReq+0x42>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8002556:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800255a:	695b      	ldr	r3, [r3, #20]
 800255c:	e7c1      	b.n	80024e2 <USBD_StdDevReq+0x42>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800255e:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	e7bd      	b.n	80024e2 <USBD_StdDevReq+0x42>
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
 8002566:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800256a:	f10d 0206 	add.w	r2, sp, #6
 800256e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002570:	4798      	blx	r3
 8002572:	e7ba      	b.n	80024ea <USBD_StdDevReq+0x4a>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8002574:	7c03      	ldrb	r3, [r0, #16]
 8002576:	b9db      	cbnz	r3, 80025b0 <USBD_StdDevReq+0x110>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8002578:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800257c:	f10d 0006 	add.w	r0, sp, #6
 8002580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002582:	4798      	blx	r3
 8002584:	e7b1      	b.n	80024ea <USBD_StdDevReq+0x4a>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8002586:	7c03      	ldrb	r3, [r0, #16]
 8002588:	b993      	cbnz	r3, 80025b0 <USBD_StdDevReq+0x110>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800258a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800258e:	f10d 0006 	add.w	r0, sp, #6
 8002592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002594:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002596:	2307      	movs	r3, #7
 8002598:	e7c1      	b.n	800251e <USBD_StdDevReq+0x7e>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 800259a:	888b      	ldrh	r3, [r1, #4]
 800259c:	b943      	cbnz	r3, 80025b0 <USBD_StdDevReq+0x110>
 800259e:	88cb      	ldrh	r3, [r1, #6]
 80025a0:	b933      	cbnz	r3, 80025b0 <USBD_StdDevReq+0x110>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80025a2:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80025a6:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80025a8:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80025aa:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80025ae:	d103      	bne.n	80025b8 <USBD_StdDevReq+0x118>
    USBD_CtlError(pdev , req);
 80025b0:	4620      	mov	r0, r4
 80025b2:	f7ff ff6a 	bl	800248a <USBD_CtlError.constprop.0>
    break;
 80025b6:	e00b      	b.n	80025d0 <USBD_StdDevReq+0x130>
      pdev->dev_address = dev_addr;
 80025b8:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 80025bc:	4629      	mov	r1, r5
 80025be:	f000 fc8d 	bl	8002edc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 80025c2:	4620      	mov	r0, r4
 80025c4:	f000 f950 	bl	8002868 <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 80025c8:	b12d      	cbz	r5, 80025d6 <USBD_StdDevReq+0x136>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 80025ca:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80025cc:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 80025d0:	2000      	movs	r0, #0
 80025d2:	b003      	add	sp, #12
 80025d4:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80025d6:	2301      	movs	r3, #1
 80025d8:	e7f8      	b.n	80025cc <USBD_StdDevReq+0x12c>
  cfgidx = (uint8_t)(req->wValue);                 
 80025da:	7889      	ldrb	r1, [r1, #2]
 80025dc:	4d30      	ldr	r5, [pc, #192]	; (80026a0 <USBD_StdDevReq+0x200>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80025de:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 80025e0:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80025e2:	d8e5      	bhi.n	80025b0 <USBD_StdDevReq+0x110>
    switch (pdev->dev_state) 
 80025e4:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d00c      	beq.n	8002606 <USBD_StdDevReq+0x166>
 80025ec:	2b03      	cmp	r3, #3
 80025ee:	d1df      	bne.n	80025b0 <USBD_StdDevReq+0x110>
      if (cfgidx == 0) 
 80025f0:	b9b1      	cbnz	r1, 8002620 <USBD_StdDevReq+0x180>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80025f2:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;          
 80025f4:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80025f6:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        USBD_ClrClassConfig(pdev , cfgidx);
 80025fa:	f7ff fe54 	bl	80022a6 <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 80025fe:	4620      	mov	r0, r4
 8002600:	f000 f932 	bl	8002868 <USBD_CtlSendStatus>
 8002604:	e7e4      	b.n	80025d0 <USBD_StdDevReq+0x130>
      if (cfgidx) 
 8002606:	2900      	cmp	r1, #0
 8002608:	d0f9      	beq.n	80025fe <USBD_StdDevReq+0x15e>
        pdev->dev_config = cfgidx;
 800260a:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800260c:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 800260e:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8002610:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8002614:	4620      	mov	r0, r4
 8002616:	f7ff fe3b 	bl	8002290 <USBD_SetClassConfig>
 800261a:	2802      	cmp	r0, #2
 800261c:	d1ef      	bne.n	80025fe <USBD_StdDevReq+0x15e>
 800261e:	e7c7      	b.n	80025b0 <USBD_StdDevReq+0x110>
      else  if (cfgidx != pdev->dev_config) 
 8002620:	6841      	ldr	r1, [r0, #4]
 8002622:	2901      	cmp	r1, #1
 8002624:	d0eb      	beq.n	80025fe <USBD_StdDevReq+0x15e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8002626:	b2c9      	uxtb	r1, r1
 8002628:	f7ff fe3d 	bl	80022a6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800262c:	7829      	ldrb	r1, [r5, #0]
 800262e:	6061      	str	r1, [r4, #4]
 8002630:	e7f0      	b.n	8002614 <USBD_StdDevReq+0x174>
  if (req->wLength != 1) 
 8002632:	88ca      	ldrh	r2, [r1, #6]
 8002634:	2a01      	cmp	r2, #1
 8002636:	d1bb      	bne.n	80025b0 <USBD_StdDevReq+0x110>
    switch (pdev->dev_state )  
 8002638:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800263c:	2b02      	cmp	r3, #2
 800263e:	d003      	beq.n	8002648 <USBD_StdDevReq+0x1a8>
 8002640:	2b03      	cmp	r3, #3
 8002642:	d1b5      	bne.n	80025b0 <USBD_StdDevReq+0x110>
      USBD_CtlSendData (pdev, 
 8002644:	1d01      	adds	r1, r0, #4
 8002646:	e75d      	b.n	8002504 <USBD_StdDevReq+0x64>
      pdev->dev_default_config = 0;
 8002648:	4601      	mov	r1, r0
 800264a:	2300      	movs	r3, #0
 800264c:	f841 3f08 	str.w	r3, [r1, #8]!
 8002650:	e758      	b.n	8002504 <USBD_StdDevReq+0x64>
  switch (pdev->dev_state) 
 8002652:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002656:	3b02      	subs	r3, #2
 8002658:	2b01      	cmp	r3, #1
 800265a:	d8a9      	bhi.n	80025b0 <USBD_StdDevReq+0x110>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 800265c:	2301      	movs	r3, #1
 800265e:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 8002660:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8002664:	b10b      	cbz	r3, 800266a <USBD_StdDevReq+0x1ca>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8002666:	2303      	movs	r3, #3
 8002668:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 800266a:	2202      	movs	r2, #2
 800266c:	f104 010c 	add.w	r1, r4, #12
 8002670:	e748      	b.n	8002504 <USBD_StdDevReq+0x64>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8002672:	884b      	ldrh	r3, [r1, #2]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d1ab      	bne.n	80025d0 <USBD_StdDevReq+0x130>
      pdev->dev_remote_wakeup = 0; 
 8002678:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 800267c:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002680:	4629      	mov	r1, r5
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	4620      	mov	r0, r4
 8002686:	4798      	blx	r3
 8002688:	e7b9      	b.n	80025fe <USBD_StdDevReq+0x15e>
  switch (pdev->dev_state)
 800268a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800268e:	3b02      	subs	r3, #2
 8002690:	2b01      	cmp	r3, #1
 8002692:	d88d      	bhi.n	80025b0 <USBD_StdDevReq+0x110>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8002694:	884b      	ldrh	r3, [r1, #2]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d19a      	bne.n	80025d0 <USBD_StdDevReq+0x130>
      pdev->dev_remote_wakeup = 0; 
 800269a:	2300      	movs	r3, #0
 800269c:	e7ec      	b.n	8002678 <USBD_StdDevReq+0x1d8>
 800269e:	bf00      	nop
 80026a0:	2000014c 	.word	0x2000014c

080026a4 <USBD_StdItfReq>:
{
 80026a4:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 80026a6:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
{
 80026aa:	4604      	mov	r4, r0
  switch (pdev->dev_state) 
 80026ac:	2b03      	cmp	r3, #3
{
 80026ae:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 80026b0:	d10d      	bne.n	80026ce <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 80026b2:	790b      	ldrb	r3, [r1, #4]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d80a      	bhi.n	80026ce <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 80026b8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 80026c0:	88eb      	ldrh	r3, [r5, #6]
 80026c2:	b913      	cbnz	r3, 80026ca <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 80026c4:	4620      	mov	r0, r4
 80026c6:	f000 f8cf 	bl	8002868 <USBD_CtlSendStatus>
}
 80026ca:	2000      	movs	r0, #0
 80026cc:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 80026ce:	f7ff fedc 	bl	800248a <USBD_CtlError.constprop.0>
    break;
 80026d2:	e7fa      	b.n	80026ca <USBD_StdItfReq+0x26>

080026d4 <USBD_StdEPReq>:
{
 80026d4:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 80026d6:	780a      	ldrb	r2, [r1, #0]
  ep_addr  = LOBYTE(req->wIndex);   
 80026d8:	888e      	ldrh	r6, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 80026da:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80026de:	2a20      	cmp	r2, #32
{
 80026e0:	4604      	mov	r4, r0
 80026e2:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 80026e4:	b2f3      	uxtb	r3, r6
  if ((req->bmRequest & 0x60) == 0x20)
 80026e6:	d105      	bne.n	80026f4 <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 80026e8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	4798      	blx	r3
}
 80026f0:	2000      	movs	r0, #0
 80026f2:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 80026f4:	784a      	ldrb	r2, [r1, #1]
 80026f6:	2a01      	cmp	r2, #1
 80026f8:	d01c      	beq.n	8002734 <USBD_StdEPReq+0x60>
 80026fa:	d32a      	bcc.n	8002752 <USBD_StdEPReq+0x7e>
 80026fc:	2a03      	cmp	r2, #3
 80026fe:	d1f7      	bne.n	80026f0 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8002700:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002704:	2a02      	cmp	r2, #2
 8002706:	d040      	beq.n	800278a <USBD_StdEPReq+0xb6>
 8002708:	2a03      	cmp	r2, #3
 800270a:	d002      	beq.n	8002712 <USBD_StdEPReq+0x3e>
      USBD_CtlError(pdev , req);
 800270c:	f7ff febd 	bl	800248a <USBD_CtlError.constprop.0>
      break;
 8002710:	e7ee      	b.n	80026f0 <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8002712:	884a      	ldrh	r2, [r1, #2]
 8002714:	b922      	cbnz	r2, 8002720 <USBD_StdEPReq+0x4c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8002716:	065e      	lsls	r6, r3, #25
 8002718:	d002      	beq.n	8002720 <USBD_StdEPReq+0x4c>
          USBD_LL_StallEP(pdev , ep_addr);
 800271a:	4619      	mov	r1, r3
 800271c:	f000 fbb2 	bl	8002e84 <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 8002720:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002724:	4629      	mov	r1, r5
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	4620      	mov	r0, r4
 800272a:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800272c:	4620      	mov	r0, r4
 800272e:	f000 f89b 	bl	8002868 <USBD_CtlSendStatus>
 8002732:	e7dd      	b.n	80026f0 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8002734:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002738:	2a02      	cmp	r2, #2
 800273a:	d026      	beq.n	800278a <USBD_StdEPReq+0xb6>
 800273c:	2a03      	cmp	r2, #3
 800273e:	d1e5      	bne.n	800270c <USBD_StdEPReq+0x38>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8002740:	884a      	ldrh	r2, [r1, #2]
 8002742:	2a00      	cmp	r2, #0
 8002744:	d1d4      	bne.n	80026f0 <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 8002746:	0659      	lsls	r1, r3, #25
 8002748:	d0f0      	beq.n	800272c <USBD_StdEPReq+0x58>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 800274a:	4619      	mov	r1, r3
 800274c:	f000 fba8 	bl	8002ea0 <USBD_LL_ClearStallEP>
 8002750:	e7e6      	b.n	8002720 <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 8002752:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002756:	2a02      	cmp	r2, #2
 8002758:	d017      	beq.n	800278a <USBD_StdEPReq+0xb6>
 800275a:	2a03      	cmp	r2, #3
 800275c:	d1d6      	bne.n	800270c <USBD_StdEPReq+0x38>
 800275e:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8002762:	f016 0f80 	tst.w	r6, #128	; 0x80
 8002766:	eb00 1505 	add.w	r5, r0, r5, lsl #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 800276a:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800276c:	bf14      	ite	ne
 800276e:	3514      	addne	r5, #20
 8002770:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8002774:	f000 fba2 	bl	8002ebc <USBD_LL_IsStallEP>
 8002778:	b168      	cbz	r0, 8002796 <USBD_StdEPReq+0xc2>
        pep->status = 0x0001;     
 800277a:	2301      	movs	r3, #1
 800277c:	602b      	str	r3, [r5, #0]
      USBD_CtlSendData (pdev,
 800277e:	2202      	movs	r2, #2
 8002780:	4629      	mov	r1, r5
 8002782:	4620      	mov	r0, r4
 8002784:	f000 f844 	bl	8002810 <USBD_CtlSendData>
      break;
 8002788:	e7b2      	b.n	80026f0 <USBD_StdEPReq+0x1c>
      if ((ep_addr & 0x7F) != 0x00) 
 800278a:	065a      	lsls	r2, r3, #25
 800278c:	d0b0      	beq.n	80026f0 <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 800278e:	4619      	mov	r1, r3
 8002790:	f000 fb78 	bl	8002e84 <USBD_LL_StallEP>
 8002794:	e7ac      	b.n	80026f0 <USBD_StdEPReq+0x1c>
        pep->status = 0x0000;  
 8002796:	6028      	str	r0, [r5, #0]
 8002798:	e7f1      	b.n	800277e <USBD_StdEPReq+0xaa>

0800279a <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 800279a:	780b      	ldrb	r3, [r1, #0]
 800279c:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800279e:	784b      	ldrb	r3, [r1, #1]
 80027a0:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80027a2:	78ca      	ldrb	r2, [r1, #3]
 80027a4:	788b      	ldrb	r3, [r1, #2]
 80027a6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80027aa:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80027ac:	794a      	ldrb	r2, [r1, #5]
 80027ae:	790b      	ldrb	r3, [r1, #4]
 80027b0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80027b4:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80027b6:	79ca      	ldrb	r2, [r1, #7]
 80027b8:	798b      	ldrb	r3, [r1, #6]
 80027ba:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80027be:	80c3      	strh	r3, [r0, #6]
 80027c0:	4770      	bx	lr

080027c2 <USBD_CtlError>:
{
 80027c2:	b510      	push	{r4, lr}
 80027c4:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 80027c6:	2180      	movs	r1, #128	; 0x80
 80027c8:	f000 fb5c 	bl	8002e84 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 80027cc:	4620      	mov	r0, r4
}
 80027ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 80027d2:	2100      	movs	r1, #0
 80027d4:	f000 bb56 	b.w	8002e84 <USBD_LL_StallEP>

080027d8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80027d8:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 80027da:	b188      	cbz	r0, 8002800 <USBD_GetString+0x28>
 80027dc:	4605      	mov	r5, r0
 80027de:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 80027e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2c00      	cmp	r4, #0
 80027e8:	d1f9      	bne.n	80027de <USBD_GetString+0x6>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	3302      	adds	r3, #2
 80027ee:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 80027f0:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 80027f2:	2303      	movs	r3, #3
 80027f4:	704b      	strb	r3, [r1, #1]
 80027f6:	2302      	movs	r3, #2
 80027f8:	3801      	subs	r0, #1
    while (*desc != '\0') 
 80027fa:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80027fe:	b905      	cbnz	r5, 8002802 <USBD_GetString+0x2a>
 8002800:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8002802:	1c5a      	adds	r2, r3, #1
 8002804:	54cd      	strb	r5, [r1, r3]
 8002806:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0x00;
 8002808:	3302      	adds	r3, #2
 800280a:	b2db      	uxtb	r3, r3
 800280c:	548c      	strb	r4, [r1, r2]
 800280e:	e7f4      	b.n	80027fa <USBD_GetString+0x22>

08002810 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8002810:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8002812:	2202      	movs	r2, #2
{
 8002814:	b510      	push	{r4, lr}
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8002816:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 800281a:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800281c:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 800281e:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8002820:	2100      	movs	r1, #0
 8002822:	f000 fb69 	bl	8002ef8 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002826:	2000      	movs	r0, #0
 8002828:	bd10      	pop	{r4, pc}

0800282a <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 800282a:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 800282c:	4613      	mov	r3, r2
 800282e:	460a      	mov	r2, r1
 8002830:	2100      	movs	r1, #0
 8002832:	f000 fb61 	bl	8002ef8 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002836:	2000      	movs	r0, #0
 8002838:	bd08      	pop	{r3, pc}

0800283a <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 800283a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 800283c:	2203      	movs	r2, #3
{
 800283e:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8002840:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8002844:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8002848:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 800284a:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  USBD_LL_PrepareReceive (pdev,
 800284e:	2100      	movs	r1, #0
 8002850:	f000 fb60 	bl	8002f14 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 8002854:	2000      	movs	r0, #0
 8002856:	bd10      	pop	{r4, pc}

08002858 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8002858:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 800285a:	4613      	mov	r3, r2
 800285c:	460a      	mov	r2, r1
 800285e:	2100      	movs	r1, #0
 8002860:	f000 fb58 	bl	8002f14 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8002864:	2000      	movs	r0, #0
 8002866:	bd08      	pop	{r3, pc}

08002868 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8002868:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800286a:	2304      	movs	r3, #4
 800286c:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8002870:	2300      	movs	r3, #0
 8002872:	461a      	mov	r2, r3
 8002874:	4619      	mov	r1, r3
 8002876:	f000 fb3f 	bl	8002ef8 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800287a:	2000      	movs	r0, #0
 800287c:	bd08      	pop	{r3, pc}

0800287e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 800287e:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8002880:	2305      	movs	r3, #5
 8002882:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8002886:	2300      	movs	r3, #0
 8002888:	461a      	mov	r2, r3
 800288a:	4619      	mov	r1, r3
 800288c:	f000 fb42 	bl	8002f14 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 8002890:	2000      	movs	r0, #0
 8002892:	bd08      	pop	{r3, pc}

08002894 <SystemClock_Config>:
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002894:	f44f 3380 	mov.w	r3, #65536	; 0x10000
{
 8002898:	b510      	push	{r4, lr}
 800289a:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800289c:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800289e:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80028a0:	2100      	movs	r1, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028a2:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80028a4:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80028a6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028aa:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80028ac:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80028ae:	910c      	str	r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028b0:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028b2:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80028b4:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028b6:	f7fe fc4b 	bl	8001150 <HAL_RCC_OscConfig>
 80028ba:	b100      	cbz	r0, 80028be <SystemClock_Config+0x2a>
 80028bc:	e7fe      	b.n	80028bc <SystemClock_Config+0x28>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028be:	230f      	movs	r3, #15
 80028c0:	9305      	str	r3, [sp, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80028c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028c6:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028c8:	9009      	str	r0, [sp, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80028ca:	4621      	mov	r1, r4
 80028cc:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028ce:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80028d0:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80028d2:	f7fe fe07 	bl	80014e4 <HAL_RCC_ClockConfig>
 80028d6:	b100      	cbz	r0, 80028da <SystemClock_Config+0x46>
 80028d8:	e7fe      	b.n	80028d8 <SystemClock_Config+0x44>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80028da:	2312      	movs	r3, #18
 80028dc:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80028de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80028e2:	9004      	str	r0, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028e4:	a801      	add	r0, sp, #4
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80028e6:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028e8:	f7fe feb6 	bl	8001658 <HAL_RCCEx_PeriphCLKConfig>
 80028ec:	4604      	mov	r4, r0
 80028ee:	b100      	cbz	r0, 80028f2 <SystemClock_Config+0x5e>
 80028f0:	e7fe      	b.n	80028f0 <SystemClock_Config+0x5c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80028f2:	f7fe fe9b 	bl	800162c <HAL_RCC_GetHCLKFreq>
 80028f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028fa:	fbb0 f0f3 	udiv	r0, r0, r3
 80028fe:	f7fd ff37 	bl	8000770 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002902:	2004      	movs	r0, #4
 8002904:	f7fd ff4a 	bl	800079c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002908:	4622      	mov	r2, r4
 800290a:	4621      	mov	r1, r4
 800290c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002910:	f7fd feee 	bl	80006f0 <HAL_NVIC_SetPriority>
}
 8002914:	b014      	add	sp, #80	; 0x50
 8002916:	bd10      	pop	{r4, pc}

08002918 <ADCChangeChannel>:
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */
void ADCChangeChannel(uint32_t channel){
 8002918:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	ADC_ChannelConfTypeDef sConfig;

	sConfig.Channel = channel;
	sConfig.Rank = 1;
 800291a:	2301      	movs	r3, #1
 800291c:	9302      	str	r3, [sp, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800291e:	2300      	movs	r3, #0
	sConfig.Channel = channel;
 8002920:	9001      	str	r0, [sp, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002922:	a901      	add	r1, sp, #4
 8002924:	4804      	ldr	r0, [pc, #16]	; (8002938 <ADCChangeChannel+0x20>)
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002926:	9303      	str	r3, [sp, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002928:	f7fd fcf6 	bl	8000318 <HAL_ADC_ConfigChannel>
 800292c:	b100      	cbz	r0, 8002930 <ADCChangeChannel+0x18>
 800292e:	e7fe      	b.n	800292e <ADCChangeChannel+0x16>
	{
		_Error_Handler(__FILE__, __LINE__);
	}
}
 8002930:	b005      	add	sp, #20
 8002932:	f85d fb04 	ldr.w	pc, [sp], #4
 8002936:	bf00      	nop
 8002938:	200001cc 	.word	0x200001cc

0800293c <ADCNext>:
uint32_t ADCNext(uint32_t adcnow){
 800293c:	b538      	push	{r3, r4, r5, lr}
	uint32_t adc_ret = 0;
	ADCChangeChannel(adcnow);				//configure adc to GPIO PA1
	HAL_ADC_Start(&hadc1);						//Do initial conversion
 800293e:	4c09      	ldr	r4, [pc, #36]	; (8002964 <ADCNext+0x28>)
	ADCChangeChannel(adcnow);				//configure adc to GPIO PA1
 8002940:	f7ff ffea 	bl	8002918 <ADCChangeChannel>
	HAL_ADC_Start(&hadc1);						//Do initial conversion
 8002944:	4620      	mov	r0, r4
 8002946:	f7fd fda3 	bl	8000490 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 200);
 800294a:	21c8      	movs	r1, #200	; 0xc8
 800294c:	4620      	mov	r0, r4
 800294e:	f7fd fc41 	bl	80001d4 <HAL_ADC_PollForConversion>
	adc_ret = HAL_ADC_GetValue(&hadc1);		//initialize variable for adc conversions
 8002952:	4620      	mov	r0, r4
 8002954:	f7fd fcdc 	bl	8000310 <HAL_ADC_GetValue>
 8002958:	4605      	mov	r5, r0
	HAL_ADC_Stop(&hadc1);
 800295a:	4620      	mov	r0, r4
 800295c:	f7fd fe9c 	bl	8000698 <HAL_ADC_Stop>
	return adc_ret;
}
 8002960:	4628      	mov	r0, r5
 8002962:	bd38      	pop	{r3, r4, r5, pc}
 8002964:	200001cc 	.word	0x200001cc

08002968 <main>:
	customHID.buttons = 0;
 8002968:	2400      	movs	r4, #0
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b08c      	sub	sp, #48	; 0x30
	customHID.buttons = 0;
 800296e:	f88d 400c 	strb.w	r4, [sp, #12]
	customHID.x = 0;
 8002972:	f88d 400d 	strb.w	r4, [sp, #13]
	customHID.y = 0;
 8002976:	f88d 400e 	strb.w	r4, [sp, #14]
	customHID.wheel = 0;
 800297a:	f88d 400f 	strb.w	r4, [sp, #15]
	customHID.modifier = 0;
 800297e:	f88d 4010 	strb.w	r4, [sp, #16]
	customHID.key[0] = 0;
 8002982:	f88d 4011 	strb.w	r4, [sp, #17]
	customHID.key[1] = 0;
 8002986:	f88d 4012 	strb.w	r4, [sp, #18]
	customHID.key[2] = 0;
 800298a:	f88d 4013 	strb.w	r4, [sp, #19]
	customHID.key[3] = 0;
 800298e:	f88d 4014 	strb.w	r4, [sp, #20]
	customHID.key[4] = 0;
 8002992:	f88d 4015 	strb.w	r4, [sp, #21]
	customHID.key[5] = 0;
 8002996:	f88d 4016 	strb.w	r4, [sp, #22]
  HAL_Init();
 800299a:	f7fd fbeb 	bl	8000174 <HAL_Init>
  SystemClock_Config();
 800299e:	f7ff ff79 	bl	8002894 <SystemClock_Config>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80029a2:	4b69      	ldr	r3, [pc, #420]	; (8002b48 <main+0x1e0>)
  HAL_GPIO_WritePin(GPIOB, BTN_A_Pin|BTN_B_Pin|BTN_C_Pin|BTN_D_Pin, GPIO_PIN_RESET);
 80029a4:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80029a8:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, BTN_A_Pin|BTN_B_Pin|BTN_C_Pin|BTN_D_Pin, GPIO_PIN_RESET);
 80029aa:	4868      	ldr	r0, [pc, #416]	; (8002b4c <main+0x1e4>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80029ac:	f042 0220 	orr.w	r2, r2, #32
 80029b0:	619a      	str	r2, [r3, #24]
 80029b2:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029b4:	2601      	movs	r6, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80029b6:	f002 0220 	and.w	r2, r2, #32
 80029ba:	9200      	str	r2, [sp, #0]
 80029bc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029be:	699a      	ldr	r2, [r3, #24]
  hadc1.Instance = ADC1;
 80029c0:	4d63      	ldr	r5, [pc, #396]	; (8002b50 <main+0x1e8>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029c2:	f042 0204 	orr.w	r2, r2, #4
 80029c6:	619a      	str	r2, [r3, #24]
 80029c8:	699a      	ldr	r2, [r3, #24]
 80029ca:	f002 0204 	and.w	r2, r2, #4
 80029ce:	9201      	str	r2, [sp, #4]
 80029d0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029d2:	699a      	ldr	r2, [r3, #24]
 80029d4:	f042 0208 	orr.w	r2, r2, #8
 80029d8:	619a      	str	r2, [r3, #24]
 80029da:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, BTN_A_Pin|BTN_B_Pin|BTN_C_Pin|BTN_D_Pin, GPIO_PIN_RESET);
 80029dc:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029de:	f003 0308 	and.w	r3, r3, #8
 80029e2:	9302      	str	r3, [sp, #8]
 80029e4:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, BTN_A_Pin|BTN_B_Pin|BTN_C_Pin|BTN_D_Pin, GPIO_PIN_RESET);
 80029e6:	f7fd ffcb 	bl	8000980 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = BTN_2_Pin|BTN_3_Pin|BTN_4_Pin|BTN_1_Pin;
 80029ea:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029ee:	a906      	add	r1, sp, #24
 80029f0:	4856      	ldr	r0, [pc, #344]	; (8002b4c <main+0x1e4>)
  GPIO_InitStruct.Pin = BTN_2_Pin|BTN_3_Pin|BTN_4_Pin|BTN_1_Pin;
 80029f2:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029f4:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029f6:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029f8:	f7fd fee2 	bl	80007c0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BTN_A_Pin|BTN_B_Pin|BTN_C_Pin|BTN_D_Pin;
 80029fc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002a00:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a02:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a04:	4851      	ldr	r0, [pc, #324]	; (8002b4c <main+0x1e4>)
 8002a06:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a08:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a0a:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a0c:	f7fd fed8 	bl	80007c0 <HAL_GPIO_Init>
  MX_USB_DEVICE_Init();
 8002a10:	f000 f95a 	bl	8002cc8 <MX_USB_DEVICE_Init>
  hadc1.Instance = ADC1;
 8002a14:	4b4f      	ldr	r3, [pc, #316]	; (8002b54 <main+0x1ec>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002a16:	4628      	mov	r0, r5
  hadc1.Instance = ADC1;
 8002a18:	602b      	str	r3, [r5, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002a1a:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002a1e:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002a20:	60ec      	str	r4, [r5, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002a22:	616c      	str	r4, [r5, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002a24:	61eb      	str	r3, [r5, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002a26:	606c      	str	r4, [r5, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002a28:	612e      	str	r6, [r5, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002a2a:	f7fd fdb5 	bl	8000598 <HAL_ADC_Init>
 8002a2e:	b100      	cbz	r0, 8002a32 <main+0xca>
 8002a30:	e7fe      	b.n	8002a30 <main+0xc8>
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002a32:	9008      	str	r0, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a34:	a906      	add	r1, sp, #24
 8002a36:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_1;
 8002a38:	9606      	str	r6, [sp, #24]
  sConfig.Rank = 1;
 8002a3a:	9607      	str	r6, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a3c:	f7fd fc6c 	bl	8000318 <HAL_ADC_ConfigChannel>
 8002a40:	b100      	cbz	r0, 8002a44 <main+0xdc>
 8002a42:	e7fe      	b.n	8002a42 <main+0xda>
  uint32_t adc_chan[6] = {ADC_CHANNEL_1,
 8002a44:	4d44      	ldr	r5, [pc, #272]	; (8002b58 <main+0x1f0>)
 8002a46:	ac06      	add	r4, sp, #24
 8002a48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a4c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002a50:	e884 0003 	stmia.w	r4, {r0, r1}
  while(adc_num < 6 ){
 8002a54:	4c41      	ldr	r4, [pc, #260]	; (8002b5c <main+0x1f4>)
 8002a56:	4f42      	ldr	r7, [pc, #264]	; (8002b60 <main+0x1f8>)
 8002a58:	4626      	mov	r6, r4
 8002a5a:	7825      	ldrb	r5, [r4, #0]
 8002a5c:	2d05      	cmp	r5, #5
 8002a5e:	d965      	bls.n	8002b2c <main+0x1c4>
  adc_num = 0; //adc back to channel 0
 8002a60:	2300      	movs	r3, #0
	  now = adc_current/512;
 8002a62:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8002b68 <main+0x200>
  adc_num = 0; //adc back to channel 0
 8002a66:	7023      	strb	r3, [r4, #0]
	  HAL_ADC_Start(&hadc1);						//Do initial conversion
 8002a68:	4d39      	ldr	r5, [pc, #228]	; (8002b50 <main+0x1e8>)
		  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &customHID, sizeof(struct customHID_t)); //Send HID report with selected button
 8002a6a:	4c3e      	ldr	r4, [pc, #248]	; (8002b64 <main+0x1fc>)
	  then = adc_temp[adc_num]/512;
 8002a6c:	7832      	ldrb	r2, [r6, #0]
	  now = adc_current/512;
 8002a6e:	f8d8 3000 	ldr.w	r3, [r8]
	  then = adc_temp[adc_num]/512;
 8002a72:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
	  now = adc_current/512;
 8002a76:	f3c3 2347 	ubfx	r3, r3, #9, #8
	  if(now != then){
 8002a7a:	f3c2 2247 	ubfx	r2, r2, #9, #8
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d02f      	beq.n	8002ae2 <main+0x17a>
		  customHID.key[0] = A_KEY + now;
 8002a82:	3304      	adds	r3, #4
 8002a84:	f88d 3011 	strb.w	r3, [sp, #17]
		  customHID.modifier = LSHIFT;
 8002a88:	2302      	movs	r3, #2
		  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &customHID, sizeof(struct customHID_t)); //Send HID report with selected button
 8002a8a:	220b      	movs	r2, #11
 8002a8c:	a903      	add	r1, sp, #12
 8002a8e:	4620      	mov	r0, r4
		  customHID.modifier = LSHIFT;
 8002a90:	f88d 3010 	strb.w	r3, [sp, #16]
		  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &customHID, sizeof(struct customHID_t)); //Send HID report with selected button
 8002a94:	f7ff fbc0 	bl	8002218 <USBD_CUSTOM_HID_SendReport>
		  HAL_Delay(10);
 8002a98:	200a      	movs	r0, #10
 8002a9a:	f7fd fb8b 	bl	80001b4 <HAL_Delay>
		  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &customHID, sizeof(struct customHID_t));
 8002a9e:	220b      	movs	r2, #11
 8002aa0:	a903      	add	r1, sp, #12
 8002aa2:	4620      	mov	r0, r4
 8002aa4:	f7ff fbb8 	bl	8002218 <USBD_CUSTOM_HID_SendReport>
		  HAL_Delay(10);
 8002aa8:	200a      	movs	r0, #10
 8002aaa:	f7fd fb83 	bl	80001b4 <HAL_Delay>
		  customHID.modifier = 0;
 8002aae:	2300      	movs	r3, #0
		  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &customHID, sizeof(struct customHID_t)); //Send HID report with selected button		  adc_temp[adc_num] = adc_current;
 8002ab0:	220b      	movs	r2, #11
 8002ab2:	a903      	add	r1, sp, #12
 8002ab4:	4620      	mov	r0, r4
		  customHID.modifier = 0;
 8002ab6:	f88d 3010 	strb.w	r3, [sp, #16]
		  customHID.key[0] = 0;							//Release keys
 8002aba:	f88d 3011 	strb.w	r3, [sp, #17]
		  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &customHID, sizeof(struct customHID_t)); //Send HID report with selected button		  adc_temp[adc_num] = adc_current;
 8002abe:	f7ff fbab 	bl	8002218 <USBD_CUSTOM_HID_SendReport>
		  HAL_Delay(10);
 8002ac2:	200a      	movs	r0, #10
 8002ac4:	f7fd fb76 	bl	80001b4 <HAL_Delay>
		  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &customHID, sizeof(struct customHID_t)); //Send HID report with selected button		  adc_temp[adc_num] = adc_current;
 8002ac8:	220b      	movs	r2, #11
 8002aca:	a903      	add	r1, sp, #12
 8002acc:	4620      	mov	r0, r4
 8002ace:	f7ff fba3 	bl	8002218 <USBD_CUSTOM_HID_SendReport>
		  HAL_Delay(10);
 8002ad2:	200a      	movs	r0, #10
 8002ad4:	f7fd fb6e 	bl	80001b4 <HAL_Delay>
		  adc_temp[adc_num] = adc_current;
 8002ad8:	7833      	ldrb	r3, [r6, #0]
 8002ada:	f8d8 2000 	ldr.w	r2, [r8]
 8002ade:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
	  adc_num = (adc_num + 1)%5;
 8002ae2:	2205      	movs	r2, #5
 8002ae4:	7833      	ldrb	r3, [r6, #0]
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	fb93 f2f2 	sdiv	r2, r3, r2
 8002aec:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002af0:	1a9b      	subs	r3, r3, r2
	  ADCChangeChannel(adc_chan[adc_num]);				//configure adc to GPIO PA1
 8002af2:	aa0c      	add	r2, sp, #48	; 0x30
	  adc_num = (adc_num + 1)%5;
 8002af4:	7033      	strb	r3, [r6, #0]
	  ADCChangeChannel(adc_chan[adc_num]);				//configure adc to GPIO PA1
 8002af6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002afa:	f853 0c18 	ldr.w	r0, [r3, #-24]
 8002afe:	f7ff ff0b 	bl	8002918 <ADCChangeChannel>
	  HAL_ADC_Start(&hadc1);						//Do initial conversion
 8002b02:	4628      	mov	r0, r5
 8002b04:	f7fd fcc4 	bl	8000490 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 200);
 8002b08:	21c8      	movs	r1, #200	; 0xc8
 8002b0a:	4628      	mov	r0, r5
 8002b0c:	f7fd fb62 	bl	80001d4 <HAL_ADC_PollForConversion>
	  adc_current = HAL_ADC_GetValue(&hadc1);		//initialize variable for adc conversions
 8002b10:	4628      	mov	r0, r5
 8002b12:	f7fd fbfd 	bl	8000310 <HAL_ADC_GetValue>
 8002b16:	f8c8 0000 	str.w	r0, [r8]
	  HAL_ADC_Stop(&hadc1);
 8002b1a:	4628      	mov	r0, r5
 8002b1c:	f7fd fdbc 	bl	8000698 <HAL_ADC_Stop>
	  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &customHID, sizeof(struct customHID_t));
 8002b20:	220b      	movs	r2, #11
 8002b22:	a903      	add	r1, sp, #12
 8002b24:	4620      	mov	r0, r4
 8002b26:	f7ff fb77 	bl	8002218 <USBD_CUSTOM_HID_SendReport>
	  now = adc_current/512;
 8002b2a:	e79f      	b.n	8002a6c <main+0x104>
	  adc_temp[adc_num] = ADCNext(adc_chan[adc_num]);
 8002b2c:	ab0c      	add	r3, sp, #48	; 0x30
 8002b2e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8002b32:	f853 0c18 	ldr.w	r0, [r3, #-24]
 8002b36:	f7ff ff01 	bl	800293c <ADCNext>
	  adc_num++;
 8002b3a:	7823      	ldrb	r3, [r4, #0]
	  adc_temp[adc_num] = ADCNext(adc_chan[adc_num]);
 8002b3c:	f847 0025 	str.w	r0, [r7, r5, lsl #2]
	  adc_num++;
 8002b40:	3301      	adds	r3, #1
 8002b42:	7023      	strb	r3, [r4, #0]
 8002b44:	e789      	b.n	8002a5a <main+0xf2>
 8002b46:	bf00      	nop
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	40010c00 	.word	0x40010c00
 8002b50:	200001cc 	.word	0x200001cc
 8002b54:	40012400 	.word	0x40012400
 8002b58:	080030b8 	.word	0x080030b8
 8002b5c:	20000154 	.word	0x20000154
 8002b60:	20000158 	.word	0x20000158
 8002b64:	200001fc 	.word	0x200001fc
 8002b68:	20000150 	.word	0x20000150

08002b6c <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8002b6c:	e7fe      	b.n	8002b6c <_Error_Handler>
	...

08002b70 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002b70:	4b21      	ldr	r3, [pc, #132]	; (8002bf8 <HAL_MspInit+0x88>)
{
 8002b72:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002b74:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b76:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002b78:	f042 0201 	orr.w	r2, r2, #1
 8002b7c:	619a      	str	r2, [r3, #24]
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	f003 0301 	and.w	r3, r3, #1
 8002b84:	9301      	str	r3, [sp, #4]
 8002b86:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b88:	f7fd fda0 	bl	80006cc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f06f 000b 	mvn.w	r0, #11
 8002b92:	4611      	mov	r1, r2
 8002b94:	f7fd fdac 	bl	80006f0 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f06f 000a 	mvn.w	r0, #10
 8002b9e:	4611      	mov	r1, r2
 8002ba0:	f7fd fda6 	bl	80006f0 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f06f 0009 	mvn.w	r0, #9
 8002baa:	4611      	mov	r1, r2
 8002bac:	f7fd fda0 	bl	80006f0 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f06f 0004 	mvn.w	r0, #4
 8002bb6:	4611      	mov	r1, r2
 8002bb8:	f7fd fd9a 	bl	80006f0 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f06f 0003 	mvn.w	r0, #3
 8002bc2:	4611      	mov	r1, r2
 8002bc4:	f7fd fd94 	bl	80006f0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f06f 0001 	mvn.w	r0, #1
 8002bce:	4611      	mov	r1, r2
 8002bd0:	f7fd fd8e 	bl	80006f0 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002bda:	4611      	mov	r1, r2
 8002bdc:	f7fd fd88 	bl	80006f0 <HAL_NVIC_SetPriority>

    /**DISABLE: JTAG-DP Disabled and SW-DP Disabled 
    */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8002be0:	4b06      	ldr	r3, [pc, #24]	; (8002bfc <HAL_MspInit+0x8c>)
 8002be2:	685a      	ldr	r2, [r3, #4]
 8002be4:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8002be8:	605a      	str	r2, [r3, #4]
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002bf0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bf2:	b003      	add	sp, #12
 8002bf4:	f85d fb04 	ldr.w	pc, [sp], #4
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	40010000 	.word	0x40010000

08002c00 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c00:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8002c02:	6802      	ldr	r2, [r0, #0]
 8002c04:	4b0f      	ldr	r3, [pc, #60]	; (8002c44 <HAL_ADC_MspInit+0x44>)
{
 8002c06:	b086      	sub	sp, #24
  if(hadc->Instance==ADC1)
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d119      	bne.n	8002c40 <HAL_ADC_MspInit+0x40>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002c0c:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8002c10:	699a      	ldr	r2, [r3, #24]
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8 
    */
    GPIO_InitStruct.Pin = POT_1_Pin|POT_2_Pin|POT_3_Pin|POT_4_Pin 
                          |POT_5_Pin|POT_6_Pin|POT_7_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c12:	2403      	movs	r4, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002c14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c18:	619a      	str	r2, [r3, #24]
 8002c1a:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c1c:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002c1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c22:	9301      	str	r3, [sp, #4]
 8002c24:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = POT_1_Pin|POT_2_Pin|POT_3_Pin|POT_4_Pin 
 8002c26:	23fe      	movs	r3, #254	; 0xfe
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c28:	4807      	ldr	r0, [pc, #28]	; (8002c48 <HAL_ADC_MspInit+0x48>)
    GPIO_InitStruct.Pin = POT_1_Pin|POT_2_Pin|POT_3_Pin|POT_4_Pin 
 8002c2a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c2c:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c2e:	f7fd fdc7 	bl	80007c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = POT_8_Pin;
 8002c32:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(POT_8_GPIO_Port, &GPIO_InitStruct);
 8002c34:	a902      	add	r1, sp, #8
 8002c36:	4805      	ldr	r0, [pc, #20]	; (8002c4c <HAL_ADC_MspInit+0x4c>)
    GPIO_InitStruct.Pin = POT_8_Pin;
 8002c38:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c3a:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(POT_8_GPIO_Port, &GPIO_InitStruct);
 8002c3c:	f7fd fdc0 	bl	80007c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002c40:	b006      	add	sp, #24
 8002c42:	bd10      	pop	{r4, pc}
 8002c44:	40012400 	.word	0x40012400
 8002c48:	40010800 	.word	0x40010800
 8002c4c:	40010c00 	.word	0x40010c00

08002c50 <NMI_Handler>:
 8002c50:	4770      	bx	lr

08002c52 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002c52:	e7fe      	b.n	8002c52 <HardFault_Handler>

08002c54 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002c54:	e7fe      	b.n	8002c54 <MemManage_Handler>

08002c56 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002c56:	e7fe      	b.n	8002c56 <BusFault_Handler>

08002c58 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002c58:	e7fe      	b.n	8002c58 <UsageFault_Handler>

08002c5a <SVC_Handler>:
 8002c5a:	4770      	bx	lr

08002c5c <DebugMon_Handler>:
 8002c5c:	4770      	bx	lr

08002c5e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002c5e:	4770      	bx	lr

08002c60 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002c60:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c62:	f7fd fa99 	bl	8000198 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8002c6a:	f7fd bda4 	b.w	80007b6 <HAL_SYSTICK_IRQHandler>
	...

08002c70 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002c70:	4801      	ldr	r0, [pc, #4]	; (8002c78 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8002c72:	f7fd bf91 	b.w	8000b98 <HAL_PCD_IRQHandler>
 8002c76:	bf00      	nop
 8002c78:	20000420 	.word	0x20000420

08002c7c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002c7c:	4b0f      	ldr	r3, [pc, #60]	; (8002cbc <SystemInit+0x40>)
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	f042 0201 	orr.w	r2, r2, #1
 8002c84:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002c86:	6859      	ldr	r1, [r3, #4]
 8002c88:	4a0d      	ldr	r2, [pc, #52]	; (8002cc0 <SystemInit+0x44>)
 8002c8a:	400a      	ands	r2, r1
 8002c8c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002c94:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002c98:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ca0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002ca2:	685a      	ldr	r2, [r3, #4]
 8002ca4:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002ca8:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002caa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002cae:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002cb0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002cb4:	4b03      	ldr	r3, [pc, #12]	; (8002cc4 <SystemInit+0x48>)
 8002cb6:	609a      	str	r2, [r3, #8]
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	f8ff0000 	.word	0xf8ff0000
 8002cc4:	e000ed00 	.word	0xe000ed00

08002cc8 <MX_USB_DEVICE_Init>:
/* USB Device Core handle declaration */
USBD_HandleTypeDef hUsbDeviceFS;

/* init function */				        
void MX_USB_DEVICE_Init(void)
{
 8002cc8:	b510      	push	{r4, lr}
  /* Init Device Library,Add Supported Class and Start the library*/
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8002cca:	4c09      	ldr	r4, [pc, #36]	; (8002cf0 <MX_USB_DEVICE_Init+0x28>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	4909      	ldr	r1, [pc, #36]	; (8002cf4 <MX_USB_DEVICE_Init+0x2c>)
 8002cd0:	4620      	mov	r0, r4
 8002cd2:	f7ff fabc 	bl	800224e <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID);
 8002cd6:	4908      	ldr	r1, [pc, #32]	; (8002cf8 <MX_USB_DEVICE_Init+0x30>)
 8002cd8:	4620      	mov	r0, r4
 8002cda:	f7ff facd 	bl	8002278 <USBD_RegisterClass>

  USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS);
 8002cde:	4620      	mov	r0, r4
 8002ce0:	4906      	ldr	r1, [pc, #24]	; (8002cfc <MX_USB_DEVICE_Init+0x34>)
 8002ce2:	f7ff faad 	bl	8002240 <USBD_CUSTOM_HID_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 8002ce6:	4620      	mov	r0, r4

}
 8002ce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_Start(&hUsbDeviceFS);
 8002cec:	f7ff bacb 	b.w	8002286 <USBD_Start>
 8002cf0:	200001fc 	.word	0x200001fc
 8002cf4:	200000fc 	.word	0x200000fc
 8002cf8:	20000000 	.word	0x20000000
 8002cfc:	200000ec 	.word	0x200000ec

08002d00 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002d00:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8002d02:	4b0d      	ldr	r3, [pc, #52]	; (8002d38 <HAL_PCD_MspInit+0x38>)
 8002d04:	6802      	ldr	r2, [r0, #0]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d112      	bne.n	8002d30 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002d0a:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8002d0e:	69da      	ldr	r2, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002d10:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 8002d12:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002d16:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002d18:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8002d1a:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002d1c:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8002d1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d22:	9301      	str	r3, [sp, #4]
 8002d24:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002d26:	f7fd fce3 	bl	80006f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002d2a:	2014      	movs	r0, #20
 8002d2c:	f7fd fd14 	bl	8000758 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8002d30:	b003      	add	sp, #12
 8002d32:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d36:	bf00      	nop
 8002d38:	40005c00 	.word	0x40005c00

08002d3c <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8002d3c:	f200 412c 	addw	r1, r0, #1068	; 0x42c
 8002d40:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002d44:	f7ff bab6 	b.w	80022b4 <USBD_LL_SetupStage>

08002d48 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8002d48:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8002d4c:	f8d3 223c 	ldr.w	r2, [r3, #572]	; 0x23c
 8002d50:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002d54:	f7ff badb 	b.w	800230e <USBD_LL_DataOutStage>

08002d58 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8002d58:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8002d5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d5e:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002d62:	f7ff bb06 	b.w	8002372 <USBD_LL_DataInStage>

08002d66 <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8002d66:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002d6a:	f7ff bb82 	b.w	8002472 <USBD_LL_SOF>

08002d6e <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8002d6e:	b510      	push	{r4, lr}
 8002d70:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;    
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);  
 8002d72:	2101      	movs	r1, #1
 8002d74:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002d78:	f7ff fb69 	bl	800244e <USBD_LL_SetSpeed>
  
  /*Reset Device*/
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8002d7c:	f8d4 045c 	ldr.w	r0, [r4, #1116]	; 0x45c
}
 8002d80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8002d84:	f7ff bb44 	b.w	8002410 <USBD_LL_Reset>

08002d88 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8002d88:	b510      	push	{r4, lr}
 8002d8a:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8002d8c:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002d90:	f7ff fb60 	bl	8002454 <USBD_LL_Suspend>
  /*Enter in STOP mode */
  /* USER CODE BEGIN 2 */  
  if (hpcd->Init.low_power_enable)
 8002d94:	69a3      	ldr	r3, [r4, #24]
 8002d96:	b123      	cbz	r3, 8002da2 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8002d98:	4a02      	ldr	r2, [pc, #8]	; (8002da4 <HAL_PCD_SuspendCallback+0x1c>)
 8002d9a:	6913      	ldr	r3, [r2, #16]
 8002d9c:	f043 0306 	orr.w	r3, r3, #6
 8002da0:	6113      	str	r3, [r2, #16]
 8002da2:	bd10      	pop	{r4, pc}
 8002da4:	e000ed00 	.word	0xe000ed00

08002da8 <HAL_PCD_ResumeCallback>:
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8002da8:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002dac:	f7ff bb5b 	b.w	8002466 <USBD_LL_Resume>

08002db0 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
 8002db0:	b510      	push	{r4, lr}
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 8002db2:	2302      	movs	r3, #2
 8002db4:	2208      	movs	r2, #8
 8002db6:	f04f 0e03 	mov.w	lr, #3
{ 
 8002dba:	4604      	mov	r4, r0
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 8002dbc:	4918      	ldr	r1, [pc, #96]	; (8002e20 <USBD_LL_Init+0x70>)
  hpcd_USB_FS.pData = pdev;
 8002dbe:	4819      	ldr	r0, [pc, #100]	; (8002e24 <USBD_LL_Init+0x74>)
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 8002dc0:	e880 400e 	stmia.w	r0, {r1, r2, r3, lr}
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002dc4:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 8002dc6:	f8c0 445c 	str.w	r4, [r0, #1116]	; 0x45c
  pdev->pData = &hpcd_USB_FS;
 8002dca:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002dce:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002dd0:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002dd2:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002dd4:	f7fd fdd9 	bl	800098a <HAL_PCD_Init>
 8002dd8:	b120      	cbz	r0, 8002de4 <USBD_LL_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002dda:	f44f 718d 	mov.w	r1, #282	; 0x11a
 8002dde:	4812      	ldr	r0, [pc, #72]	; (8002e28 <USBD_LL_Init+0x78>)
 8002de0:	f7ff fec4 	bl	8002b6c <_Error_Handler>
  }

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8002de4:	2200      	movs	r2, #0
 8002de6:	2318      	movs	r3, #24
 8002de8:	4611      	mov	r1, r2
 8002dea:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8002dee:	f7fe f997 	bl	8001120 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8002df2:	2358      	movs	r3, #88	; 0x58
 8002df4:	2200      	movs	r2, #0
 8002df6:	2180      	movs	r1, #128	; 0x80
 8002df8:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8002dfc:	f7fe f990 	bl	8001120 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);  
 8002e00:	2398      	movs	r3, #152	; 0x98
 8002e02:	2200      	movs	r2, #0
 8002e04:	2181      	movs	r1, #129	; 0x81
 8002e06:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8002e0a:	f7fe f989 	bl	8001120 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);  
 8002e0e:	23d8      	movs	r3, #216	; 0xd8
 8002e10:	2200      	movs	r2, #0
 8002e12:	2101      	movs	r1, #1
 8002e14:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8002e18:	f7fe f982 	bl	8001120 <HAL_PCDEx_PMAConfig>
  return USBD_OK;
}
 8002e1c:	2000      	movs	r0, #0
 8002e1e:	bd10      	pop	{r4, pc}
 8002e20:	40005c00 	.word	0x40005c00
 8002e24:	20000420 	.word	0x20000420
 8002e28:	080030ec 	.word	0x080030ec

08002e2c <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8002e2c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8002e2e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002e32:	f7fd fe13 	bl	8000a5c <HAL_PCD_Start>
 8002e36:	2803      	cmp	r0, #3
 8002e38:	bf9a      	itte	ls
 8002e3a:	4b02      	ldrls	r3, [pc, #8]	; (8002e44 <USBD_LL_Start+0x18>)
 8002e3c:	5c18      	ldrbls	r0, [r3, r0]
 8002e3e:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8002e40:	bd08      	pop	{r3, pc}
 8002e42:	bf00      	nop
 8002e44:	080030e8 	.word	0x080030e8

08002e48 <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef  USBD_LL_OpenEP  (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  ep_type,
                                      uint16_t ep_mps)
{
 8002e48:	b510      	push	{r4, lr}
 8002e4a:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, 
 8002e4c:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002e50:	4613      	mov	r3, r2
 8002e52:	4622      	mov	r2, r4
 8002e54:	f7fd fe2d 	bl	8000ab2 <HAL_PCD_EP_Open>
 8002e58:	2803      	cmp	r0, #3
 8002e5a:	bf9a      	itte	ls
 8002e5c:	4b01      	ldrls	r3, [pc, #4]	; (8002e64 <USBD_LL_OpenEP+0x1c>)
 8002e5e:	5c18      	ldrbls	r0, [r3, r0]
 8002e60:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8002e62:	bd10      	pop	{r4, pc}
 8002e64:	080030e8 	.word	0x080030e8

08002e68 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_CloseEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8002e68:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8002e6a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002e6e:	f7fd fe43 	bl	8000af8 <HAL_PCD_EP_Close>
 8002e72:	2803      	cmp	r0, #3
 8002e74:	bf9a      	itte	ls
 8002e76:	4b02      	ldrls	r3, [pc, #8]	; (8002e80 <USBD_LL_CloseEP+0x18>)
 8002e78:	5c18      	ldrbls	r0, [r3, r0]
 8002e7a:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8002e7c:	bd08      	pop	{r3, pc}
 8002e7e:	bf00      	nop
 8002e80:	080030e8 	.word	0x080030e8

08002e84 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_StallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8002e84:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8002e86:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002e8a:	f7fe f8fd 	bl	8001088 <HAL_PCD_EP_SetStall>
 8002e8e:	2803      	cmp	r0, #3
 8002e90:	bf9a      	itte	ls
 8002e92:	4b02      	ldrls	r3, [pc, #8]	; (8002e9c <USBD_LL_StallEP+0x18>)
 8002e94:	5c18      	ldrbls	r0, [r3, r0]
 8002e96:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8002e98:	bd08      	pop	{r3, pc}
 8002e9a:	bf00      	nop
 8002e9c:	080030e8 	.word	0x080030e8

08002ea0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_ClearStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8002ea0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8002ea2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002ea6:	f7fe f918 	bl	80010da <HAL_PCD_EP_ClrStall>
 8002eaa:	2803      	cmp	r0, #3
 8002eac:	bf9a      	itte	ls
 8002eae:	4b02      	ldrls	r3, [pc, #8]	; (8002eb8 <USBD_LL_ClearStallEP+0x18>)
 8002eb0:	5c18      	ldrbls	r0, [r3, r0]
 8002eb2:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8002eb4:	bd08      	pop	{r3, pc}
 8002eb6:	bf00      	nop
 8002eb8:	080030e8 	.word	0x080030e8

08002ebc <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8002ebc:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8002ebe:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8002ec2:	bf45      	ittet	mi
 8002ec4:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8002ec8:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8002ecc:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8002ed0:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8002ed4:	bf58      	it	pl
 8002ed6:	f893 022a 	ldrbpl.w	r0, [r3, #554]	; 0x22a
  }
}
 8002eda:	4770      	bx	lr

08002edc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_SetUSBAddress (USBD_HandleTypeDef *pdev, uint8_t dev_addr)   
{
 8002edc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8002ede:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002ee2:	f7fd fdd2 	bl	8000a8a <HAL_PCD_SetAddress>
 8002ee6:	2803      	cmp	r0, #3
 8002ee8:	bf9a      	itte	ls
 8002eea:	4b02      	ldrls	r3, [pc, #8]	; (8002ef4 <USBD_LL_SetUSBAddress+0x18>)
 8002eec:	5c18      	ldrbls	r0, [r3, r0]
 8002eee:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8002ef0:	bd08      	pop	{r3, pc}
 8002ef2:	bf00      	nop
 8002ef4:	080030e8 	.word	0x080030e8

08002ef8 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef  USBD_LL_Transmit (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  *pbuf,
                                      uint16_t  size)
{
 8002ef8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8002efa:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002efe:	f7fd fe34 	bl	8000b6a <HAL_PCD_EP_Transmit>
 8002f02:	2803      	cmp	r0, #3
 8002f04:	bf9a      	itte	ls
 8002f06:	4b02      	ldrls	r3, [pc, #8]	; (8002f10 <USBD_LL_Transmit+0x18>)
 8002f08:	5c18      	ldrbls	r0, [r3, r0]
 8002f0a:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;    
}
 8002f0c:	bd08      	pop	{r3, pc}
 8002f0e:	bf00      	nop
 8002f10:	080030e8 	.word	0x080030e8

08002f14 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef  USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                           uint8_t  ep_addr,                                      
                                           uint8_t  *pbuf,
                                           uint16_t  size)
{
 8002f14:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8002f16:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002f1a:	f7fd fe0e 	bl	8000b3a <HAL_PCD_EP_Receive>
 8002f1e:	2803      	cmp	r0, #3
 8002f20:	bf9a      	itte	ls
 8002f22:	4b02      	ldrls	r3, [pc, #8]	; (8002f2c <USBD_LL_PrepareReceive+0x18>)
 8002f24:	5c18      	ldrbls	r0, [r3, r0]
 8002f26:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8002f28:	bd08      	pop	{r3, pc}
 8002f2a:	bf00      	nop
 8002f2c:	080030e8 	.word	0x080030e8

08002f30 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
}
 8002f30:	4800      	ldr	r0, [pc, #0]	; (8002f34 <USBD_static_malloc+0x4>)
 8002f32:	4770      	bx	lr
 8002f34:	20000170 	.word	0x20000170

08002f38 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  *p pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8002f38:	4770      	bx	lr

08002f3a <HAL_PCDEx_SetConnectionState>:
* @param hpcd: PCD handle
* @param state: connection state (0 : disconnected / 1: connected) 
* @retval None
*/
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 8002f3a:	4770      	bx	lr

08002f3c <CUSTOM_HID_DeInit_FS>:
static int8_t CUSTOM_HID_DeInit_FS(void)
{
  /* USER CODE BEGIN 5 */ 
  return (0);
  /* USER CODE END 5 */ 
}
 8002f3c:	2000      	movs	r0, #0
 8002f3e:	4770      	bx	lr

08002f40 <CUSTOM_HID_OutEvent_FS>:
static int8_t CUSTOM_HID_OutEvent_FS  (uint8_t event_idx, uint8_t state)
{ 
  /* USER CODE BEGIN 6 */ 
  return (0);
  /* USER CODE END 6 */ 
}
 8002f40:	2000      	movs	r0, #0
 8002f42:	4770      	bx	lr

08002f44 <CUSTOM_HID_Init_FS>:
 8002f44:	2000      	movs	r0, #0
 8002f46:	4770      	bx	lr

08002f48 <USBD_FS_DeviceDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_DeviceDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8002f48:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8002f4a:	4801      	ldr	r0, [pc, #4]	; (8002f50 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8002f4c:	800b      	strh	r3, [r1, #0]
}
 8002f4e:	4770      	bx	lr
 8002f50:	20000118 	.word	0x20000118

08002f54 <USBD_FS_LangIDStrDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_LangIDStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
  *length =  sizeof(USBD_LangIDDesc);  
 8002f54:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8002f56:	4801      	ldr	r0, [pc, #4]	; (8002f5c <USBD_FS_LangIDStrDescriptor+0x8>)
  *length =  sizeof(USBD_LangIDDesc);  
 8002f58:	800b      	strh	r3, [r1, #0]
}
 8002f5a:	4770      	bx	lr
 8002f5c:	2000012c 	.word	0x2000012c

08002f60 <USBD_FS_ManufacturerStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ManufacturerStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8002f60:	b510      	push	{r4, lr}
  USBD_GetString (USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8002f62:	4c04      	ldr	r4, [pc, #16]	; (8002f74 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8002f64:	460a      	mov	r2, r1
 8002f66:	4804      	ldr	r0, [pc, #16]	; (8002f78 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8002f68:	4621      	mov	r1, r4
 8002f6a:	f7ff fc35 	bl	80027d8 <USBD_GetString>
  return USBD_StrDesc;
}
 8002f6e:	4620      	mov	r0, r4
 8002f70:	bd10      	pop	{r4, pc}
 8002f72:	bf00      	nop
 8002f74:	20000880 	.word	0x20000880
 8002f78:	08003126 	.word	0x08003126

08002f7c <USBD_FS_ProductStrDescriptor>:
{
 8002f7c:	b510      	push	{r4, lr}
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8002f7e:	4c04      	ldr	r4, [pc, #16]	; (8002f90 <USBD_FS_ProductStrDescriptor+0x14>)
 8002f80:	460a      	mov	r2, r1
 8002f82:	4804      	ldr	r0, [pc, #16]	; (8002f94 <USBD_FS_ProductStrDescriptor+0x18>)
 8002f84:	4621      	mov	r1, r4
 8002f86:	f7ff fc27 	bl	80027d8 <USBD_GetString>
}
 8002f8a:	4620      	mov	r0, r4
 8002f8c:	bd10      	pop	{r4, pc}
 8002f8e:	bf00      	nop
 8002f90:	20000880 	.word	0x20000880
 8002f94:	08003139 	.word	0x08003139

08002f98 <USBD_FS_SerialStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_SerialStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8002f98:	b510      	push	{r4, lr}
  if(speed  == USBD_SPEED_HIGH)
  {    
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8002f9a:	4c04      	ldr	r4, [pc, #16]	; (8002fac <USBD_FS_SerialStrDescriptor+0x14>)
 8002f9c:	460a      	mov	r2, r1
 8002f9e:	4804      	ldr	r0, [pc, #16]	; (8002fb0 <USBD_FS_SerialStrDescriptor+0x18>)
 8002fa0:	4621      	mov	r1, r4
 8002fa2:	f7ff fc19 	bl	80027d8 <USBD_GetString>
  else
  {
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);    
  }
  return USBD_StrDesc;
}
 8002fa6:	4620      	mov	r0, r4
 8002fa8:	bd10      	pop	{r4, pc}
 8002faa:	bf00      	nop
 8002fac:	20000880 	.word	0x20000880
 8002fb0:	08003156 	.word	0x08003156

08002fb4 <USBD_FS_ConfigStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ConfigStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8002fb4:	b510      	push	{r4, lr}
  if(speed  == USBD_SPEED_HIGH)
  {  
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8002fb6:	4c04      	ldr	r4, [pc, #16]	; (8002fc8 <USBD_FS_ConfigStrDescriptor+0x14>)
 8002fb8:	460a      	mov	r2, r1
 8002fba:	4804      	ldr	r0, [pc, #16]	; (8002fcc <USBD_FS_ConfigStrDescriptor+0x18>)
 8002fbc:	4621      	mov	r1, r4
 8002fbe:	f7ff fc0b 	bl	80027d8 <USBD_GetString>
  else
  {
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length); 
  }
  return USBD_StrDesc;  
}
 8002fc2:	4620      	mov	r0, r4
 8002fc4:	bd10      	pop	{r4, pc}
 8002fc6:	bf00      	nop
 8002fc8:	20000880 	.word	0x20000880
 8002fcc:	080030ff 	.word	0x080030ff

08002fd0 <USBD_FS_InterfaceStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_InterfaceStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8002fd0:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8002fd2:	4c04      	ldr	r4, [pc, #16]	; (8002fe4 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8002fd4:	460a      	mov	r2, r1
 8002fd6:	4804      	ldr	r0, [pc, #16]	; (8002fe8 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8002fd8:	4621      	mov	r1, r4
 8002fda:	f7ff fbfd 	bl	80027d8 <USBD_GetString>
  else
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;  
}
 8002fde:	4620      	mov	r0, r4
 8002fe0:	bd10      	pop	{r4, pc}
 8002fe2:	bf00      	nop
 8002fe4:	20000880 	.word	0x20000880
 8002fe8:	08003111 	.word	0x08003111

08002fec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002fec:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002fee:	e003      	b.n	8002ff8 <LoopCopyDataInit>

08002ff0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002ff0:	4b0b      	ldr	r3, [pc, #44]	; (8003020 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002ff2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002ff4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002ff6:	3104      	adds	r1, #4

08002ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002ff8:	480a      	ldr	r0, [pc, #40]	; (8003024 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002ffa:	4b0b      	ldr	r3, [pc, #44]	; (8003028 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002ffc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002ffe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003000:	d3f6      	bcc.n	8002ff0 <CopyDataInit>
  ldr r2, =_sbss
 8003002:	4a0a      	ldr	r2, [pc, #40]	; (800302c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003004:	e002      	b.n	800300c <LoopFillZerobss>

08003006 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003006:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003008:	f842 3b04 	str.w	r3, [r2], #4

0800300c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800300c:	4b08      	ldr	r3, [pc, #32]	; (8003030 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800300e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003010:	d3f9      	bcc.n	8003006 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003012:	f7ff fe33 	bl	8002c7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003016:	f000 f80f 	bl	8003038 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800301a:	f7ff fca5 	bl	8002968 <main>
  bx lr
 800301e:	4770      	bx	lr
  ldr r3, =_sidata
 8003020:	0800316c 	.word	0x0800316c
  ldr r0, =_sdata
 8003024:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003028:	20000130 	.word	0x20000130
  ldr r2, =_sbss
 800302c:	20000130 	.word	0x20000130
  ldr r3, = _ebss
 8003030:	20000a80 	.word	0x20000a80

08003034 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003034:	e7fe      	b.n	8003034 <ADC1_2_IRQHandler>
	...

08003038 <__libc_init_array>:
 8003038:	b570      	push	{r4, r5, r6, lr}
 800303a:	2500      	movs	r5, #0
 800303c:	4e0c      	ldr	r6, [pc, #48]	; (8003070 <__libc_init_array+0x38>)
 800303e:	4c0d      	ldr	r4, [pc, #52]	; (8003074 <__libc_init_array+0x3c>)
 8003040:	1ba4      	subs	r4, r4, r6
 8003042:	10a4      	asrs	r4, r4, #2
 8003044:	42a5      	cmp	r5, r4
 8003046:	d109      	bne.n	800305c <__libc_init_array+0x24>
 8003048:	f000 f81a 	bl	8003080 <_init>
 800304c:	2500      	movs	r5, #0
 800304e:	4e0a      	ldr	r6, [pc, #40]	; (8003078 <__libc_init_array+0x40>)
 8003050:	4c0a      	ldr	r4, [pc, #40]	; (800307c <__libc_init_array+0x44>)
 8003052:	1ba4      	subs	r4, r4, r6
 8003054:	10a4      	asrs	r4, r4, #2
 8003056:	42a5      	cmp	r5, r4
 8003058:	d105      	bne.n	8003066 <__libc_init_array+0x2e>
 800305a:	bd70      	pop	{r4, r5, r6, pc}
 800305c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003060:	4798      	blx	r3
 8003062:	3501      	adds	r5, #1
 8003064:	e7ee      	b.n	8003044 <__libc_init_array+0xc>
 8003066:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800306a:	4798      	blx	r3
 800306c:	3501      	adds	r5, #1
 800306e:	e7f2      	b.n	8003056 <__libc_init_array+0x1e>
 8003070:	08003164 	.word	0x08003164
 8003074:	08003164 	.word	0x08003164
 8003078:	08003164 	.word	0x08003164
 800307c:	08003168 	.word	0x08003168

08003080 <_init>:
 8003080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003082:	bf00      	nop
 8003084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003086:	bc08      	pop	{r3}
 8003088:	469e      	mov	lr, r3
 800308a:	4770      	bx	lr

0800308c <_fini>:
 800308c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800308e:	bf00      	nop
 8003090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003092:	bc08      	pop	{r3}
 8003094:	469e      	mov	lr, r3
 8003096:	4770      	bx	lr
